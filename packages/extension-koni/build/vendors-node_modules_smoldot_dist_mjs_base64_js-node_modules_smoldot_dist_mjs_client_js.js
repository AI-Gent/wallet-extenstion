"use strict";
((typeof self !== 'undefined' ? self : this)["webpackChunk_subwallet_extension_koni"] = (typeof self !== 'undefined' ? self : this)["webpackChunk_subwallet_extension_koni"] || []).push([["vendors-node_modules_smoldot_dist_mjs_base64_js-node_modules_smoldot_dist_mjs_client_js"],{

/***/ "../../node_modules/smoldot/dist/mjs/base64.js":
/*!*****************************************************!*\
  !*** ../../node_modules/smoldot/dist/mjs/base64.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "base64Decode": () => (/* binding */ base64Decode),
/* harmony export */   "classicDecode": () => (/* binding */ classicDecode),
/* harmony export */   "multibaseBase64Decode": () => (/* binding */ multibaseBase64Decode),
/* harmony export */   "urlSafeDecode": () => (/* binding */ urlSafeDecode)
/* harmony export */ });
// Smoldot
// Copyright (C) 2019-2022  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
let rfc4648Alphabet = new Map();
const rfc4648AlphabetAsStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (let i = 0; i < rfc4648AlphabetAsStr.length; ++i) {
    rfc4648Alphabet.set(rfc4648AlphabetAsStr[i], i);
}
let urlSafeAlphabet = new Map();
const urlSafeAlphabetAsStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
for (let i = 0; i < urlSafeAlphabetAsStr.length; ++i) {
    urlSafeAlphabet.set(urlSafeAlphabetAsStr[i], i);
}
/**
 * Decodes a multibase-encoded string.
 *
 * Throws an exception if the encoding isn't base64 or one of its variants.
 */
function multibaseBase64Decode(input) {
    if (input.length === 0)
        throw new Error("Invalid multibase");
    switch (input[0]) {
        case 'm':
        case 'M':
            return classicDecode(input.slice(1));
        case 'u':
        case 'U':
            return urlSafeDecode(input.slice(1));
        default:
            throw new Error('Unknown multibase prefix: ' + input[0]);
    }
}
/**
 * Decodes a base64-encoded string into bytes using the original alphabet from RFC4648.
 *
 * See <https://datatracker.ietf.org/doc/html/rfc4648#section-4>.
 */
function classicDecode(input) {
    return base64Decode(input, rfc4648Alphabet);
}
/**
 * Decodes a base64-encoded string into bytes using the URL-safe alphabet.
 *
 * See <https://datatracker.ietf.org/doc/html/rfc4648#section-5>.
 */
function urlSafeDecode(input) {
    return base64Decode(input, urlSafeAlphabet);
}
/**
 * Decodes a base64-encoded string into bytes using the given alphabet.
 */
function base64Decode(input, alphabet) {
    // Remove the padding bytes at the end of the string. We don't check whether the padding is
    // accurate.
    while (input.length !== 0 && input[input.length - 1] === '=')
        input = input.slice(0, -1);
    // Contains the output data.
    const out = new Uint8Array(Math.floor(input.length * 6 / 8));
    // Position within `out` of the next byte to write.
    let outPos = 0;
    // The bits decoded from the input are added to the right of this value.
    let currentByte = 0;
    // The left-most `validBitsInCurrentByte` bits of `currentByte` must be written out.
    let validBitsInCurrentByte = 0;
    for (let i = 0; i < input.length; ++i) {
        const inputChr = input[i];
        const bitsToAppend = alphabet.get(inputChr);
        if (bitsToAppend === undefined)
            throw new Error('Invalid base64 character: ' + inputChr);
        console.assert(bitsToAppend < (1 << 6));
        currentByte = (currentByte << 6) | bitsToAppend;
        validBitsInCurrentByte += 6;
        if (validBitsInCurrentByte >= 8) {
            let outByte = currentByte >> (validBitsInCurrentByte - 8);
            out[outPos] = outByte;
            outPos += 1;
            validBitsInCurrentByte -= 8;
        }
        console.assert(validBitsInCurrentByte < 8);
        currentByte &= 0xff;
    }
    if ((currentByte & ((1 << validBitsInCurrentByte) - 1)) !== 0)
        throw new Error("Unexpected EOF");
    if (validBitsInCurrentByte >= 6)
        throw new Error("Unexpected EOF");
    return out;
}


/***/ }),

/***/ "../../node_modules/smoldot/dist/mjs/client.js":
/*!*****************************************************!*\
  !*** ../../node_modules/smoldot/dist/mjs/client.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddChainError": () => (/* binding */ AddChainError),
/* harmony export */   "AlreadyDestroyedError": () => (/* binding */ AlreadyDestroyedError),
/* harmony export */   "CrashError": () => (/* reexport safe */ _instance_instance_js__WEBPACK_IMPORTED_MODULE_0__.CrashError),
/* harmony export */   "JsonRpcDisabledError": () => (/* binding */ JsonRpcDisabledError),
/* harmony export */   "MalformedJsonRpcError": () => (/* reexport safe */ _instance_instance_js__WEBPACK_IMPORTED_MODULE_0__.MalformedJsonRpcError),
/* harmony export */   "QueueFullError": () => (/* reexport safe */ _instance_instance_js__WEBPACK_IMPORTED_MODULE_0__.QueueFullError),
/* harmony export */   "start": () => (/* binding */ start)
/* harmony export */ });
/* harmony import */ var _instance_instance_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instance/instance.js */ "../../node_modules/smoldot/dist/mjs/instance/instance.js");
// Smoldot
// Copyright (C) 2019-2022  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


/**
 * Thrown in case of a problem when initializing the chain.
 */
class AddChainError extends Error {
    constructor(message) {
        super(message);
        this.name = "AddChainError";
    }
}
/**
 * Thrown in case the API user tries to use a chain or client that has already been destroyed.
 */
class AlreadyDestroyedError extends Error {
    constructor() {
        super();
        this.name = "AlreadyDestroyedError";
    }
}
/**
 * Thrown when trying to send a JSON-RPC message to a chain whose JSON-RPC system hasn't been
 * enabled.
 */
class JsonRpcDisabledError extends Error {
    constructor() {
        super();
        this.name = "JsonRpcDisabledError";
    }
}
// This function is similar to the `start` function found in `index.ts`, except with an extra
// parameter containing the platform-specific bindings.
// Contrary to the one within `index.js`, this function is not supposed to be directly used.
function start(options, wasmModule, platformBindings) {
    const logCallback = options.logCallback || ((level, target, message) => {
        // The first parameter of the methods of `console` has some printf-like substitution
        // capabilities. We don't really need to use this, but not using it means that the logs might
        // not get printed correctly if they contain `%`.
        if (level <= 1) {
            console.error("[%s] %s", target, message);
        }
        else if (level == 2) {
            console.warn("[%s] %s", target, message);
        }
        else if (level == 3) {
            console.info("[%s] %s", target, message);
        }
        else if (level == 4) {
            console.debug("[%s] %s", target, message);
        }
        else {
            console.trace("[%s] %s", target, message);
        }
    });
    // For each chain object returned by `addChain`, the associated internal chain id.
    //
    // Immediately cleared when `remove()` is called on a chain.
    const chainIds = new WeakMap();
    // If `Client.terminate()Ì€  is called, this error is set to a value.
    // All the functions of the public API check if this contains a value.
    const alreadyDestroyedError = { value: null };
    const instance = (0,_instance_instance_js__WEBPACK_IMPORTED_MODULE_0__.start)({
        wasmModule,
        // Maximum level of log entries sent by the client.
        // 0 = Logging disabled, 1 = Error, 2 = Warn, 3 = Info, 4 = Debug, 5 = Trace
        maxLogLevel: options.maxLogLevel || 3,
        logCallback,
        cpuRateLimit: options.cpuRateLimit || 1.0,
    }, platformBindings);
    return {
        addChain: (options) => __awaiter(this, void 0, void 0, function* () {
            if (alreadyDestroyedError.value)
                throw alreadyDestroyedError.value;
            // Passing a JSON object for the chain spec is an easy mistake, so we provide a more
            // readable error.
            if (!(typeof options.chainSpec === 'string'))
                throw new Error("Chain specification must be a string");
            let potentialRelayChainsIds = [];
            if (!!options.potentialRelayChains) {
                for (const chain of options.potentialRelayChains) {
                    // The content of `options.potentialRelayChains` are supposed to be chains earlier
                    // returned by `addChain`.
                    const id = chainIds.get(chain);
                    if (id === undefined) // It is possible for `id` to be missing if it has earlier been removed.
                        continue;
                    potentialRelayChainsIds.push(id);
                }
            }
            const outcome = yield instance.addChain(options.chainSpec, typeof options.databaseContent === 'string' ? options.databaseContent : "", potentialRelayChainsIds, !!options.disableJsonRpc);
            if (!outcome.success)
                throw new AddChainError(outcome.error);
            const chainId = outcome.chainId;
            const wasDestroyed = { destroyed: false };
            // `expected` was pushed by the `addChain` method.
            // Resolve the promise that `addChain` returned to the user.
            const newChain = {
                sendJsonRpc: (request) => {
                    if (alreadyDestroyedError.value)
                        throw alreadyDestroyedError.value;
                    if (wasDestroyed.destroyed)
                        throw new AlreadyDestroyedError();
                    if (options.disableJsonRpc)
                        throw new JsonRpcDisabledError();
                    if (request.length >= 64 * 1024 * 1024) {
                        throw new _instance_instance_js__WEBPACK_IMPORTED_MODULE_0__.MalformedJsonRpcError();
                    }
                    ;
                    instance.request(request, chainId);
                },
                nextJsonRpcResponse: () => {
                    if (alreadyDestroyedError.value)
                        return Promise.reject(alreadyDestroyedError.value);
                    if (wasDestroyed.destroyed)
                        return Promise.reject(new AlreadyDestroyedError());
                    if (options.disableJsonRpc)
                        return Promise.reject(new JsonRpcDisabledError());
                    return instance.nextJsonRpcResponse(chainId);
                },
                remove: () => {
                    if (alreadyDestroyedError.value)
                        throw alreadyDestroyedError.value;
                    if (wasDestroyed.destroyed)
                        throw new AlreadyDestroyedError();
                    wasDestroyed.destroyed = true;
                    console.assert(chainIds.has(newChain));
                    chainIds.delete(newChain);
                    instance.removeChain(chainId);
                },
            };
            chainIds.set(newChain, chainId);
            return newChain;
        }),
        terminate: () => __awaiter(this, void 0, void 0, function* () {
            if (alreadyDestroyedError.value)
                throw alreadyDestroyedError.value;
            alreadyDestroyedError.value = new AlreadyDestroyedError();
            instance.startShutdown();
        })
    };
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,