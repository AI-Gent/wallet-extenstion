/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../extension-base/src/background/RequestBytesSign.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/background/RequestBytesSign.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RequestBytesSign)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_dapp_wrapBytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-dapp/wrapBytes */ "../extension-dapp/src/wrapBytes.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/u8a/toHex.js");
// Copyright 2019-2022 @polkadot/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0



class RequestBytesSign {
  constructor(payload) {
    this.payload = payload;
  }
  sign(_registry, pair) {
    return {
      signature: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__.u8aToHex)(pair.sign((0,_subwallet_extension_dapp_wrapBytes__WEBPACK_IMPORTED_MODULE_1__.wrapBytes)(this.payload.data)))
    };
  }
}

/***/ }),

/***/ "../extension-base/src/background/RequestExtrinsicSign.ts":
/*!****************************************************************!*\
  !*** ../extension-base/src/background/RequestExtrinsicSign.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RequestExtrinsicSign)
/* harmony export */ });
// Copyright 2019-2022 @polkadot/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0

class RequestExtrinsicSign {
  constructor(payload) {
    this.payload = payload;
  }
  sign(registry, pair) {
    return registry.createType('ExtrinsicPayload', this.payload, {
      version: this.payload.version
    }).sign(pair);
  }
}

/***/ }),

/***/ "../extension-base/src/background/errors/BalanceError.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/background/errors/BalanceError.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BalanceError": () => (/* binding */ BalanceError)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/SWError */ "../extension-base/src/background/errors/SWError.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/translate.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0






// Todo: finish this map in the future
const defaultErrorMap = {
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.BalanceErrorType.NETWORK_ERROR]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.detectTranslate)('Network is inactive. Please enable network'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.BalanceErrorType.TOKEN_ERROR]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.detectTranslate)('Token is not supported'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.BalanceErrorType.TIMEOUT]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.detectTranslate)('Unable to get balance. Please re-enable the network'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.BalanceErrorType.GET_BALANCE_ERROR]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.detectTranslate)('Unable to get balance. Please re-enable the network'),
    code: undefined
  }
};
class BalanceError extends _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_3__.SWError {
  constructor(errorType, errMessage, data) {
    const defaultErr = defaultErrorMap[errorType];
    const message = errMessage || (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)((defaultErr === null || defaultErr === void 0 ? void 0 : defaultErr.message) || '') || errorType;
    super(errorType, message, defaultErr === null || defaultErr === void 0 ? void 0 : defaultErr.code, data);
    this.errorType = errorType;
  }
}

/***/ }),

/***/ "../extension-base/src/background/errors/EvmProviderError.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/background/errors/EvmProviderError.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EvmProviderError": () => (/* binding */ EvmProviderError)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/SWError */ "../extension-base/src/background/errors/SWError.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/translate.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0




const defaultErrorMap = {
  USER_REJECTED_REQUEST: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('User Rejected Request'),
    code: 4001
  },
  UNAUTHORIZED: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Failed to sign'),
    code: 4100
  },
  UNSUPPORTED_METHOD: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Unsupported Method'),
    code: 4200
  },
  DISCONNECTED: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Network is disconnected'),
    code: 4900
  },
  CHAIN_DISCONNECTED: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Network is disconnected'),
    code: 4901
  },
  INVALID_PARAMS: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Undefined error. Please contact SubWallet support'),
    code: -32602
  },
  INTERNAL_ERROR: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Undefined error. Please contact SubWallet support'),
    code: -32603
  }
};
class EvmProviderError extends _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_2__.SWError {
  constructor(errorType, errMessage, data) {
    const {
      code,
      message
    } = defaultErrorMap[errorType];
    const finalMessage = errMessage || (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)(message || '') || errorType;
    super(errorType, finalMessage, code, data);
    this.errorType = errorType;
  }
}

/***/ }),

/***/ "../extension-base/src/background/errors/SWError.ts":
/*!**********************************************************!*\
  !*** ../extension-base/src/background/errors/SWError.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SWError": () => (/* binding */ SWError)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0

class SWError extends Error {
  constructor(errorType, message, code, data) {
    super(message);
    this.errorType = errorType;
    this.code = code;
    this.data = data;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      code: this.code
    };
  }
}

/***/ }),

/***/ "../extension-base/src/background/errors/TransactionError.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/background/errors/TransactionError.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransactionError": () => (/* binding */ TransactionError)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/SWError */ "../extension-base/src/background/errors/SWError.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/translate.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0






// Todo: finish this map in the future
const defaultErrorMap = {
  NOT_ENOUGH_BALANCE: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Insufficient balance'),
    code: undefined
  },
  CHAIN_DISCONNECTED: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Network is disconnected'),
    code: undefined
  },
  INVALID_PARAMS: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Undefined error. Please contact SubWallet support'),
    code: undefined
  },
  INTERNAL_ERROR: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Undefined error. Please contact SubWallet support'),
    code: undefined
  },
  DUPLICATE_TRANSACTION: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Another transaction is in queue. Please try again later'),
    code: undefined
  },
  UNABLE_TO_SIGN: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Unable to sign'),
    code: undefined
  },
  USER_REJECT_REQUEST: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Rejected by user'),
    code: undefined
  },
  UNABLE_TO_SEND: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Unable to send'),
    code: undefined
  },
  SEND_TRANSACTION_FAILED: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Send transaction failed'),
    code: undefined
  },
  NOT_ENOUGH_EXISTENTIAL_DEPOSIT: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Insufficient balance to cover existential deposit. Please decrease the transaction amount or increase your current balance'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.BasicTxErrorType.UNSUPPORTED]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('This feature is not available with this token'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.BasicTxErrorType.TIMEOUT]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Transaction timeout'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.NOT_ENOUGH_MIN_STAKE]: {
    message: 'Not enough min stake',
    // Message specific to each case
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.EXCEED_MAX_NOMINATIONS]: {
    message: 'Exceed max nominations',
    // Message specific to each case
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.EXIST_UNSTAKING_REQUEST]: {
    message: 'Exist unstaking request',
    // Message specific to each case
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.INVALID_ACTIVE_STAKE]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Invalid. If you unstake this amount your active stake would fall below minimum active threshold'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.EXCEED_MAX_UNSTAKING]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('You reached the maximum number of unstake requests'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.INACTIVE_NOMINATION_POOL]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Invalid. Inactive nomination pool'),
    code: undefined
  },
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.TransferTxErrorType.RECEIVER_NOT_ENOUGH_EXISTENTIAL_DEPOSIT]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.detectTranslate)('Receiver is not enough existential deposit'),
    code: undefined
  }
};
class TransactionError extends _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_3__.SWError {
  constructor(errorType, errMessage, data) {
    const defaultErr = defaultErrorMap[errorType];
    const message = errMessage || (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)((defaultErr === null || defaultErr === void 0 ? void 0 : defaultErr.message) || '') || errorType;
    super(errorType, message, defaultErr === null || defaultErr === void 0 ? void 0 : defaultErr.code, data);
    this.errorType = errorType;
  }
}

/***/ }),

/***/ "../extension-base/src/background/handlers/Extension.ts":
/*!**************************************************************!*\
  !*** ../extension-base/src/background/handlers/Extension.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ETH_DERIVE_DEFAULT": () => (/* binding */ ETH_DERIVE_DEFAULT),
/* harmony export */   "SEED_DEFAULT_LENGTH": () => (/* binding */ SEED_DEFAULT_LENGTH),
/* harmony export */   "SEED_LENGTHS": () => (/* binding */ SEED_LENGTHS),
/* harmony export */   "default": () => (/* binding */ Extension),
/* harmony export */   "getSuri": () => (/* binding */ getSuri),
/* harmony export */   "isJsonPayload": () => (/* binding */ isJsonPayload)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/index.js");
/* harmony import */ var _subwallet_ui_keyring_observable_accounts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/ui-keyring/observable/accounts */ "../../node_modules/@subwallet/ui-keyring/observable/accounts.js");
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/types */ "../../node_modules/@polkadot/types/create/registry.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/assert.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/hex.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/mnemonic/generate.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/key/extractSuri.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/mnemonic/validate.js");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers */ "../extension-base/src/background/handlers/helpers.ts");
/* harmony import */ var _subscriptions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subscriptions */ "../extension-base/src/background/handlers/subscriptions.ts");
// Copyright 2019-2022 @polkadot/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0









const SEED_DEFAULT_LENGTH = 12;
const SEED_LENGTHS = [12, 15, 18, 21, 24];
const ETH_DERIVE_DEFAULT = '/m/44\'/60\'/0\'/0/0';

// a global registry to use internally
const registry = new _polkadot_types__WEBPACK_IMPORTED_MODULE_0__.TypeRegistry();
function getSuri(seed, type) {
  return type === 'ethereum' ? `${seed}${ETH_DERIVE_DEFAULT}` : seed;
}
function transformAccounts(accounts) {
  return Object.values(accounts).map(({
    json: {
      address,
      meta
    },
    type
  }) => ({
    address,
    ...meta,
    type
  }));
}
function isJsonPayload(value) {
  return value.genesisHash !== undefined;
}
class Extension {
  #state;
  constructor(state) {
    this.cachedUnlocks = {};
    this.#state = state;
  }
  accountsCreateExternal({
    address,
    genesisHash,
    name
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].addExternal(address, {
      genesisHash,
      name
    });
    return true;
  }
  accountsCreateHardware({
    accountIndex,
    address,
    addressOffset,
    genesisHash,
    hardwareType,
    name
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].addHardware(address, hardwareType, {
      accountIndex,
      addressOffset,
      genesisHash,
      name
    });
    return true;
  }
  accountsCreateSuri({
    genesisHash,
    name,
    suri,
    type
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].addUri(getSuri(suri, type), {
      genesisHash,
      name
    }, type);
    return true;
  }
  accountsChangePassword({
    address,
    newPass,
    oldPass
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pair, 'Unable to find account');
    try {
      if (!pair.isLocked) {
        pair.lock();
      }
      pair.decodePkcs8(oldPass);
    } catch (error) {
      throw new Error('Wrong password');
    }
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].encryptAccount(pair, newPass);
    return true;
  }
  accountsEdit({
    address,
    name
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pair, 'Unable to find account');
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].saveAccountMeta(pair, {
      ...pair.meta,
      name
    });
    return true;
  }
  accountsExport({
    address,
    password
  }) {
    return {
      exportedJson: _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].backupAccount(_subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(address), password)
    };
  }

  // private async accountsBatchExport ({ addresses, password }: RequestAccountBatchExport): Promise<ResponseAccountsExport> {
  //   return {
  //     exportedJson: await keyring.backupAccounts(addresses, password)
  //   };
  // }

  accountsForget({
    address
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].forgetAccount(address);
    return true;
  }
  refreshAccountPasswordCache(pair) {
    const {
      address
    } = pair;
    const savedExpiry = this.cachedUnlocks[address] || 0;
    const remainingTime = savedExpiry - Date.now();
    if (remainingTime < 0) {
      this.cachedUnlocks[address] = 0;
      pair.lock();
      return 0;
    }
    return remainingTime;
  }
  accountsShow({
    address,
    isShowing
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pair, 'Unable to find account');
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].saveAccountMeta(pair, {
      ...pair.meta,
      isHidden: !isShowing
    });
    return true;
  }
  accountsTie({
    address,
    genesisHash
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pair, 'Unable to find account');
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].saveAccountMeta(pair, {
      ...pair.meta,
      genesisHash
    });
    return true;
  }
  accountsValidate({
    address,
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].backupAccount(_subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(address), password);
      return true;
    } catch (e) {
      return false;
    }
  }

  // FIXME This looks very much like what we have in Tabs
  accountsSubscribe(id, port) {
    const cb = (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.createSubscription)(id, port);
    const subscription = _subwallet_ui_keyring_observable_accounts__WEBPACK_IMPORTED_MODULE_4__.accounts.subject.subscribe(accounts => cb(transformAccounts(accounts)));
    port.onDisconnect.addListener(() => {
      (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.unsubscribe)(id);
      subscription.unsubscribe();
    });
    return transformAccounts(_subwallet_ui_keyring_observable_accounts__WEBPACK_IMPORTED_MODULE_4__.accounts.subject.getValue());
  }
  authorizeApprove({
    id
  }) {
    const queued = this.#state.getAuthRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const {
      resolve
    } = queued;
    resolve(true);
    return true;
  }
  getAuthList() {
    return {
      list: this.#state.authUrls
    };
  }
  authorizeReject({
    id
  }) {
    const queued = this.#state.getAuthRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const {
      reject
    } = queued;
    reject(new Error('Rejected'));
    return true;
  }

  // FIXME This looks very much like what we have in accounts
  authorizeSubscribe(id, port) {
    const cb = (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.createSubscription)(id, port);
    const subscription = this.#state.authSubject.subscribe(requests => cb(requests));
    port.onDisconnect.addListener(() => {
      (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.unsubscribe)(id);
      subscription.unsubscribe();
    });
    return true;
  }
  metadataApprove({
    id
  }) {
    const queued = this.#state.getMetaRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const {
      request,
      resolve
    } = queued;
    this.#state.saveMetadata(request);
    resolve(true);
    return true;
  }
  metadataGet(genesisHash) {
    return this.#state.knownMetadata.find(result => result.genesisHash === genesisHash) || null;
  }
  metadataList() {
    return this.#state.knownMetadata;
  }
  metadataReject({
    id
  }) {
    const queued = this.#state.getMetaRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const {
      reject
    } = queued;
    reject(new Error('Rejected'));
    return true;
  }
  metadataSubscribe(id, port) {
    const cb = (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.createSubscription)(id, port);
    const subscription = this.#state.metaSubject.subscribe(requests => cb(requests));
    port.onDisconnect.addListener(() => {
      (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.unsubscribe)(id);
      subscription.unsubscribe();
    });
    return this.#state.metaSubject.value;
  }
  jsonRestore({
    file,
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].restoreAccount(file, password, true);
    } catch (error) {
      throw new Error(error.message);
    }
  }
  batchRestore({
    file,
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].restoreAccounts(file, password);
    } catch (error) {
      throw new Error(error.message);
    }
  }
  jsonGetAccountInfo(json) {
    try {
      const {
        address,
        meta: {
          genesisHash,
          name
        },
        type
      } = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].createFromJson(json);
      return {
        address,
        genesisHash,
        name,
        type
      };
    } catch (e) {
      console.error(e);
      throw new Error(e.message);
    }
  }
  seedCreate({
    length = SEED_DEFAULT_LENGTH,
    seed: _seed,
    type
  }) {
    const seed = _seed || (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.mnemonicGenerate)(length);
    return {
      address: _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].createFromUri(getSuri(seed, type), {}, type).address,
      seed
    };
  }
  seedValidate({
    suri,
    type
  }) {
    const {
      phrase
    } = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__.keyExtractSuri)(suri);
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__.isHex)(phrase)) {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_7__.isHex)(phrase, 256), 'Invalid seed phrase. Please try again.');
    } else {
      // sadly isHex detects as string, so we need a cast here
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(SEED_LENGTHS.includes(phrase.split(' ').length), `Mnemonic needs to contain ${SEED_LENGTHS.join(', ')} words`);
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_8__.mnemonicValidate)(phrase), 'Invalid seed phrase. Please try again.');
    }
    return {
      address: _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].createFromUri(getSuri(suri, type), {}, type).address,
      suri
    };
  }
  signingApprovePassword({
    id,
    password,
    savePass
  }) {
    const queued = this.#state.getSignRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const {
      reject,
      request,
      resolve
    } = queued;
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(queued.account.address);

    // unlike queued.account.address the following
    // address is encoded with the default prefix
    // which what is used for password caching mapping
    const {
      address
    } = pair;
    if (!pair) {
      reject(new Error('Unable to find account'));
      return false;
    }
    this.refreshAccountPasswordCache(pair);

    // if the keyring pair is locked, the password is needed
    if (pair.isLocked && !password) {
      reject(new Error('Password needed to unlock the account'));
    }
    if (pair.isLocked) {
      pair.decodePkcs8(password);
    }
    const {
      payload
    } = request;
    if (isJsonPayload(payload)) {
      // Get the metadata for the genesisHash
      const currentMetadata = this.#state.knownMetadata.find(meta => meta.genesisHash === payload.genesisHash);

      // set the registry before calling the sign function
      registry.setSignedExtensions(payload.signedExtensions, currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.userExtensions);
      if (currentMetadata) {
        registry.register(currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.types);
      }
    }
    const result = request.sign(registry, pair);
    if (savePass) {
      this.cachedUnlocks[address] = Date.now() + _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_9__.PASSWORD_EXPIRY_MS;
    } else {
      pair.lock();
    }
    resolve({
      id,
      ...result
    });
    return true;
  }
  signingApproveSignature({
    id,
    signature
  }) {
    const queued = this.#state.getSignRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const {
      resolve
    } = queued;
    resolve({
      id,
      signature
    });
    return true;
  }
  signingCancel({
    id
  }) {
    const queued = this.#state.getSignRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const {
      reject
    } = queued;
    reject(new Error('Cancelled'));
    return true;
  }
  signingIsLocked({
    id
  }) {
    const queued = this.#state.getSignRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(queued, 'Unable to proceed. Please try again');
    const address = queued.request.payload.address;
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.assert)(pair, 'Unable to find account');
    const remainingTime = this.refreshAccountPasswordCache(pair);
    return {
      isLocked: pair.isLocked,
      remainingTime
    };
  }

  // FIXME This looks very much like what we have in authorization
  signingSubscribe(id, port) {
    const cb = (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.createSubscription)(id, port);
    const subscription = this.#state.signSubject.subscribe(requests => cb(requests));
    port.onDisconnect.addListener(() => {
      (0,_subscriptions__WEBPACK_IMPORTED_MODULE_3__.unsubscribe)(id);
      subscription.unsubscribe();
    });
    return this.#state.signSubject.value;
  }
  windowOpen({
    allowedPath: path,
    params,
    subPath
  }) {
    let paramString = '';
    if (params) {
      paramString += '?';
      for (let i = 0; i < Object.keys(params).length; i++) {
        const [key, value] = Object.entries(params)[i];
        paramString += `${key}=${value}`;
        if (i !== Object.keys(params).length - 1) {
          paramString += '&';
        }
      }
    }
    const url = `${chrome.extension.getURL('index.html')}#${path}${subPath || ''}${paramString}`;
    if (!_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_9__.ALLOWED_PATH.includes(path)) {
      console.error('Not allowed to open the url:', url);
      return false;
    }
    (0,_helpers__WEBPACK_IMPORTED_MODULE_10__.withErrorLog)(() => chrome.tabs.create({
      url
    }));
    return true;
  }
  derive(parentAddress, suri, password, metadata) {
    const parentPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].getPair(parentAddress);
    try {
      parentPair.decodePkcs8(password);
    } catch (e) {
      throw new Error('Wrong password');
    }
    try {
      return parentPair.derive(suri, metadata);
    } catch (err) {
      throw new Error(`"${suri}" is not a valid derivation path`);
    }
  }
  derivationValidate({
    parentAddress,
    parentPassword,
    suri
  }) {
    const childPair = this.derive(parentAddress, suri, parentPassword, {});
    return {
      address: childPair.address,
      suri
    };
  }
  derivationCreate({
    genesisHash,
    name,
    parentAddress,
    parentPassword,
    suri
  }) {
    const childPair = this.derive(parentAddress, suri, parentPassword, {
      genesisHash,
      name,
      parentAddress,
      suri
    });
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__["default"].addPair(childPair, true);
    return true;
  }
  toggleAuthorization(url) {
    return {
      list: this.#state.toggleAuthorization(url)
    };
  }

  // Weird thought, the eslint override is not needed in Tabs
  // eslint-disable-next-line @typescript-eslint/require-await
  async handle(id, type, request, port) {
    switch (type) {
      case 'pri(authorize.approve)':
        return this.authorizeApprove(request);
      case 'pri(authorize.list)':
        return this.getAuthList();
      case 'pri(authorize.reject)':
        return this.authorizeReject(request);
      case 'pri(authorize.toggle)':
        return this.toggleAuthorization(request);
      case 'pri(authorize.requests)':
        return this.authorizeSubscribe(id, port);
      case 'pri(accounts.create.external)':
        return this.accountsCreateExternal(request);
      case 'pri(accounts.create.hardware)':
        return this.accountsCreateHardware(request);
      case 'pri(accounts.create.suri)':
        return this.accountsCreateSuri(request);
      case 'pri(accounts.changePassword)':
        return this.accountsChangePassword(request);
      case 'pri(accounts.edit)':
        return this.accountsEdit(request);
      case 'pri(accounts.export)':
        return this.accountsExport(request);
      case 'pri(accounts.batchExport)':
        // return this.accountsBatchExport(request as RequestAccountBatchExport);
        // Disable export all util use master password
        return null;
      case 'pri(accounts.forget)':
        return this.accountsForget(request);
      case 'pri(accounts.show)':
        return this.accountsShow(request);
      case 'pri(accounts.subscribe)':
        return this.accountsSubscribe(id, port);
      case 'pri(accounts.tie)':
        return this.accountsTie(request);
      case 'pri(accounts.validate)':
        return this.accountsValidate(request);
      case 'pri(metadata.approve)':
        return this.metadataApprove(request);
      case 'pri(metadata.get)':
        return this.metadataGet(request);
      case 'pri(metadata.list)':
        return this.metadataList();
      case 'pri(metadata.reject)':
        return this.metadataReject(request);
      case 'pri(metadata.requests)':
        return this.metadataSubscribe(id, port);
      case 'pri(derivation.create)':
        return this.derivationCreate(request);
      case 'pri(derivation.validate)':
        return this.derivationValidate(request);
      case 'pri(json.restore)':
        return this.jsonRestore(request);
      case 'pri(json.batchRestore)':
        return this.batchRestore(request);
      case 'pri(json.account.info)':
        return this.jsonGetAccountInfo(request);
      case 'pri(seed.create)':
        return this.seedCreate(request);
      case 'pri(seed.validate)':
        return this.seedValidate(request);
      case 'pri(signing.approve.password)':
        return this.signingApprovePassword(request);
      case 'pri(signing.approve.signature)':
        return this.signingApproveSignature(request);
      case 'pri(signing.cancel)':
        return this.signingCancel(request);
      case 'pri(signing.isLocked)':
        return this.signingIsLocked(request);
      case 'pri(signing.requests)':
        return this.signingSubscribe(id, port);
      case 'pri(window.open)':
        return this.windowOpen(request);
      default:
        throw new Error(`Unable to handle message of type ${type}`);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/background/handlers/helpers.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/background/handlers/helpers.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "withErrorLog": () => (/* binding */ withErrorLog)
/* harmony export */ });
// Copyright 2019-2022 @polkadot/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0

function withErrorLog(fn) {
  try {
    const p = fn();
    if (p && typeof p === 'object' && typeof p.catch === 'function') {
      p.catch(console.error);
    }
  } catch (e) {
    console.error(e);
  }
}

/***/ }),

/***/ "../extension-base/src/background/handlers/subscriptions.ts":
/*!******************************************************************!*\
  !*** ../extension-base/src/background/handlers/subscriptions.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createSubscription": () => (/* binding */ createSubscription),
/* harmony export */   "isSubscriptionRunning": () => (/* binding */ isSubscriptionRunning),
/* harmony export */   "unsubscribe": () => (/* binding */ unsubscribe)
/* harmony export */ });
// Copyright 2019-2022 @polkadot/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0

const subscriptions = {};

// return a subscription callback, that will send the data to the caller via the port
function createSubscription(id, port) {
  subscriptions[id] = port;
  return subscription => {
    if (subscriptions[id]) {
      port.postMessage({
        id,
        subscription
      });
    }
  };
}
function isSubscriptionRunning(id) {
  return !!subscriptions[id];
}

// clear a previous subscriber
function unsubscribe(id) {
  if (subscriptions[id]) {
    delete subscriptions[id];
  } else {
    console.error(`Unable to unsubscribe from ${id}`);
  }
}

/***/ }),

/***/ "../extension-base/src/background/warnings/SWWarning.ts":
/*!**************************************************************!*\
  !*** ../extension-base/src/background/warnings/SWWarning.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SWWarning": () => (/* binding */ SWWarning)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0

class SWWarning {
  constructor(warningType, message, code, data) {
    this.message = message;
    this.warningType = warningType;
    this.code = code;
    this.data = data;
  }
}

/***/ }),

/***/ "../extension-base/src/background/warnings/TransactionWarning.ts":
/*!***********************************************************************!*\
  !*** ../extension-base/src/background/warnings/TransactionWarning.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransactionWarning": () => (/* binding */ TransactionWarning)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_background_warnings_SWWarning__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/background/warnings/SWWarning */ "../extension-base/src/background/warnings/SWWarning.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/translate.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0





const defaultWarningMap = {
  [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.BasicTxWarningCode.NOT_ENOUGH_EXISTENTIAL_DEPOSIT]: {
    message: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.detectTranslate)('Insufficient balance to cover existential deposit. Please decrease the transaction amount or increase your current balance'),
    code: undefined
  }
};
class TransactionWarning extends _subwallet_extension_base_background_warnings_SWWarning__WEBPACK_IMPORTED_MODULE_3__.SWWarning {
  constructor(warningType, message, code, data) {
    var _defaultWarningMap$wa, _defaultWarningMap$wa2;
    const warningMessage = message || (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)(((_defaultWarningMap$wa = defaultWarningMap[warningType]) === null || _defaultWarningMap$wa === void 0 ? void 0 : _defaultWarningMap$wa.message) || '') || warningType;
    super(warningType, warningMessage, (_defaultWarningMap$wa2 = defaultWarningMap[warningType]) === null || _defaultWarningMap$wa2 === void 0 ? void 0 : _defaultWarningMap$wa2.code, data);
    this.warningType = warningType;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/dotsama/balance.ts":
/*!*********************************************************!*\
  !*** ../extension-base/src/koni/api/dotsama/balance.ts ***!
  \*********************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "subscribeBalance": () => (/* binding */ subscribeBalance),
/* harmony export */   "subscribeEVMBalance": () => (/* binding */ subscribeEVMBalance),
/* harmony export */   "subscribeSubstrateBalance": () => (/* binding */ subscribeSubstrateBalance)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_evm_balance__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/evm/balance */ "../extension-base/src/koni/api/tokens/evm/balance.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_evm_web3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/evm/web3 */ "../extension-base/src/koni/api/tokens/evm/web3.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm */ "../extension-base/src/koni/api/tokens/wasm/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm/utils */ "../extension-base/src/koni/api/tokens/wasm/utils.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers */ "../extension-base/src/koni/background/handlers/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ "../../node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/bn/consts.js");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__]);
_subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0














// main subscription
function subscribeBalance(addresses, chainInfoMap, substrateApiMap, evmApiMap, callback) {
  const [substrateAddresses, evmAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.categoryAddresses)(addresses);

  // Looping over each chain
  const unsubList = Object.entries(chainInfoMap).map(async ([chainSlug, chainInfo]) => {
    const useAddresses = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isChainEvmCompatible)(chainInfo) ? evmAddresses : substrateAddresses;
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isPureEvmChain)(chainInfo)) {
      const nativeTokenInfo = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.getNativeTokenInfo(chainSlug);
      return subscribeEVMBalance(chainSlug, useAddresses, evmApiMap, callback, nativeTokenInfo);
    }
    if (!useAddresses || useAddresses.length === 0 || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._PURE_EVM_CHAINS.indexOf(chainSlug) > -1) {
      const fungibleTokensByChain = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.chainService.getFungibleTokensByChain(chainSlug, true);
      const now = new Date().getTime();
      Object.values(fungibleTokensByChain).map(token => {
        return {
          tokenSlug: token.slug,
          free: '0',
          locked: '0',
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY,
          timestamp: now
        };
      }).forEach(callback);
      return undefined;
    }
    const networkAPI = await substrateApiMap[chainSlug].isReady;
    return subscribeSubstrateBalance(useAddresses, chainInfo, chainSlug, networkAPI, evmApiMap, callback);
  });
  return () => {
    unsubList.forEach(subProm => {
      subProm.then(unsub => {
        unsub && unsub();
      }).catch(console.error);
    });
  };
}
async function subscribeSubstrateBalance(addresses, chainInfo, chain, networkAPI, evmApiMap, callBack) {
  let unsubNativeToken;
  if (!_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.kintsugi.includes(chain) && !_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.genshiro.includes(chain) && !_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.equilibrium_parachain.includes(chain)) {
    unsubNativeToken = await subscribeWithSystemAccountPallet(addresses, chainInfo, networkAPI.api, callBack);
  }
  let unsubLocalToken;
  let unsubEvmContractToken;
  let unsubWasmContractToken;
  try {
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.bifrost.includes(chain)) {
      unsubLocalToken = await subscribeTokensAccountsPallet(addresses, chain, networkAPI.api, callBack);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.kintsugi.includes(chain)) {
      unsubLocalToken = await subscribeTokensAccountsPallet(addresses, chain, networkAPI.api, callBack, true);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.statemine.includes(chain)) {
      unsubLocalToken = await subscribeAssetsAccountPallet(addresses, chain, networkAPI.api, callBack);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.genshiro.includes(chain)) {
      unsubLocalToken = await subscribeEqBalanceAccountPallet(addresses, chain, networkAPI.api, callBack, true);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._BALANCE_CHAIN_GROUP.equilibrium_parachain.includes(chain)) {
      unsubLocalToken = await subscribeEquilibriumTokenBalance(addresses, chain, networkAPI.api, callBack, true);
    }
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isChainEvmCompatible)(chainInfo)) {
      unsubEvmContractToken = subscribeERC20Interval(addresses, chain, evmApiMap, callBack);
    }
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._checkSmartContractSupportByChain)(chainInfo, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.PSP22)) {
      // Get sub-token for substrate-based chains
      unsubWasmContractToken = subscribePSP22Balance(addresses, chain, networkAPI.api, callBack);
    }
  } catch (err) {
    console.warn(err);
  }
  return () => {
    unsubNativeToken && unsubNativeToken();
    unsubLocalToken && unsubLocalToken();
    unsubEvmContractToken && unsubEvmContractToken();
    unsubWasmContractToken && unsubWasmContractToken();
  };
}

// handler according to different logic
async function subscribeWithSystemAccountPallet(addresses, chainInfo, networkAPI, callBack) {
  const chainNativeTokenSlug = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getChainNativeTokenSlug)(chainInfo);
  const unsub = await networkAPI.query.system.account.multi(addresses, async balances => {
    let [total, reserved, miscFrozen, feeFrozen] = [new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0), new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0), new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0), new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0)];
    let pooledStakingBalance = _polkadot_util__WEBPACK_IMPORTED_MODULE_8__.BN_ZERO;
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isSubstrateRelayChain)(chainInfo) && networkAPI.query.nominationPools) {
      const poolMemberDatas = await networkAPI.query.nominationPools.poolMembers.multi(addresses);
      if (poolMemberDatas) {
        for (const _poolMemberData of poolMemberDatas) {
          const poolMemberData = _poolMemberData.toPrimitive();
          if (poolMemberData) {
            const pooledBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(poolMemberData.points.toString());
            pooledStakingBalance = pooledStakingBalance.add(pooledBalance);
            Object.entries(poolMemberData.unbondingEras).forEach(([, amount]) => {
              pooledStakingBalance = pooledStakingBalance.add(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(amount));
            });
          }
        }
      }
    }
    balances.forEach(balance => {
      var _balance$data, _balance$data$free, _balance$data2, _balance$data2$reserv, _balance$data3, _balance$data3$miscFr, _balance$data4, _balance$data4$frozen, _balance$data5, _balance$data5$feeFro;
      total = total.add(((_balance$data = balance.data) === null || _balance$data === void 0 ? void 0 : (_balance$data$free = _balance$data.free) === null || _balance$data$free === void 0 ? void 0 : _balance$data$free.toBn()) || new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0)); // reserved is seperated
      reserved = reserved.add(((_balance$data2 = balance.data) === null || _balance$data2 === void 0 ? void 0 : (_balance$data2$reserv = _balance$data2.reserved) === null || _balance$data2$reserv === void 0 ? void 0 : _balance$data2$reserv.toBn()) || new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0));
      // @ts-ignore
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
      miscFrozen = miscFrozen.add(((_balance$data3 = balance.data) === null || _balance$data3 === void 0 ? void 0 : (_balance$data3$miscFr = _balance$data3.miscFrozen) === null || _balance$data3$miscFr === void 0 ? void 0 : _balance$data3$miscFr.toBn()) || (balance === null || balance === void 0 ? void 0 : (_balance$data4 = balance.data) === null || _balance$data4 === void 0 ? void 0 : (_balance$data4$frozen = _balance$data4.frozen) === null || _balance$data4$frozen === void 0 ? void 0 : _balance$data4$frozen.toBn()) || new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0)); // TODO: update frozen
      feeFrozen = feeFrozen.add(((_balance$data5 = balance.data) === null || _balance$data5 === void 0 ? void 0 : (_balance$data5$feeFro = _balance$data5.feeFrozen) === null || _balance$data5$feeFro === void 0 ? void 0 : _balance$data5$feeFro.toBn()) || new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0));
    });
    let locked = reserved.add(miscFrozen);
    total = total.add(reserved); // total = free + reserved

    if (pooledStakingBalance.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.BN_ZERO)) {
      total = total.add(pooledStakingBalance);
      locked = locked.add(pooledStakingBalance);
    }
    const free = total.sub(locked);
    callBack({
      tokenSlug: chainNativeTokenSlug,
      free: free.gte(_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.BN_ZERO) ? free.toString() : '0',
      locked: locked.toString(),
      state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY,
      substrateInfo: {
        miscFrozen: miscFrozen.toString(),
        reserved: reserved.toString(),
        feeFrozen: feeFrozen.toString()
      }
    });
  });
  return () => {
    unsub();
  };
}
function subscribeERC20Interval(addresses, chain, evmApiMap, callBack) {
  let tokenList = {};
  const erc20ContractMap = {};
  const getTokenBalances = () => {
    Object.values(tokenList).map(async tokenInfo => {
      let free = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0);
      try {
        const contract = erc20ContractMap[tokenInfo.slug];
        const balanceList = await Promise.all(addresses.map(address => {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
          return contract.methods.balanceOf(address).call();
        }));
        free = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.sumBN)(balanceList.map(balance => new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(balance || 0)));
        callBack({
          tokenSlug: tokenInfo.slug,
          free: free.toString(),
          locked: '0',
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY
        });
      } catch (err) {
        console.log(tokenInfo.slug, err);
      }
    });
  };
  tokenList = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.getAssetByChainAndAsset(chain, [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.ERC20]);
  Object.entries(tokenList).forEach(([slug, tokenInfo]) => {
    erc20ContractMap[slug] = (0,_subwallet_extension_base_koni_api_tokens_evm_web3__WEBPACK_IMPORTED_MODULE_9__.getERC20Contract)(chain, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getContractAddressOfToken)(tokenInfo), evmApiMap);
  });
  getTokenBalances();
  const interval = setInterval(getTokenBalances, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_10__.SUB_TOKEN_REFRESH_BALANCE_INTERVAL);
  return () => {
    clearInterval(interval);
  };
}
function subscribePSP22Balance(addresses, chain, api, callBack) {
  let tokenList = {};
  const psp22ContractMap = {};
  const getTokenBalances = () => {
    Object.values(tokenList).map(async tokenInfo => {
      let free = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0);
      try {
        const contract = psp22ContractMap[tokenInfo.slug];
        const balances = await Promise.all(addresses.map(async address => {
          var _balanceOf$output;
          const _balanceOf = await contract.query['psp22::balanceOf'](address, {
            gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_11__.getDefaultWeightV2)(api)
          }, address);
          const balanceObj = _balanceOf === null || _balanceOf === void 0 ? void 0 : (_balanceOf$output = _balanceOf.output) === null || _balanceOf$output === void 0 ? void 0 : _balanceOf$output.toPrimitive();
          return _balanceOf.output ? balanceObj.ok || balanceObj.Ok : '0';
        }));
        free = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.sumBN)(balances.map(bal => new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(bal || 0)));
        callBack({
          tokenSlug: tokenInfo.slug,
          free: free.toString(),
          locked: '0',
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY
        });
      } catch (err) {
        console.warn(tokenInfo.slug, err); // TODO: error createType
      }
    });
  };

  tokenList = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.getAssetByChainAndAsset(chain, [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.PSP22]);
  Object.entries(tokenList).forEach(([slug, tokenInfo]) => {
    psp22ContractMap[slug] = (0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_12__.getPSP22ContractPromise)(api, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getContractAddressOfToken)(tokenInfo));
  });
  getTokenBalances();
  const interval = setInterval(getTokenBalances, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_10__.SUB_TOKEN_REFRESH_BALANCE_INTERVAL);
  return () => {
    clearInterval(interval);
  };
}
async function subscribeEquilibriumTokenBalance(addresses, chain, api, callBack, includeNativeToken) {
  const tokenTypes = includeNativeToken ? [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.NATIVE, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.LOCAL] : [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.LOCAL];
  const tokenMap = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.getAssetByChainAndAsset(chain, tokenTypes);
  const unsub = await api.query.system.account.multi(addresses, balances => {
    // Equilibrium customizes the SystemAccount pallet
    Object.values(tokenMap).forEach(tokenInfo => {
      const assetId = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getTokenOnChainAssetId)(tokenInfo);
      let tokenFreeBalance = _polkadot_util__WEBPACK_IMPORTED_MODULE_8__.BN_ZERO;
      for (const balance of balances) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        const balancesData = JSON.parse(balance.data.toString());
        const balanceList = balancesData.v0.balance;

        // @ts-ignore
        const freeTokenBalance = balanceList.find(data => data[0] === parseInt(assetId));
        const bnFreeTokenBalance = freeTokenBalance ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](freeTokenBalance[1].positive).toString()) : _polkadot_util__WEBPACK_IMPORTED_MODULE_8__.BN_ZERO;
        tokenFreeBalance = tokenFreeBalance.add(bnFreeTokenBalance);
      }
      const tokenBalance = {
        free: tokenFreeBalance.toString(),
        locked: '0',
        // Equilibrium doesn't show locked balance
        state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY,
        tokenSlug: tokenInfo.slug
      };
      callBack(tokenBalance);
    });
  });
  return () => {
    unsub();
  };
}

// eslint-disable-next-line @typescript-eslint/require-await
async function subscribeEqBalanceAccountPallet(addresses, chain, api, callBack, includeNativeToken) {
  const tokenTypes = includeNativeToken ? [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.NATIVE, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.LOCAL] : [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.LOCAL];
  const tokenMap = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.getAssetByChainAndAsset(chain, tokenTypes);
  const unsubList = Object.values(tokenMap).map(async tokenInfo => {
    try {
      const assetId = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getTokenOnChainAssetId)(tokenInfo);
      const unsub = await api.query.eqBalances.account.multi(addresses.map(address => [address, [assetId]]), balances => {
        const tokenBalance = {
          free: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.sumBN)(balances.map(b => b.asPositive)).toString(),
          locked: '0',
          // Equilibrium doesn't show locked balance
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY,
          tokenSlug: tokenInfo.slug
        };
        callBack(tokenBalance);
      });
      return unsub;
    } catch (err) {
      console.warn(err);
      return undefined;
    }
  });
  return () => {
    unsubList.forEach(subProm => {
      subProm.then(unsub => {
        unsub && unsub();
      }).catch(console.error);
    });
  };
}
async function subscribeTokensAccountsPallet(addresses, chain, api, callBack, includeNativeToken) {
  const tokenTypes = includeNativeToken ? [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.NATIVE, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.LOCAL] : [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.LOCAL];
  const tokenMap = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.getAssetByChainAndAsset(chain, tokenTypes);
  const unsubList = await Promise.all(Object.values(tokenMap).map(async tokenInfo => {
    try {
      const onChainInfo = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getTokenOnChainInfo)(tokenInfo);
      const assetId = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getTokenOnChainAssetId)(tokenInfo);

      // Get Token Balance
      // @ts-ignore
      return await api.query.tokens.accounts.multi(addresses.map(address => [address, onChainInfo || assetId]), balances => {
        const tokenBalance = {
          reserved: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.sumBN)(balances.map(b => b.reserved || new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0))),
          frozen: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.sumBN)(balances.map(b => b.frozen || new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0))),
          free: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.sumBN)(balances.map(b => b.free || new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0))) // free is actually total balance
        };

        // free balance = total balance - frozen misc
        // locked balance = reserved + frozen misc
        const freeBalance = tokenBalance.free.sub(tokenBalance.frozen);
        const lockedBalance = tokenBalance.frozen.add(tokenBalance.reserved);
        callBack({
          tokenSlug: tokenInfo.slug,
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY,
          free: freeBalance.toString(),
          locked: lockedBalance.toString(),
          substrateInfo: {
            reserved: tokenBalance.reserved.toString(),
            miscFrozen: tokenBalance.frozen.toString()
          }
        });
      });
    } catch (err) {
      console.warn(err);
    }
    return undefined;
  }));
  return () => {
    unsubList.forEach(unsub => {
      unsub && unsub();
    });
  };
}
async function subscribeAssetsAccountPallet(addresses, chain, api, callBack) {
  const tokenMap = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_3__.state.getAssetByChainAndAsset(chain, [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_6__._AssetType.LOCAL]);
  Object.values(tokenMap).forEach(token => {
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._MANTA_ZK_CHAIN_GROUP.includes(token.originChain) && token.symbol.startsWith(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_4__._ZK_ASSET_PREFIX)) {
      delete tokenMap[token.slug];
    }
  });
  const unsubList = await Promise.all(Object.values(tokenMap).map(async tokenInfo => {
    try {
      const assetIndex = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._getTokenOnChainAssetId)(tokenInfo);

      // Get Token Balance
      return await api.query.assets.account.multi(addresses.map(address => [assetIndex, address]), balances => {
        let total = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0);
        let frozen = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(0);
        balances.forEach(b => {
          // @ts-ignore
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment
          const bdata = b === null || b === void 0 ? void 0 : b.toHuman();
          if (bdata) {
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument
            const addressBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(String(bdata === null || bdata === void 0 ? void 0 : bdata.balance).replaceAll(',', '') || '0');

            // @ts-ignore
            if (bdata !== null && bdata !== void 0 && bdata.isFrozen) {
              frozen = frozen.add(addressBalance);
            } else {
              total = total.add(addressBalance);
            }
          }
        });
        const free = total.sub(frozen);
        callBack({
          tokenSlug: tokenInfo.slug,
          free: free.toString(),
          locked: frozen.toString(),
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY,
          substrateInfo: {
            miscFrozen: frozen.toString(),
            reserved: '0'
          }
        });
      });
    } catch (err) {
      console.warn(err);
    }
    return undefined;
  }));
  return () => {
    unsubList.forEach(unsub => {
      unsub && unsub();
    });
  };
}
function subscribeEVMBalance(chain, addresses, evmApiMap, callback, tokenInfo) {
  const balanceItem = {
    tokenSlug: tokenInfo.slug,
    state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.PENDING,
    free: '0',
    locked: '0'
  };
  function getBalance() {
    (0,_subwallet_extension_base_koni_api_tokens_evm_balance__WEBPACK_IMPORTED_MODULE_13__.getEVMBalance)(chain, addresses, evmApiMap).then(balances => {
      balanceItem.free = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.sumBN)(balances.map(b => new (_polkadot_util__WEBPACK_IMPORTED_MODULE_7___default())(b || '0'))).toString();
      balanceItem.state = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.APIItemState.READY;
      callback(balanceItem);
    }).catch(console.warn);
  }
  getBalance();
  const interval = setInterval(getBalance, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_10__.ASTAR_REFRESH_BALANCE_INTERVAL);
  const unsub2 = subscribeERC20Interval(addresses, chain, evmApiMap, callback);
  return () => {
    clearInterval(interval);
    unsub2 && unsub2();
  };
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "../extension-base/src/koni/api/dotsama/crowdloan.ts":
/*!***********************************************************!*\
  !*** ../extension-base/src/koni/api/dotsama/crowdloan.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getCrowdloanFundsStatus": () => (/* binding */ getCrowdloanFundsStatus),
/* harmony export */   "subscribeAcalaContributeInterval": () => (/* binding */ subscribeAcalaContributeInterval),
/* harmony export */   "subscribeCrowdloan": () => (/* binding */ subscribeCrowdloan)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/chain-list */ "../../node_modules/@subwallet/chain-list/index.js");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_typeRegistry__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/typeRegistry */ "../extension-base/src/koni/api/dotsama/typeRegistry.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ "../../node_modules/axios/lib/axios.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0









function getRPCCrowdloan(parentAPI, paraId, hexAddresses, paraState, callback) {
  const unsubPromise = parentAPI.api.derive.crowdloan.ownContributions(paraId, hexAddresses, result => {
    let contribute = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_0___default())(0);
    Object.values(result).forEach(item => {
      contribute = contribute.add(item.toBn());
    });
    const rs = {
      state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.APIItemState.READY,
      paraState,
      contribute: contribute.toString()
    };
    callback(rs);
  });
  return () => {
    unsubPromise.then(unsub => {
      unsub();
    }).catch(console.error);
  };
}
const subscribeAcalaContributeInterval = (polkadotAddresses, paraState, callback) => {
  const acalaContributionApi = 'https://api.polkawallet.io/acala-distribution-v2/crowdloan?account=';
  const getContributeInfo = () => {
    Promise.all(polkadotAddresses.map(polkadotAddress => {
      return axios__WEBPACK_IMPORTED_MODULE_2__["default"].get(`${acalaContributionApi}${polkadotAddress}`);
    })).then(resList => {
      let contribute = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_0___default())(0);
      resList.forEach(res => {
        var _res$data$data, _res$data$data$acala, _res$data$data$acala$;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-argument
        contribute = contribute.add(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_0___default())(((_res$data$data = res.data.data) === null || _res$data$data === void 0 ? void 0 : (_res$data$data$acala = _res$data$data.acala) === null || _res$data$data$acala === void 0 ? void 0 : (_res$data$data$acala$ = _res$data$data$acala[0]) === null || _res$data$data$acala$ === void 0 ? void 0 : _res$data$data$acala$.totalDOTLocked) || '0'));
      });
      const rs = {
        state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.APIItemState.READY,
        paraState,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
        contribute: contribute.toString()
      };
      callback(rs);
    }).catch(console.error);
  };
  getContributeInfo();
  const interval = setInterval(getContributeInfo, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_3__.ACALA_REFRESH_CROWDLOAN_INTERVAL);
  return () => {
    clearInterval(interval);
  };
};
async function getCrowdloanFundsStatus(api) {
  const leases = await api.query.slots.leases.keys();
  const leasesParaIds = leases.map(({
    args: [paraId]
  }) => paraId.toString());
  const rs = await api.query.crowdloan.funds.entries();
  const newRaise = await api.query.crowdloan.newRaise();
  const newRaiseParaIds = newRaise.toJSON().map(p => p.toString());
  return rs.reduce((stateMap, [{
    args: [paraId]
  }, fundData]) => {
    const paraStr = paraId.toString();

    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    // const item = fundData.unwrap() as PolkadotRuntimeCommonCrowdloanFundInfo;

    if (leasesParaIds.indexOf(paraStr) > -1) {
      stateMap[paraStr] = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.CrowdloanParaState.COMPLETED;
    }
    if (newRaiseParaIds.indexOf(paraStr) > -1) {
      stateMap[paraStr] = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.CrowdloanParaState.ONGOING;
    }
    return stateMap;
  }, {});
}

// Get All crowdloan
async function subscribeCrowdloan(addresses, substrateApiMap, callback, chainInfoMap) {
  const unsubMap = {};
  if (Object.keys(substrateApiMap).includes(_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__.COMMON_CHAIN_SLUGS.KUSAMA) && Object.keys(substrateApiMap).includes(_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__.COMMON_CHAIN_SLUGS.POLKADOT)) {
    const polkadotAPI = await substrateApiMap[_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__.COMMON_CHAIN_SLUGS.POLKADOT].isReady;
    const polkadotFundsStatusMap = await getCrowdloanFundsStatus(polkadotAPI.api);
    const kusamaAPI = await substrateApiMap[_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__.COMMON_CHAIN_SLUGS.KUSAMA].isReady;
    const kusamaFundsStatusMap = await getCrowdloanFundsStatus(kusamaAPI.api);

    // TODO: find all crowdloan valid networks: parachains, in-crowdloan, crowdloan but failed

    const substrateAddresses = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_5__.categoryAddresses)(addresses)[0];
    const hexAddresses = substrateAddresses.map(address => {
      return _subwallet_extension_base_koni_api_dotsama_typeRegistry__WEBPACK_IMPORTED_MODULE_6__["default"].createType('AccountId', address).toHex();
    });
    Object.entries(chainInfoMap).forEach(([networkKey, chainInfo]) => {
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._isSubstrateParaChain)(chainInfo)) {
        const parentChain = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getSubstrateRelayParent)(chainInfo);
        const crowdloanCb = rs => {
          callback(networkKey, rs);
        };
        const paraId = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getSubstrateParaId)(chainInfo);
        if (paraId <= -1 || addresses.length === 0 || parentChain.length === 0) {
          return;
        }
        if (networkKey === _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__.COMMON_CHAIN_SLUGS.ACALA) {
          const acalaAddresses = substrateAddresses.map(address => (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_5__.reformatAddress)(address, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainSubstrateAddressPrefix)(chainInfo), (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._isChainEvmCompatible)(chainInfo)));
          unsubMap.acala = subscribeAcalaContributeInterval(acalaAddresses, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_1__.CrowdloanParaState.COMPLETED, crowdloanCb);
        } else if (parentChain === _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__.COMMON_CHAIN_SLUGS.POLKADOT && polkadotFundsStatusMap[paraId]) {
          unsubMap[networkKey] = getRPCCrowdloan(polkadotAPI, paraId, hexAddresses, polkadotFundsStatusMap[paraId], crowdloanCb);
        } else if (parentChain === _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_4__.COMMON_CHAIN_SLUGS.KUSAMA && kusamaFundsStatusMap[paraId]) {
          unsubMap[networkKey] = getRPCCrowdloan(kusamaAPI, paraId, hexAddresses, kusamaFundsStatusMap[paraId], crowdloanCb);
        }
      }
    });
  }
  return () => {
    Object.values(unsubMap).forEach(unsub => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      unsub && unsub();
    });
  };
}

/***/ }),

/***/ "../extension-base/src/koni/api/dotsama/parseTransaction.ts":
/*!******************************************************************!*\
  !*** ../extension-base/src/koni/api/dotsama/parseTransaction.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseSubstrateTransaction": () => (/* binding */ parseSubstrateTransaction)
/* harmony export */ });
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/toU8a.js");
// Copyright 2019-2022 @polkadot/extension-koni-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



const formatArgs = callInstance => {
  const paramArgKvArray = [];
  const {
    args,
    meta
  } = callInstance;
  for (let i = 0; i < meta.args.length; i++) {
    let argument;
    if (args[i].toRawType().startsWith('AccountId')) {
      argument = args[i].toString();
    } else if (args[i].toRawType().startsWith('Vec<Call>')) {
      argument = JSON.stringify(args[i].toHuman(false));
    } else if (args[i].toRawType().startsWith('Vec')) {
      // toString is nicer than toHuman here because
      // toHuman tends to concatenate long strings and would hide data
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
      argument = args[i].map(v => v.toString());
    } else {
      // toHuman takes care of the balance formating
      // with the right chain unit
      argument = JSON.stringify(args[i].toHuman());
    }
    const argName = meta.args[i].name.toHuman();
    paramArgKvArray.push({
      argName,
      argValue: argument
    });
  }
  return paramArgKvArray;
};
const parseSubstrateTransaction = (data, apiPromise) => {
  const registry = apiPromise.registry;
  const payload = registry.createType('ExtrinsicPayload', (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__.hexToU8a)(data));
  const nonce = payload.nonce.toNumber();
  const tip = payload.tip.toNumber();
  const specVer = payload.specVersion.toNumber();
  const _era = payload.era;
  let era = _era.toString();
  if (_era.isMortalEra) {
    era = {
      period: _era.asMortalEra.period.toNumber(),
      phase: _era.asMortalEra.phase.toNumber()
    };
  }
  const _method = payload.method.toString();
  const call = registry.createType('Call', _method);
  const sectionMethod = `${call.section}.${call.method}`;
  const result = [];
  const firstArg = call.args[0];
  const baseInfo = {
    era: era,
    tip: tip,
    nonce: nonce,
    specVersion: specVer
  };

  // that's a batch
  if (firstArg !== null && firstArg !== void 0 && firstArg.toRawType().startsWith('Vec<Call>')) {
    result.push({
      args: undefined,
      methodName: sectionMethod
    });
    firstArg.forEach(c => {
      registry.createType('Call', c);
      result.push({
        args: formatArgs(c),
        methodName: `${c.section}.${c.method}`
      });
    });
  } else {
    try {
      result.push({
        args: formatArgs(call),
        methodName: sectionMethod
      });
    } catch (e) {
      return {
        ...baseInfo,
        message: (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Unable to decode the information'),
        method: _method
      };
    }
  }
  return {
    ...baseInfo,
    method: result,
    message: ''
  };
};

/***/ }),

/***/ "../extension-base/src/koni/api/dotsama/transfer.ts":
/*!**********************************************************!*\
  !*** ../extension-base/src/koni/api/dotsama/transfer.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "checkReferenceCount": () => (/* binding */ checkReferenceCount),
/* harmony export */   "checkSupportTransfer": () => (/* binding */ checkSupportTransfer),
/* harmony export */   "createTransferExtrinsic": () => (/* binding */ createTransferExtrinsic)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm */ "../extension-base/src/koni/api/tokens/wasm/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm/utils */ "../extension-base/src/koni/api/tokens/wasm/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_4__);
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0






function isRefCount(accountInfo) {
  return !!accountInfo.refcount;
}
async function checkReferenceCount(networkKey, address, substrateApiMap, chainInfo) {
  console.log('Starting checkReferenceCount');
  console.log('Parameters:', {
    networkKey,
    address
  });
  const apiProps = await substrateApiMap[networkKey].isReady;
  const api = apiProps.api;
  console.log('API fetched:', api);
  console.log(Object.keys(api.tx));
  console.log(api.tx.balances ? 'Balances module available' : 'Balances module not available');
  if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isChainEvmCompatible)(chainInfo)) {
    return false;
  }

  // @ts-ignore
  const accountInfo = await api.query.system.account(address);
  return accountInfo ? isRefCount(accountInfo) ? !accountInfo.refcount.isZero() : !accountInfo.consumers.isZero() : false;
}
async function checkSupportTransfer(networkKey, tokenInfo, substrateApiMap, chainInfo) {
  const substrateApi = await substrateApiMap[networkKey].isReady;
  if (!tokenInfo) {
    return {
      supportTransfer: false,
      supportTransferAll: false
    };
  }
  if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isChainEvmCompatible)(chainInfo)) {
    return {
      supportTransfer: true,
      supportTransferAll: true
    };
  }
  if (tokenInfo.symbol.startsWith(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._ZK_ASSET_PREFIX) && _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._MANTA_ZK_CHAIN_GROUP.includes(tokenInfo.originChain)) {
    return {
      supportTransfer: false,
      supportTransferAll: false
    };
  }
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_NOT_SUPPORTED_CHAINS.includes(networkKey)) {
    return {
      supportTransfer: false,
      supportTransferAll: false
    };
  }
  const api = substrateApi.api;
  const isTxCurrenciesSupported = !!api && !!api.tx && !!api.tx.currencies;
  const isTxBalancesSupported = !!api && !!api.tx && !!api.tx.balances;
  const isTxTokensSupported = !!api && !!api.tx && !!api.tx.tokens;
  const isTxEqBalancesSupported = !!api && !!api.tx && !!api.tx.eqBalances;
  const result = {
    supportTransfer: false,
    supportTransferAll: false
  };
  if (!(isTxCurrenciesSupported || isTxBalancesSupported || isTxTokensSupported || isTxEqBalancesSupported)) {
    return result;
  }
  if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isTokenWasmSmartContract)(tokenInfo) && api.query.contracts) {
    // for PSP tokens
    return {
      supportTransfer: true,
      supportTransferAll: true
    };
  }

  // TODO: need review
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.acala.includes(networkKey) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo) && isTxCurrenciesSupported) {
    result.supportTransfer = true;
    result.supportTransferAll = true;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.kintsugi.includes(networkKey) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo) && isTxTokensSupported) {
    result.supportTransfer = true;
    result.supportTransferAll = true;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.genshiro.includes(networkKey)
  // && !_isNativeToken(tokenInfo) && isTxEqBalancesSupported
  ) {
    result.supportTransfer = false;
    result.supportTransferAll = false;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.crab.includes(networkKey) && _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._BALANCE_TOKEN_GROUP.crab.includes(tokenInfo.symbol)) {
    result.supportTransfer = true;
    result.supportTransferAll = true;
  } else if (isTxBalancesSupported && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
    result.supportTransfer = true;
    result.supportTransferAll = true;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.bitcountry.includes(networkKey) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo) && _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._BALANCE_TOKEN_GROUP.bitcountry.includes(tokenInfo.symbol)) {
    result.supportTransfer = true;
    result.supportTransferAll = true;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.statemine.includes(networkKey) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
    result.supportTransfer = true;
    result.supportTransferAll = true;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.sora_substrate.includes(networkKey)) {
    result.supportTransfer = true;
    result.supportTransferAll = true;
    // } else if (_TRANSFER_CHAIN_GROUP.riochain.includes(networkKey) && _isNativeToken(tokenInfo)) {
    //   result.supportTransfer = true;
    //   result.supportTransferAll = true;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.avail.includes(networkKey)) {
    result.supportTransfer = false;
    result.supportTransferAll = false;
  }
  return result;
}
const createTransferExtrinsic = async ({
  from,
  networkKey,
  substrateApi,
  to,
  tokenInfo,
  transferAll,
  value
}) => {
  const api = substrateApi.api;

  // @ts-ignore
  let transfer = null;
  const isTxCurrenciesSupported = !!api && !!api.tx && !!api.tx.currencies;
  const isTxBalancesSupported = !!api && !!api.tx && !!api.tx.balances;
  const isTxTokensSupported = !!api && !!api.tx && !!api.tx.tokens;
  // const isTxEqBalancesSupported = !!api && !!api.tx && !!api.tx.eqBalances;
  const isTxAssetsSupported = !!api && !!api.tx && !!api.tx.assets;
  let transferAmount; // for PSP-22 tokens, might be deprecated in the future

  if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isTokenWasmSmartContract)(tokenInfo) && api.query.contracts) {
    const contractPromise = (0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_2__.getPSP22ContractPromise)(api, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getContractAddressOfToken)(tokenInfo));
    // @ts-ignore
    const gasLimit = await (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__.getWasmContractGasLimit)(api, from, 'psp22::transfer', contractPromise, {}, [from, value, {}]);

    // @ts-ignore
    transfer = contractPromise.tx['psp22::transfer']({
      gasLimit
    }, to, value, {});
    transferAmount = value;
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.acala.includes(networkKey)) {
    if (!(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
      if (isTxCurrenciesSupported) {
        transfer = api.tx.currencies.transfer(to, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainInfo)(tokenInfo), value);
      }
    } else {
      if (transferAll) {
        transfer = api.tx.balances.transferAll(to, false);
      } else if (value) {
        transfer = api.tx.balances.transferKeepAlive(to, new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(value));
      }
    }
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.kintsugi.includes(networkKey) && isTxTokensSupported) {
    if (transferAll) {
      transfer = api.tx.tokens.transferAll(to, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainInfo)(tokenInfo) || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainAssetId)(tokenInfo), false);
    } else if (value) {
      transfer = api.tx.tokens.transfer(to, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainInfo)(tokenInfo) || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainAssetId)(tokenInfo), new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(value));
    }
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.pendulum.includes(networkKey) && isTxTokensSupported && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
    if (transferAll) {
      transfer = api.tx.tokens.transferAll(to, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainInfo)(tokenInfo), false);
    } else if (value) {
      transfer = api.tx.tokens.transfer(to, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainInfo)(tokenInfo), new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(value));
    }
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.genshiro.includes(networkKey)
  // && isTxEqBalancesSupported
  ) {
    // transfer = api.tx.eqBalances.transfer(_getTokenOnChainAssetId(tokenInfo), to, value);
    /* empty */
  } else if (!(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo) && (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.crab.includes(networkKey) || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._BALANCE_TOKEN_GROUP.crab.includes(tokenInfo.symbol))) {
    if (transferAll) {
      transfer = api.tx.kton.transferAll(to, false);
    } else if (value) {
      transfer = api.tx.kton.transfer(to, new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(value));
    }
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.bitcountry.includes(networkKey) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
    transfer = api.tx.currencies.transfer(to, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainInfo)(tokenInfo), value);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.statemine.includes(networkKey) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
    transfer = api.tx.assets.transfer((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainAssetId)(tokenInfo), to, value);
    // } else if (_TRANSFER_CHAIN_GROUP.riochain.includes(networkKey)) {
    //   if (_isNativeToken(tokenInfo)) {
    //     transfer = api.tx.currencies.transferNativeCurrency(to, value);
    //   }
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._TRANSFER_CHAIN_GROUP.sora_substrate.includes(networkKey) && isTxAssetsSupported) {
    transfer = api.tx.assets.transfer((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainAssetId)(tokenInfo), to, value);
  } else if (isTxBalancesSupported && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
    if (transferAll) {
      // alert('Available modules: ' + Object.keys(api.tx).join(', '));
      // alert('Balances methods: ' + (api.tx.balances ? Object.keys(api.tx.balances).join(', ') : 'Balances not available'));
      transfer = api.tx.balances.transferAll(to, false);
    } else if (value) {
      // transfer = api.tx.balances.transfer(to, new BN(value));
      transfer = api.tx.balances.transferKeepAlive(to, new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(value));
    }
  }
  return [transfer, transferAmount || value];
};

/***/ }),

/***/ "../extension-base/src/koni/api/dotsama/typeRegistry.ts":
/*!**************************************************************!*\
  !*** ../extension-base/src/koni/api/dotsama/typeRegistry.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _polkadot_types_create__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/types/create */ "../../node_modules/@polkadot/types/create/registry.js");
// Copyright 2017-2022 @polkadot/react-api authors & contributors
// SPDX-License-Identifier: Apache-2.0


const registry = new _polkadot_types_create__WEBPACK_IMPORTED_MODULE_0__.TypeRegistry();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (registry);

/***/ }),

/***/ "../extension-base/src/koni/api/nft/acala_nft/index.ts":
/*!*************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/acala_nft/index.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AcalaNftApi": () => (/* binding */ AcalaNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/config */ "../extension-base/src/koni/api/nft/config.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0





const acalaExternalBaseUrl = 'https://apps.acala.network/portfolio/nft/';
class AcalaNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  // eslint-disable-next-line no-useless-constructor
  constructor(api, addresses, chain) {
    super(chain, api, addresses);
  }
  parseUrl(input) {
    if (!input || input.length === 0) {
      return undefined;
    }
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.isUrl)(input)) {
      return input;
    }
    if (!input.includes('ipfs://')) {
      return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + input;
    }
    return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + input.split('ipfs://')[1];
  }

  /**
   * Retrieve id of NFTs
   *
   * @returns the array of NFT Ids
   * @param addresses
   */
  async getNfts(addresses) {
    if (!this.substrateApi) {
      return [];
    }
    const assetIds = [];
    await Promise.all(addresses.map(async address => {
      // @ts-ignore
      const resp = await this.substrateApi.api.query.ormlNFT.tokensByOwner.keys(address);
      if (resp) {
        for (const key of resp) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
          const data = key.toHuman();
          assetIds.push({
            classId: data[1],
            tokenId: this.parseTokenId(data[2])
          });
        }
      }
    }));
    return assetIds;
  }
  async getCollectionDetails(collectionId) {
    if (!this.substrateApi) {
      return null;
    }
    const metadataCollection = (await this.substrateApi.api.query.ormlNFT.classes(collectionId)).toHuman();
    if (!(metadataCollection !== null && metadataCollection !== void 0 && metadataCollection.metadata)) {
      return null;
    }
    const data = await getMetadata(metadataCollection === null || metadataCollection === void 0 ? void 0 : metadataCollection.metadata);
    return {
      ...data,
      image: this.parseUrl(data.image)
    };
  }
  async getTokenDetails(assetId) {
    if (!this.substrateApi) {
      return null;
    }
    return (await this.substrateApi.api.query.ormlNFT.tokens(assetId.classId, assetId.tokenId)).toHuman();
  }
  async handleNft(address, params) {
    const assetIds = await this.getNfts([address]);
    try {
      if (!assetIds || assetIds.length === 0) {
        return;
      }
      const collectionIds = [];
      const nftIds = [];
      await Promise.all(assetIds.map(async assetId => {
        const parsedClassId = this.parseTokenId(assetId.classId);
        const parsedTokenId = this.parseTokenId(assetId.tokenId);
        if (!collectionIds.includes(parsedClassId)) {
          collectionIds.push(parsedClassId);
        }
        nftIds.push(parsedTokenId);
        const [tokenInfo, collectionMeta] = await Promise.all([this.getTokenDetails(assetId), this.getCollectionDetails(parseInt(parsedClassId))]);
        const parsedNft = {
          id: parsedTokenId,
          name: tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.name,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          description: tokenInfo && tokenInfo.description ? tokenInfo.description : collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.description,
          externalUrl: acalaExternalBaseUrl + parsedClassId,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
          image: tokenInfo && tokenInfo.image ? this.parseUrl(tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.image) : collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.image,
          collectionId: parsedClassId,
          chain: this.chain,
          owner: address
        };
        const parsedCollection = {
          collectionId: parsedClassId,
          chain: this.chain,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          collectionName: collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.name,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          image: collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.image
        };
        params.updateItem(this.chain, parsedNft, address);
        params.updateCollection(this.chain, parsedCollection);
      }));
    } catch (e) {
      console.error(`${this.chain}`, e);
    }
  }
  async handleNfts(params) {
    await Promise.all(this.addresses.map(address => this.handleNft(address, params)));
  }
  async fetchNfts(params) {
    try {
      await this.connect();
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}
const headers = {
  'Content-Type': 'application/json'
};
const getMetadata = metadataUrl => {
  let url = metadataUrl;
  if (!metadataUrl) {
    return null;
  }
  url = (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + metadataUrl + '/azero_domain_registry_abi.json';
  return cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
    method: 'GET',
    headers
  }).then(res => res.json());
};

/***/ }),

/***/ "../extension-base/src/koni/api/nft/bit.country/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/bit.country/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BitCountryNftApi": () => (/* binding */ BitCountryNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/config */ "../extension-base/src/koni/api/nft/config.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/bn/consts.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/toBn.js");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0






class BitCountryNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  constructor(api, addresses, chain) {
    super(chain, api, addresses);
  }
  parseUrl(input) {
    if (!input || input.length === 0) {
      return undefined;
    }
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.isUrl)(input)) {
      return input;
    }
    if (!input.includes('ipfs://')) {
      return _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.BIT_COUNTRY_IPFS_SERVER + input;
    }
    return _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.BIT_COUNTRY_IPFS_SERVER + input.split('ipfs://')[1];
  }
  async getNfts(addresses) {
    if (!this.substrateApi) {
      return [];
    }
    const assetIds = [];
    await Promise.all(addresses.map(async address => {
      // @ts-ignore
      const resp = await this.substrateApi.api.query.ormlNFT.tokensByOwner.entries(address);
      for (const item of resp) {
        const data = item[0].toHuman();
        assetIds.push({
          classId: this.parseTokenId(data[1]),
          tokenId: this.parseTokenId(data[2]),
          owner: address
        });
      }
    }));
    return assetIds;
  }
  async getTokenDetails(assetId) {
    if (!this.substrateApi) {
      return null;
    }
    const onChainMeta = (await this.substrateApi.api.query.ormlNFT.tokens(assetId.classId, assetId.tokenId)).toHuman();
    if (!onChainMeta.metadata) {
      return null;
    }

    // check if NFT is Land/Estate
    if (onChainMeta.data.attributes['MetaverseId:']) {
      return await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(`${_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.BIT_COUNTRY_LAND_ESTATE_METADATA_API}/${assetId.classId}/${assetId.tokenId}/metadata.json`).then(resp => resp.json());
    } else {
      return await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.BIT_COUNTRY_IPFS_SERVER + onChainMeta.metadata).then(resp => resp.json());
    }
  }
  async getCollectionDetails(collectionId) {
    if (!this.substrateApi) {
      return null;
    }
    const metadataCollection = (await this.substrateApi.api.query.ormlNFT.classes(collectionId)).toHuman();
    if (!metadataCollection.metadata) {
      return null;
    }
    if (metadataCollection.data.attributes['MetaverseId:']) {
      const category = metadataCollection.data.attributes['Category:'];
      const hexMetaverseId = metadataCollection.data.attributes['MetaverseId:'];
      let metaverseId = _polkadot_util__WEBPACK_IMPORTED_MODULE_4__.BN_ZERO;
      try {
        metaverseId = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__.hexToBn)(hexMetaverseId);
      } catch (e) {
        console.warn('Error parsing metaverse id', e);
      }
      return {
        name: `${category} #${collectionId}`,
        metaverseId: metaverseId.toString()
      };
    } else {
      return await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.BIT_COUNTRY_IPFS_SERVER + metadataCollection.metadata).then(resp => resp.json());
    }
  }
  parseMetadata(data) {
    const traitList = data !== null && data !== void 0 && data.traits ? data.traits : data === null || data === void 0 ? void 0 : data.attributes;
    const propertiesMap = {};
    if (traitList) {
      traitList.forEach(traitMap => {
        propertiesMap[traitMap.trait_type] = {
          value: traitMap.value
        };
      });
    }
    return {
      name: data === null || data === void 0 ? void 0 : data.name,
      image: data !== null && data !== void 0 && data.image_url ? this.parseUrl(data.image_url) : this.parseUrl(data === null || data === void 0 ? void 0 : data.image),
      description: data === null || data === void 0 ? void 0 : data.description,
      properties: propertiesMap,
      externalUrl: data === null || data === void 0 ? void 0 : data.external_url,
      chain: this.chain
    };
  }
  async fetchNfts(params) {
    try {
      await this.connect();
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
  async handleNft(address, params) {
    const assetIds = await this.getNfts([address]);
    try {
      if (!assetIds || assetIds.length === 0) {
        return;
      }
      const collectionIds = [];
      const nftIds = [];
      await Promise.all(assetIds.map(async assetId => {
        const parsedClassId = this.parseTokenId(assetId.classId);
        const parsedTokenId = this.parseTokenId(assetId.tokenId);
        if (!collectionIds.includes(parsedClassId)) {
          collectionIds.push(parsedClassId);
        }
        nftIds.push(parsedTokenId);
        const [tokenInfo, collectionMeta] = await Promise.all([this.getTokenDetails(assetId), this.getCollectionDetails(parsedClassId)]);
        const parsedNft = this.parseMetadata(tokenInfo);
        parsedNft.collectionId = parsedClassId;
        parsedNft.id = parsedTokenId;
        parsedNft.owner = address;
        const parsedCollection = {
          collectionId: parsedClassId,
          chain: this.chain,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          collectionName: collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.name,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          image: this.parseUrl(collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.image_url)
        };
        params.updateItem(this.chain, parsedNft, address);
        params.updateCollection(this.chain, parsedCollection);
      }));
    } catch (e) {
      console.error(`${this.chain}`, e);
    }
  }
  async handleNfts(params) {
    await Promise.all(this.addresses.map(address => this.handleNft(address, params)));
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/config.ts":
/*!****************************************************!*\
  !*** ../extension-base/src/koni/api/nft/config.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BIT_COUNTRY_IPFS_SERVER": () => (/* binding */ BIT_COUNTRY_IPFS_SERVER),
/* harmony export */   "BIT_COUNTRY_LAND_ESTATE_METADATA_API": () => (/* binding */ BIT_COUNTRY_LAND_ESTATE_METADATA_API),
/* harmony export */   "BIT_COUNTRY_THUMBNAIL_RESOLVER": () => (/* binding */ BIT_COUNTRY_THUMBNAIL_RESOLVER),
/* harmony export */   "CF_IPFS_GATEWAY": () => (/* binding */ CF_IPFS_GATEWAY),
/* harmony export */   "CLOUDFLARE_PINATA_SERVER": () => (/* binding */ CLOUDFLARE_PINATA_SERVER),
/* harmony export */   "DWEB_LINK": () => (/* binding */ DWEB_LINK),
/* harmony export */   "GATEWAY_IPFS_IO": () => (/* binding */ GATEWAY_IPFS_IO),
/* harmony export */   "IPFS_FLEEK": () => (/* binding */ IPFS_FLEEK),
/* harmony export */   "IPFS_GATEWAY_4EVERLAND": () => (/* binding */ IPFS_GATEWAY_4EVERLAND),
/* harmony export */   "IPFS_IO": () => (/* binding */ IPFS_IO),
/* harmony export */   "IPFS_W3S_LINK": () => (/* binding */ IPFS_W3S_LINK),
/* harmony export */   "KANARIA_ENDPOINT": () => (/* binding */ KANARIA_ENDPOINT),
/* harmony export */   "KANARIA_EXTERNAL_SERVER": () => (/* binding */ KANARIA_EXTERNAL_SERVER),
/* harmony export */   "NFT_STORAGE_GATEWAY": () => (/* binding */ NFT_STORAGE_GATEWAY),
/* harmony export */   "PINATA_IPFS_GATEWAY": () => (/* binding */ PINATA_IPFS_GATEWAY),
/* harmony export */   "QUARTZ_SCAN_ENDPOINT": () => (/* binding */ QUARTZ_SCAN_ENDPOINT),
/* harmony export */   "RMRK_PINATA_SERVER": () => (/* binding */ RMRK_PINATA_SERVER),
/* harmony export */   "SINGULAR_V1_COLLECTION_ENDPOINT": () => (/* binding */ SINGULAR_V1_COLLECTION_ENDPOINT),
/* harmony export */   "SINGULAR_V1_ENDPOINT": () => (/* binding */ SINGULAR_V1_ENDPOINT),
/* harmony export */   "SINGULAR_V2_COLLECTION_ENDPOINT": () => (/* binding */ SINGULAR_V2_COLLECTION_ENDPOINT),
/* harmony export */   "SINGULAR_V2_ENDPOINT": () => (/* binding */ SINGULAR_V2_ENDPOINT),
/* harmony export */   "SUPPORTED_NFT_NETWORKS": () => (/* binding */ SUPPORTED_NFT_NETWORKS),
/* harmony export */   "SUPPORTED_TRANSFER_EVM_CHAIN": () => (/* binding */ SUPPORTED_TRANSFER_EVM_CHAIN),
/* harmony export */   "SUPPORTED_TRANSFER_EVM_CHAIN_NAME": () => (/* binding */ SUPPORTED_TRANSFER_EVM_CHAIN_NAME),
/* harmony export */   "SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME": () => (/* binding */ SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME),
/* harmony export */   "TRANSFER_CHAIN_ID": () => (/* binding */ TRANSFER_CHAIN_ID),
/* harmony export */   "UNIQUE_IPFS_GATEWAY": () => (/* binding */ UNIQUE_IPFS_GATEWAY),
/* harmony export */   "UNIQUE_SCAN_ENDPOINT": () => (/* binding */ UNIQUE_SCAN_ENDPOINT),
/* harmony export */   "VARA_SCAN_ENDPOINT": () => (/* binding */ VARA_SCAN_ENDPOINT),
/* harmony export */   "getRandomIpfsGateway": () => (/* binding */ getRandomIpfsGateway)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/environment.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


const SINGULAR_V1_ENDPOINT = 'https://singular.rmrk-api.xyz/api/account-rmrk1/';
const SINGULAR_V2_ENDPOINT = 'https://singular.rmrk-api.xyz/api/account/';
const KANARIA_ENDPOINT = 'https://kanaria.rmrk.app/api/rmrk2/';
const RMRK_PINATA_SERVER = 'https://rmrk.mypinata.cloud/ipfs/';
const SINGULAR_V1_COLLECTION_ENDPOINT = 'https://singular.rmrk.app/api/rmrk1/collection/';
const SINGULAR_V2_COLLECTION_ENDPOINT = 'https://singular.app/api/rmrk2/collection/';
const KANARIA_EXTERNAL_SERVER = 'https://kanaria.rmrk.app/catalogue/';
const CLOUDFLARE_PINATA_SERVER = 'https://cloudflare-ipfs.com/ipfs/';
const BIT_COUNTRY_IPFS_SERVER = 'https://ipfs-cdn.bit.country/';
const BIT_COUNTRY_LAND_ESTATE_METADATA_API = 'https://pioneer-api.bit.country/metadata/landTokenUriPioneer';
const BIT_COUNTRY_THUMBNAIL_RESOLVER = 'https://res.cloudinary.com/ddftctzph/image/upload/c_scale,q_100,w_250/production-ipfs/asset/';
const CF_IPFS_GATEWAY = 'https://cf-ipfs.com/ipfs/';
const PINATA_IPFS_GATEWAY = 'https://gateway.pinata.cloud/ipfs/';
const UNIQUE_SCAN_ENDPOINT = 'https://explorer-api.unique.network/v1/graphql';
const QUARTZ_SCAN_ENDPOINT = 'https://hasura-quartz.unique.network/v1/graphql';
const VARA_SCAN_ENDPOINT = 'https://nft-explorer.vara-network.io/graphql';

// GATEWAY

const UNIQUE_IPFS_GATEWAY = 'https://ipfs.unique.network/ipfs/';
const NFT_STORAGE_GATEWAY = 'https://nftstorage.link/ipfs/';
const IPFS_W3S_LINK = 'https://w3s.link/ipfs/';
const GATEWAY_IPFS_IO = 'https://gateway.ipfs.io/ipfs/';
const IPFS_IO = 'https://ipfs.io/ipfs/';
const DWEB_LINK = 'https://dweb.link/ipfs/';
const IPFS_GATEWAY_4EVERLAND = 'https://4everland.io/ipfs/';
const IPFS_FLEEK = 'https://ipfs.fleek.co/ipfs/';
let SUPPORTED_NFT_NETWORKS;
(function (SUPPORTED_NFT_NETWORKS) {
  SUPPORTED_NFT_NETWORKS["karura"] = "karura";
  SUPPORTED_NFT_NETWORKS["acala"] = "acala";
  SUPPORTED_NFT_NETWORKS["kusama"] = "kusama";
  SUPPORTED_NFT_NETWORKS["statemine"] = "statemine";
  SUPPORTED_NFT_NETWORKS["unique_network"] = "unique_network";
  SUPPORTED_NFT_NETWORKS["quartz"] = "quartz";
  SUPPORTED_NFT_NETWORKS["bitcountry"] = "bitcountry";
  SUPPORTED_NFT_NETWORKS["pioneer"] = "pioneer";
})(SUPPORTED_NFT_NETWORKS || (SUPPORTED_NFT_NETWORKS = {}));
let SUPPORTED_TRANSFER_EVM_CHAIN_NAME;
(function (SUPPORTED_TRANSFER_EVM_CHAIN_NAME) {
  SUPPORTED_TRANSFER_EVM_CHAIN_NAME["moonbeam"] = "moonbeam";
  SUPPORTED_TRANSFER_EVM_CHAIN_NAME["moonbase"] = "moonbase";
  SUPPORTED_TRANSFER_EVM_CHAIN_NAME["astarEvm"] = "astarEvm";
  SUPPORTED_TRANSFER_EVM_CHAIN_NAME["moonriver"] = "moonriver";
  SUPPORTED_TRANSFER_EVM_CHAIN_NAME["shiden"] = "shiden";
  SUPPORTED_TRANSFER_EVM_CHAIN_NAME["shibuya"] = "shibuya";
})(SUPPORTED_TRANSFER_EVM_CHAIN_NAME || (SUPPORTED_TRANSFER_EVM_CHAIN_NAME = {}));
const SUPPORTED_TRANSFER_EVM_CHAIN = [SUPPORTED_TRANSFER_EVM_CHAIN_NAME.moonbase, SUPPORTED_TRANSFER_EVM_CHAIN_NAME.moonbeam, SUPPORTED_TRANSFER_EVM_CHAIN_NAME.moonriver, SUPPORTED_TRANSFER_EVM_CHAIN_NAME.astarEvm, SUPPORTED_TRANSFER_EVM_CHAIN_NAME.shiden, SUPPORTED_TRANSFER_EVM_CHAIN_NAME.shibuya];
const TRANSFER_CHAIN_ID = {
  [SUPPORTED_TRANSFER_EVM_CHAIN_NAME.moonbase]: 1287,
  [SUPPORTED_TRANSFER_EVM_CHAIN_NAME.moonbeam]: 1284,
  [SUPPORTED_TRANSFER_EVM_CHAIN_NAME.moonriver]: 1285,
  [SUPPORTED_TRANSFER_EVM_CHAIN_NAME.astarEvm]: 592,
  [SUPPORTED_TRANSFER_EVM_CHAIN_NAME.shiden]: 336,
  [SUPPORTED_TRANSFER_EVM_CHAIN_NAME.shibuya]: 81
};
let SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME;
(function (SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME) {
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["statemine"] = "statemine";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["acala"] = "acala";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["karura"] = "karura";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["kusama"] = "kusama";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["uniqueNft"] = "unique_network";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["quartz"] = "quartz";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["opal"] = "opal";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["statemint"] = "statemint";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["bitcountry"] = "bitcountry";
  SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME["pioneer"] = "pioneer";
})(SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME || (SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME = {}));
const RANDOM_IPFS_GATEWAY_SETTING = [{
  provider: CF_IPFS_GATEWAY,
  weight: 4
}, {
  provider: CLOUDFLARE_PINATA_SERVER,
  weight: 10
}, {
  provider: PINATA_IPFS_GATEWAY,
  weight: 1 // Rate limit too low
}, {
  provider: DWEB_LINK,
  weight: 5
}, {
  provider: GATEWAY_IPFS_IO,
  weight: 5
}, {
  provider: IPFS_IO,
  weight: 5
}, {
  provider: NFT_STORAGE_GATEWAY,
  weight: 50
}];
if (!_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.RuntimeInfo.protocol || _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.RuntimeInfo.protocol && !_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.RuntimeInfo.protocol.startsWith('http')) {
  RANDOM_IPFS_GATEWAY_SETTING.push({
    provider: IPFS_FLEEK,
    weight: 4
  });
  RANDOM_IPFS_GATEWAY_SETTING.push({
    provider: IPFS_GATEWAY_4EVERLAND,
    weight: 2
  });
  RANDOM_IPFS_GATEWAY_SETTING.push({
    provider: IPFS_W3S_LINK,
    weight: 1
  });
}
const RANDOM_IPFS_GATEWAY_TOTAL_WEIGHT = RANDOM_IPFS_GATEWAY_SETTING.reduce((value, item) => value + item.weight, 0);
function getRandomIpfsGateway() {
  const weighedItems = [];
  let currentItem = 0;
  while (currentItem < RANDOM_IPFS_GATEWAY_SETTING.length) {
    for (let i = 0; i < RANDOM_IPFS_GATEWAY_SETTING[currentItem].weight; i++) {
      weighedItems[weighedItems.length] = RANDOM_IPFS_GATEWAY_SETTING[currentItem].provider;
    }
    currentItem++;
  }
  return weighedItems[Math.floor(Math.random() * RANDOM_IPFS_GATEWAY_TOTAL_WEIGHT)];
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/evm_nft/index.ts":
/*!***********************************************************!*\
  !*** ../extension-base/src/koni/api/nft/evm_nft/index.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EvmNftApi": () => (/* binding */ EvmNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/config */ "../extension-base/src/koni/api/nft/config.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/helper */ "../extension-base/src/services/chain-service/helper/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0









class EvmNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  evmContracts = [];
  constructor(evmApi, addresses, chain) {
    super(chain, undefined, addresses);
    this.evmApi = evmApi;
    this.isEthereum = true;
  }
  setSmartContractNfts(evmContracts) {
    this.evmContracts = evmContracts;
  }
  parseUrl(input) {
    if (!input) {
      return undefined;
    }
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.isUrl)(input)) {
      return input;
    }
    if (input.includes('ipfs://')) {
      return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + input.split('ipfs://')[1];
    }
    return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + input.split('ipfs://ipfs/')[1];
  }
  parseMetadata(data) {
    const traitList = data.traits ? data.traits : data.attributes;
    const propertiesMap = {};
    if (traitList) {
      traitList.forEach(traitMap => {
        propertiesMap[traitMap.trait_type] = {
          value: traitMap.value
          // rarity: traitMap.trait_count / itemTotal
        };
      });
    }

    // extra fields
    if (data.dna) {
      propertiesMap.dna = {
        value: data.dna
      };
    }

    // if (data.compiler) {
    //   propertiesMap.compiler = {
    //     value: data.compiler as string
    //   };
    // }

    return {
      name: data.name,
      image: data.image_url ? this.parseUrl(data.image_url) : this.parseUrl(data.image),
      description: data.description,
      properties: propertiesMap,
      externalUrl: data.external_url,
      chain: this.chain
    };
  }
  async getItemsByCollection(tokenInfo, collectionName, nftParams) {
    if (!this.evmApi) {
      return;
    }
    const smartContract = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._getContractAddressOfToken)(tokenInfo);

    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-assignment
    const contract = new this.evmApi.api.eth.Contract(_subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_5__._ERC721_ABI, smartContract);
    let ownItem = false;
    let collectionImage;
    const nftOwnerMap = {};
    await Promise.all(this.addresses.map(async address => {
      if (!(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__.isEthereumAddress)(address)) {
        return;
      }
      const nftIds = [];

      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
      const balance = await contract.methods.balanceOf(address).call();
      if (Number(balance) === 0) {
        return;
      }
      const itemIndexes = [];
      for (let i = 0; i < Number(balance); i++) {
        itemIndexes.push(i);
      }
      try {
        await Promise.all(itemIndexes.map(async i => {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
          const tokenId = await contract.methods.tokenOfOwnerByIndex(address, i).call();
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
          const tokenURI = await contract.methods.tokenURI(tokenId).call();
          const detailUrl = this.parseUrl(tokenURI);
          const nftId = tokenId.toString();
          nftIds.push(nftId);
          if (detailUrl) {
            try {
              const resp = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(detailUrl);
              const itemDetail = resp && resp.ok && (await resp.json());
              if (!itemDetail) {
                return;
              }
              const parsedItem = this.parseMetadata(itemDetail);
              parsedItem.collectionId = smartContract;
              parsedItem.id = nftId;
              parsedItem.owner = address;
              parsedItem.type = _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_7__._AssetType.ERC721;
              parsedItem.originAsset = tokenInfo.slug;
              if (parsedItem) {
                if (parsedItem.image) {
                  collectionImage = parsedItem.image;
                }
                nftParams.updateItem(this.chain, parsedItem, address);
                ownItem = true;
              }
            } catch (e) {
              console.error(`${this.chain}`, e);
            }
          }
        }));
        nftOwnerMap[address] = nftIds;
      } catch (e) {
        console.error(`${this.chain}`, e);
      }
    }));
    if (ownItem) {
      const nftCollection = {
        collectionId: smartContract,
        collectionName,
        image: collectionImage || undefined,
        chain: this.chain,
        originAsset: tokenInfo.slug
      };
      nftParams.updateCollection(this.chain, nftCollection);
    }
  }
  async handleNfts(params) {
    if (!this.evmContracts || this.evmContracts.length === 0) {
      return;
    }
    await Promise.all(this.evmContracts.map(async tokenInfo => {
      return await this.getItemsByCollection(tokenInfo, tokenInfo.name, params);
    }));
  }
  async fetchNfts(params) {
    try {
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/index.ts":
/*!***************************************************!*\
  !*** ../extension-base/src/koni/api/nft/index.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NftHandler": () => (/* binding */ NftHandler)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_acala_nft__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/acala_nft */ "../extension-base/src/koni/api/nft/acala_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_bit_country__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/bit.country */ "../extension-base/src/koni/api/nft/bit.country/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_evm_nft__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/evm_nft */ "../extension-base/src/koni/api/nft/evm_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_karura_nft__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/karura_nft */ "../extension-base/src/koni/api/nft/karura_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_rmrk_nft__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/rmrk_nft */ "../extension-base/src/koni/api/nft/rmrk_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_statemine_nft__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/statemine_nft */ "../extension-base/src/koni/api/nft/statemine_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_unique_nft__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/unique_nft */ "../extension-base/src/koni/api/nft/unique_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_vara_nft__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/vara_nft */ "../extension-base/src/koni/api/nft/vara_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_wasm_nft__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/wasm_nft */ "../extension-base/src/koni/api/nft/wasm_nft/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _statemint_nft__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./statemint_nft */ "../extension-base/src/koni/api/nft/statemint_nft/index.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0














function createSubstrateNftApi(chain, substrateApi, addresses) {
  const [substrateAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.categoryAddresses)(addresses);
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.acala.includes(chain)) {
    return new _subwallet_extension_base_koni_api_nft_acala_nft__WEBPACK_IMPORTED_MODULE_2__.AcalaNftApi(substrateApi, substrateAddresses, chain);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.karura.includes(chain)) {
    return new _subwallet_extension_base_koni_api_nft_karura_nft__WEBPACK_IMPORTED_MODULE_3__.KaruraNftApi(substrateApi, substrateAddresses, chain);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.rmrk.includes(chain)) {
    return new _subwallet_extension_base_koni_api_nft_rmrk_nft__WEBPACK_IMPORTED_MODULE_4__.RmrkNftApi(substrateAddresses, chain);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.statemine.includes(chain)) {
    return new _subwallet_extension_base_koni_api_nft_statemine_nft__WEBPACK_IMPORTED_MODULE_5__["default"](substrateApi, substrateAddresses, chain);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.statemint.includes(chain)) {
    return new _statemint_nft__WEBPACK_IMPORTED_MODULE_6__["default"](substrateApi, substrateAddresses, chain);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.unique_network.includes(chain)) {
    return new _subwallet_extension_base_koni_api_nft_unique_nft__WEBPACK_IMPORTED_MODULE_7__["default"](substrateApi, substrateAddresses, chain);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.bitcountry.includes(chain)) {
    return new _subwallet_extension_base_koni_api_nft_bit_country__WEBPACK_IMPORTED_MODULE_8__.BitCountryNftApi(substrateApi, substrateAddresses, chain);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._NFT_CHAIN_GROUP.vara.includes(chain)) {
    return new _subwallet_extension_base_koni_api_nft_vara_nft__WEBPACK_IMPORTED_MODULE_9__.VaraNftApi(chain, substrateAddresses);
  }
  return null;
}
function createWasmNftApi(chain, apiProps, addresses) {
  const [substrateAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.categoryAddresses)(addresses);
  return new _subwallet_extension_base_koni_api_nft_wasm_nft__WEBPACK_IMPORTED_MODULE_10__.WasmNftApi(apiProps, substrateAddresses, chain);
}
function createWeb3NftApi(chain, evmApi, addresses) {
  const [, evmAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.categoryAddresses)(addresses);
  return new _subwallet_extension_base_koni_api_nft_evm_nft__WEBPACK_IMPORTED_MODULE_11__.EvmNftApi(evmApi, evmAddresses, chain);
}
class NftHandler {
  // General settings
  chainInfoMap = {};
  addresses = [];
  smartContractNfts = [];

  // Provider API needed
  substrateApiMap = {};
  evmApiMap = {};

  // Logic handling
  handlers = []; // 1 chain can have multiple handlers (to support multiple token standards)
  total = 0;
  needSetupApi = true;
  setChainInfoMap(chainInfoMap) {
    this.chainInfoMap = chainInfoMap;
    this.needSetupApi = true;
  }
  setWeb3ApiMap(web3ApiMap) {
    this.evmApiMap = web3ApiMap;
    this.needSetupApi = true;
  }
  setDotSamaApiMap(dotSamaAPIMap) {
    this.substrateApiMap = dotSamaAPIMap;
    this.needSetupApi = true;
  }
  setAddresses(addresses) {
    this.addresses = addresses;
    const [substrateAddresses, evmAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.categoryAddresses)(addresses);
    for (const handler of this.handlers) {
      const useAddresses = handler.isEthereum ? evmAddresses : substrateAddresses;
      handler.setAddresses(useAddresses);
    }
  }
  setupNftContracts(smartContractNfts) {
    this.smartContractNfts = smartContractNfts;
    for (const handler of this.handlers) {
      if (handler instanceof _subwallet_extension_base_koni_api_nft_evm_nft__WEBPACK_IMPORTED_MODULE_11__.EvmNftApi || handler instanceof _subwallet_extension_base_koni_api_nft_wasm_nft__WEBPACK_IMPORTED_MODULE_10__.WasmNftApi) {
        const filteredNfts = [];
        for (const nft of smartContractNfts) {
          if (nft.originChain === handler.chain) {
            filteredNfts.push(nft);
          }
        }
        handler.setSmartContractNfts(filteredNfts);
      }
    }
  }
  setupApi() {
    try {
      if (this.needSetupApi) {
        // setup connections for first time use
        this.handlers = [];
        const [substrateAddresses, evmAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.categoryAddresses)(this.addresses);
        Object.entries(this.chainInfoMap).forEach(([chain, chainInfo]) => {
          if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_12__._isChainSupportNativeNft)(chainInfo)) {
            if (this.substrateApiMap[chain]) {
              const handler = createSubstrateNftApi(chain, this.substrateApiMap[chain], substrateAddresses);
              if (handler) {
                this.handlers.push(handler);
              }
            }
          }
          if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_12__._isChainSupportEvmNft)(chainInfo)) {
            if (this.evmApiMap[chain]) {
              const handler = createWeb3NftApi(chain, this.evmApiMap[chain], evmAddresses);
              if (handler) {
                this.handlers.push(handler);
              }
            }
          }
          if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_12__._isChainSupportWasmNft)(chainInfo)) {
            if (this.substrateApiMap[chain]) {
              const handler = createWasmNftApi(chain, this.substrateApiMap[chain], substrateAddresses);
              if (handler && !this.handlers.includes(handler)) {
                this.handlers.push(handler);
              }
            }
          }
        });
        this.needSetupApi = false;
      }
    } catch (e) {
      console.error(e);
    }
  }
  async handleNfts(nftContracts, updateItem, updateCollection) {
    this.setupApi();
    this.setupNftContracts(nftContracts);
    await Promise.all(this.handlers.map(async handler => {
      await handler.fetchNfts({
        updateItem,
        updateCollection
      });
    }));
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/karura_nft/index.ts":
/*!**************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/karura_nft/index.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KaruraNftApi": () => (/* binding */ KaruraNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/config */ "../extension-base/src/koni/api/nft/config.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0





class KaruraNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  // eslint-disable-next-line no-useless-constructor
  constructor(api, addresses, chain) {
    super(chain, api, addresses);
  }
  parseUrl(input) {
    if (!input || input.length === 0) {
      return undefined;
    }
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.isUrl)(input)) {
      return input;
    }
    if (!input.includes('ipfs://')) {
      return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + input;
    }
    return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + input.split('ipfs://')[1];
  }

  /**
   * Retrieve id of NFTs
   *
   * @returns the array of NFT Ids
   * @param addresses
   */
  async getNfts(addresses) {
    if (!this.substrateApi) {
      return [];
    }
    const accountAssets = {};
    await Promise.all(addresses.map(async address => {
      // @ts-ignore
      const resp = await this.substrateApi.api.query.ormlNFT.tokensByOwner.keys(address);
      if (address in accountAssets) {
        accountAssets[address].concat(resp);
      } else {
        accountAssets[address] = resp;
      }
    }));
    const assetIds = [];
    Object.entries(accountAssets).forEach(([owner, rawData]) => {
      for (const key of rawData) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        const data = key.toHuman();
        assetIds.push({
          classId: data[1],
          tokenId: this.parseTokenId(data[2]),
          owner
        });
      }
    });
    return assetIds;
  }
  async getCollectionDetails(collectionId) {
    if (!this.substrateApi) {
      return null;
    }
    const metadataCollection = (await this.substrateApi.api.query.ormlNFT.classes(collectionId)).toHuman();
    if (!(metadataCollection !== null && metadataCollection !== void 0 && metadataCollection.metadata)) {
      return null;
    }
    const data = await getKaruraMetadata(metadataCollection === null || metadataCollection === void 0 ? void 0 : metadataCollection.metadata);
    return {
      ...data,
      image: this.parseUrl(data.image)
    };
  }
  async getTokenDetails(assetId) {
    if (!this.substrateApi) {
      return null;
    }
    return (await this.substrateApi.api.query.ormlNFT.tokens(assetId.classId, assetId.tokenId)).toHuman();
  }
  async handleNft(address, params) {
    // const start = performance.now();
    const assetIds = await this.getNfts([address]);
    try {
      if (!assetIds || assetIds.length === 0) {
        return;
      }
      const collectionIds = [];
      const nftIds = [];
      await Promise.all(assetIds.map(async assetId => {
        const parsedClassId = this.parseTokenId(assetId.classId);
        const parsedTokenId = this.parseTokenId(assetId.tokenId);
        if (!collectionIds.includes(parsedClassId)) {
          collectionIds.push(parsedClassId);
        }
        nftIds.push(parsedTokenId);
        const [tokenInfo, collectionMeta] = await Promise.all([this.getTokenDetails(assetId), this.getCollectionDetails(parseInt(parsedClassId))]);
        const parsedNft = {
          id: parsedTokenId,
          name: tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.name,
          description: tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.description,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
          image: tokenInfo && tokenInfo.image ? this.parseUrl(tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.image) : collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.image,
          collectionId: parsedClassId,
          chain: this.chain,
          owner: assetId.owner
        };
        const parsedCollection = {
          collectionId: parsedClassId,
          chain: this.chain,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          collectionName: collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.name,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          image: collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.image
        };
        params.updateItem(this.chain, parsedNft, address);
        params.updateCollection(this.chain, parsedCollection);
      }));
    } catch (e) {
      console.error(`${this.chain}`, e);
    }
  }
  async handleNfts(params) {
    await Promise.all(this.addresses.map(address => this.handleNft(address, params)));
  }
  async fetchNfts(params) {
    try {
      await this.connect();
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}
const getKaruraMetadata = metadataUrl => {
  let url = metadataUrl;
  if (!metadataUrl) {
    return null;
  }
  url = (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_3__.getRandomIpfsGateway)() + metadataUrl + '/azero_domain_registry_abi.json';
  return cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    }
  }).then(res => res.json());
};

/***/ }),

/***/ "../extension-base/src/koni/api/nft/nft.ts":
/*!*************************************************!*\
  !*** ../extension-base/src/koni/api/nft/nft.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseNftApi": () => (/* binding */ BaseNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/config */ "../extension-base/src/koni/api/nft/config.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class BaseNftApi {
  chain = '';
  substrateApi = null;
  evmApi = null;
  data = [];
  total = 0;
  addresses = [];
  isEthereum = false;
  constructor(chain, substrateApi, addresses, evmApi) {
    if (substrateApi) {
      this.substrateApi = substrateApi;
    }
    if (addresses) {
      this.addresses = addresses;
    }
    this.chain = chain;
    if (evmApi) {
      this.evmApi = evmApi;
    }
  }
  async connect() {
    var _this$substrateApi;
    if (!((_this$substrateApi = this.substrateApi) !== null && _this$substrateApi !== void 0 && _this$substrateApi.isApiConnected)) {
      var _this$substrateApi2;
      this.substrateApi = await ((_this$substrateApi2 = this.substrateApi) === null || _this$substrateApi2 === void 0 ? void 0 : _this$substrateApi2.isReady);
    }
  }
  recoverConnection() {
    var _this$substrateApi3;
    if (!((_this$substrateApi3 = this.substrateApi) !== null && _this$substrateApi3 !== void 0 && _this$substrateApi3.isApiConnected)) {
      var _this$substrateApi4;
      ((_this$substrateApi4 = this.substrateApi) === null || _this$substrateApi4 === void 0 ? void 0 : _this$substrateApi4.recoverConnect) && this.substrateApi.recoverConnect();
    }
  }
  getSubstrateApi() {
    return this.substrateApi;
  }
  getChain() {
    return this.chain;
  }
  getTotal() {
    return this.total;
  }
  getData() {
    return this.data;
  }
  setSubstrateApi(api) {
    this.substrateApi = api;
  }
  setChain(chain) {
    this.chain = chain;
  }
  setAddresses(addresses) {
    this.addresses = addresses;
  }
  parseTokenId(tokenId) {
    if (tokenId.includes(',')) {
      return tokenId.replace(',', '');
    }
    return tokenId;
  }
  parseUrl(input) {
    if (!input || input.length === 0) {
      return undefined;
    }
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.isUrl)(input)) {
      return input;
    }
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.isUrl)(input) || input.includes('https://') || input.includes('http')) {
      return input;
    }
    if (input.startsWith('/ipfs/')) {
      return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.getRandomIpfsGateway)() + input.split('/ipfs/')[1];
    }
    if (!input.includes('ipfs://') && !input.includes('ipfs://ipfs/')) {
      // just the IPFS hash
      return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.getRandomIpfsGateway)() + input;
    }
    if (input.includes('ipfs://') && !input.includes('ipfs://ipfs/')) {
      // starts with ipfs://
      return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.getRandomIpfsGateway)() + input.split('ipfs://')[1];
    }
    return (0,_subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.getRandomIpfsGateway)() + input.split('ipfs://ipfs/')[1]; // starts with ipfs://ipfs/
  }

  // Subclass implements this function to parse data into prop result
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/rmrk_nft/index.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/rmrk_nft/index.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RmrkNftApi": () => (/* binding */ RmrkNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../config */ "../extension-base/src/koni/api/nft/config.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0






var RMRK_SOURCE;
(function (RMRK_SOURCE) {
  RMRK_SOURCE["BIRD_KANARIA"] = "bird_kanaria";
  RMRK_SOURCE["KANARIA"] = "kanaria";
  RMRK_SOURCE["SINGULAR_V1"] = "singular_v1";
  RMRK_SOURCE["SINGULAR_V2"] = "singular_v2";
})(RMRK_SOURCE || (RMRK_SOURCE = {}));
const KANBIRD_KEYWORD = 'KANBIRD';
class RmrkNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  constructor(addresses, chain) {
    super(chain, null, addresses);
  }

  // override parseUrl (input: string): string | undefined {
  //   if (!input || input.length === 0) {
  //     return undefined;
  //   }
  //
  //   if (isUrl(input) || input.includes('https://') || input.includes('http')) {
  //     return input;
  //   }
  //
  //   if (!input.includes('ipfs://ipfs/')) {
  //     return getRandomIpfsGateway() + input;
  //   }
  //
  //   return getRandomIpfsGateway() + input.split('ipfs://ipfs/')[1];
  // }

  async getMetadata(metadataUrl) {
    let url = metadataUrl;
    if (!(0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.isUrl)(metadataUrl)) {
      url = this.parseUrl(metadataUrl);
      if (!url || url.length === 0) {
        return undefined;
      }
    }
    return await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
      method: 'GET'
    }).then(res => res.json());
  }
  async getAllByAccount(account) {
    const fetchUrls = [{
      url: _config__WEBPACK_IMPORTED_MODULE_3__.SINGULAR_V2_ENDPOINT + account,
      source: RMRK_SOURCE.SINGULAR_V2
    }];
    let data = [];
    await Promise.all(fetchUrls.map(async ({
      source,
      url
    }) => {
      let _data = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
        method: 'GET'
      }).then(res => res.json());
      _data = _data.map(item => {
        let nftSource = source;
        if (item.collectionId.includes(KANBIRD_KEYWORD)) {
          nftSource = RMRK_SOURCE.BIRD_KANARIA;
        }
        return {
          ...item,
          source: nftSource
        };
      });
      data = data.concat(_data);
    }));
    const nfts = [];
    await Promise.all(data.map(async item => {
      try {
        const primaryResource = item.primaryResource ? item.primaryResource : null;
        const metadataUri = primaryResource && primaryResource.metadata ? primaryResource.metadata : item.metadata;
        const nftMetadata = await this.getMetadata(metadataUri);
        if (item.source === RMRK_SOURCE.BIRD_KANARIA) {
          nfts.push({
            ...item,
            metadata: nftMetadata,
            owner: account
          });
        } else if (item.source === RMRK_SOURCE.KANARIA) {
          nfts.push({
            ...item,
            metadata: {
              ...nftMetadata,
              image: this.parseUrl(nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.image)
            },
            owner: account
          });
        } else if (item.source === RMRK_SOURCE.SINGULAR_V1) {
          nfts.push({
            ...item,
            metadata: {
              description: nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.description,
              name: nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.name,
              attributes: nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.attributes,
              animation_url: this.parseUrl(nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.animation_url),
              image: this.parseUrl(nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.image)
            },
            owner: account
          });
        } else if (item.source === RMRK_SOURCE.SINGULAR_V2) {
          const id = item.id;
          if (!id.toLowerCase().includes(KANBIRD_KEYWORD)) {
            // excludes kanaria bird, already handled above
            nfts.push({
              ...item,
              metadata: {
                description: nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.description,
                name: nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.name,
                attributes: nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.attributes,
                properties: nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.properties,
                animation_url: this.parseUrl(nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.animation_url),
                image: this.parseUrl(nftMetadata === null || nftMetadata === void 0 ? void 0 : nftMetadata.mediaUri)
              },
              owner: account
            });
          }
        }
      } catch (e) {
        console.log('error fetching RMRK NFT', e);
      }
    }));
    return nfts;
  }
  async handleNft(address, params) {
    // const start = performance.now();

    let allNfts = [];
    const allCollections = [];
    try {
      const kusamaAddress = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.reformatAddress)(address, 2);
      allNfts = await this.getAllByAccount(kusamaAddress);
      if (allNfts.length <= 0) {
        return;
      }
      const collectionInfoUrl = [];
      for (const item of allNfts) {
        var _item$metadata, _item$metadata2, _item$metadata3;
        const parsedItem = {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          id: item === null || item === void 0 ? void 0 : item.id,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          name: item === null || item === void 0 ? void 0 : (_item$metadata = item.metadata) === null || _item$metadata === void 0 ? void 0 : _item$metadata.name,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-argument
          image: this.parseUrl(item.image ? item.image : item.metadata.image ? item.metadata.image : item.metadata.animation_url),
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          description: item === null || item === void 0 ? void 0 : (_item$metadata2 = item.metadata) === null || _item$metadata2 === void 0 ? void 0 : _item$metadata2.description,
          externalUrl: item === null || item === void 0 ? void 0 : item.external_url,
          rarity: item === null || item === void 0 ? void 0 : item.metadata_rarity,
          collectionId: item === null || item === void 0 ? void 0 : item.collectionId,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          properties: item === null || item === void 0 ? void 0 : (_item$metadata3 = item.metadata) === null || _item$metadata3 === void 0 ? void 0 : _item$metadata3.properties,
          chain: this.chain,
          rmrk_ver: item.source && item.source === RMRK_SOURCE.SINGULAR_V1 ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.RMRK_VER.VER_1 : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.RMRK_VER.VER_2,
          owner: item.owner
        };

        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        params.updateItem(this.chain, parsedItem, address);
        let url = '';
        if (item.source === RMRK_SOURCE.SINGULAR_V1) {
          url = _config__WEBPACK_IMPORTED_MODULE_3__.SINGULAR_V1_COLLECTION_ENDPOINT + item.collectionId;
        } else {
          url = _config__WEBPACK_IMPORTED_MODULE_3__.SINGULAR_V2_COLLECTION_ENDPOINT + item.collectionId;
        }
        if (!collectionInfoUrl.includes(url)) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          allCollections.push({
            chain: '',
            collectionId: item.collectionId
          });
          collectionInfoUrl.push(url.replace(' ', '%20'));
        }
      }
      const allCollectionMetaUrl = [];
      await Promise.all(collectionInfoUrl.map(async url => {
        try {
          const data = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
            method: 'GET'
          }).then(resp => resp.json());
          const result = data[0];
          if (result && 'metadata' in result) {
            allCollectionMetaUrl.push({
              url: this.parseUrl(result === null || result === void 0 ? void 0 : result.metadata),
              id: result === null || result === void 0 ? void 0 : result.id
            });
          }
          if (data.length > 0) {
            return result;
          } else {
            return {};
          }
        } catch (e) {
          return {};
        }
      }));
      const allCollectionMeta = {};
      await Promise.all(allCollectionMetaUrl.map(async item => {
        let data = {};
        try {
          if (item.url) {
            data = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(item === null || item === void 0 ? void 0 : item.url, {
              method: 'GET'
            }).then(resp => resp.json());
          }
          if ('mediaUri' in data) {
            // rmrk v2.0
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            allCollectionMeta[item === null || item === void 0 ? void 0 : item.id] = {
              ...data,
              image: data.mediaUri
            };
          } else {
            allCollectionMeta[item === null || item === void 0 ? void 0 : item.id] = {
              ...data
            };
          }
        } catch (e) {
          console.error(item.url, e);
        }
      }));
      allCollections.forEach(item => {
        const parsedCollection = {
          collectionId: item.collectionId,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          collectionName: allCollectionMeta[item.collectionId] ? allCollectionMeta[item.collectionId].name : null,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          image: allCollectionMeta[item.collectionId] ? this.parseUrl(allCollectionMeta[item.collectionId].image) : null,
          chain: this.chain
        };
        const nftIds = [];
        allNfts.forEach(nft => {
          const nftCollectionId = nft === null || nft === void 0 ? void 0 : nft.collectionId;
          if (nftCollectionId === item.collectionId) {
            nftIds.push(nft === null || nft === void 0 ? void 0 : nft.id);
          }
        });
        params.updateCollection(this.chain, parsedCollection);
      });
    } catch (e) {
      console.error(`${this.chain}`, e);
    }
  }
  async handleNfts(params) {
    await Promise.all(this.addresses.map(address => this.handleNft(address, params)));
  }
  async fetchNfts(params) {
    try {
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/statemine_nft/index.ts":
/*!*****************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/statemine_nft/index.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StatemineNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0




class StatemineNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  // eslint-disable-next-line no-useless-constructor
  constructor(api, addresses, chain) {
    super(chain, api, addresses);
  }
  getMetadata(metadataUrl) {
    let url = metadataUrl;
    if (!(0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.isUrl)(metadataUrl)) {
      url = this.parseUrl(metadataUrl);
      if (!url || url.length === 0) {
        return undefined;
      }
    }
    return cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(res => res.json());
  }

  /**
   * Retrieve id of NFTs
   *
   * @returns the array of NFT Ids
   * @param addresses
   */
  async getNfts(addresses) {
    if (!this.substrateApi) {
      return [];
    }
    const assetIds = [];
    await Promise.all(addresses.map(async address => {
      // @ts-ignore
      const resp = await this.substrateApi.api.query.uniques.account.keys(address);
      if (resp) {
        for (const key of resp) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
          const data = key.toHuman();
          assetIds.push({
            classId: data[1],
            tokenId: this.parseTokenId(data[2])
          });
        }
      }
    }));
    return assetIds;
  }
  async getTokenDetails(assetId) {
    if (!this.substrateApi) {
      return null;
    }
    const {
      classId,
      tokenId
    } = assetId;
    const metadataNft = (await this.substrateApi.api.query.uniques.instanceMetadataOf(this.parseTokenId(classId), this.parseTokenId(tokenId))).toHuman();
    if (!(metadataNft !== null && metadataNft !== void 0 && metadataNft.data)) {
      return null;
    }

    // @ts-ignore
    return this.getMetadata(metadataNft === null || metadataNft === void 0 ? void 0 : metadataNft.data);
  }
  async getCollectionDetail(collectionId) {
    if (!this.substrateApi) {
      return null;
    }
    const collectionMetadata = (await this.substrateApi.api.query.uniques.classMetadataOf(collectionId)).toHuman();
    if (!(collectionMetadata !== null && collectionMetadata !== void 0 && collectionMetadata.data)) {
      return null;
    }

    // @ts-ignore
    return this.getMetadata(collectionMetadata === null || collectionMetadata === void 0 ? void 0 : collectionMetadata.data);
  }
  async handleNft(address, params) {
    // const start = performance.now();

    const assetIds = await this.getNfts([address]);
    try {
      if (!assetIds || assetIds.length === 0) {
        return;
      }
      const collectionIds = [];
      const nftIds = [];
      await Promise.all(assetIds.map(async assetId => {
        const parsedClassId = this.parseTokenId(assetId.classId);
        const parsedTokenId = this.parseTokenId(assetId.tokenId);
        if (!collectionIds.includes(parsedClassId)) {
          collectionIds.push(parsedClassId);
        }
        nftIds.push(parsedTokenId);
        const [tokenInfo, collectionMeta] = await Promise.all([this.getTokenDetails(assetId), this.getCollectionDetail(parseInt(parsedClassId))]);
        const parsedNft = {
          id: parsedTokenId,
          name: tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.name,
          description: tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.description,
          image: tokenInfo && tokenInfo.image ? this.parseUrl(tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.image) : undefined,
          collectionId: this.parseTokenId(parsedClassId),
          chain: this.chain,
          owner: address
        };
        params.updateItem(this.chain, parsedNft, address);
        const parsedCollection = {
          collectionId: parsedClassId,
          chain: this.chain,
          collectionName: collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.name,
          image: collectionMeta && collectionMeta.image ? this.parseUrl(collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.image) : undefined
        };
        params.updateCollection(this.chain, parsedCollection);
      }));
    } catch (e) {
      console.error(`${this.chain}`, e);
    }
  }
  async handleNfts(params) {
    await Promise.all(this.addresses.map(address => this.handleNft(address, params)));
  }
  async fetchNfts(params) {
    try {
      await this.connect();
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/statemint_nft/index.ts":
/*!*****************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/statemint_nft/index.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StatemintNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0




class StatemintNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  // eslint-disable-next-line no-useless-constructor
  constructor(api, addresses, chain) {
    super(chain, api, addresses);
  }
  getMetadata(metadataUrl) {
    let url = metadataUrl;
    if (!(0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.isUrl)(metadataUrl)) {
      url = this.parseUrl(metadataUrl);
      if (!url || url.length === 0) {
        return undefined;
      }
    }
    return cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(res => res.json());
  }

  /**
   * Retrieve id of NFTs
   *
   * @returns the array of NFT Ids
   * @param addresses
   */
  async getNfts(addresses) {
    if (!this.substrateApi) {
      return [];
    }
    const assetIds = [];
    await Promise.all(addresses.map(async address => {
      // @ts-ignore
      const resp = await this.substrateApi.api.query.nfts.account.keys(address);
      if (resp) {
        for (const key of resp) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
          const data = key.toHuman();
          assetIds.push({
            classId: data[1],
            tokenId: this.parseTokenId(data[2])
          });
        }
      }
    }));
    return assetIds;
  }
  async getTokenDetails(assetId) {
    if (!this.substrateApi) {
      return null;
    }
    const {
      classId,
      tokenId
    } = assetId;
    const metadataNft = (await this.substrateApi.api.query.nfts.itemMetadataOf(this.parseTokenId(classId), this.parseTokenId(tokenId))).toHuman();
    if (!(metadataNft !== null && metadataNft !== void 0 && metadataNft.data)) {
      return null;
    }

    // @ts-ignore
    return this.getMetadata(metadataNft === null || metadataNft === void 0 ? void 0 : metadataNft.data);
  }
  async getCollectionDetail(collectionId) {
    if (!this.substrateApi) {
      return null;
    }
    const collectionMetadata = (await this.substrateApi.api.query.nfts.collectionMetadataOf(collectionId)).toHuman();
    if (!(collectionMetadata !== null && collectionMetadata !== void 0 && collectionMetadata.data)) {
      return null;
    }

    // @ts-ignore
    return this.getMetadata(collectionMetadata === null || collectionMetadata === void 0 ? void 0 : collectionMetadata.data);
  }
  async handleNft(address, params) {
    // const start = performance.now();

    const assetIds = await this.getNfts([address]);
    try {
      if (!assetIds || assetIds.length === 0) {
        return;
      }
      const collectionIds = [];
      const nftIds = [];
      await Promise.all(assetIds.map(async assetId => {
        const parsedClassId = this.parseTokenId(assetId.classId);
        const parsedTokenId = this.parseTokenId(assetId.tokenId);
        if (!collectionIds.includes(parsedClassId)) {
          collectionIds.push(parsedClassId);
        }
        nftIds.push(parsedTokenId);
        const [tokenInfo, collectionMeta] = await Promise.all([this.getTokenDetails(assetId), this.getCollectionDetail(parseInt(parsedClassId))]);
        const parsedNft = {
          id: parsedTokenId,
          name: tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.name,
          description: tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.description,
          image: tokenInfo && tokenInfo.image ? this.parseUrl(tokenInfo === null || tokenInfo === void 0 ? void 0 : tokenInfo.image) : undefined,
          collectionId: this.parseTokenId(parsedClassId),
          chain: this.chain,
          owner: address
        };
        params.updateItem(this.chain, parsedNft, address);
        const parsedCollection = {
          collectionId: parsedClassId,
          chain: this.chain,
          collectionName: collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.name,
          image: collectionMeta && collectionMeta.image ? this.parseUrl(collectionMeta === null || collectionMeta === void 0 ? void 0 : collectionMeta.image) : undefined
        };
        params.updateCollection(this.chain, parsedCollection);
      }));
    } catch (e) {
      console.error(`${this.chain}`, e);
    }
  }
  async handleNfts(params) {
    await Promise.all(this.addresses.map(address => this.handleNft(address, params)));
  }
  async fetchNfts(params) {
    try {
      await this.connect();
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/transfer.ts":
/*!******************************************************!*\
  !*** ../extension-base/src/koni/api/nft/transfer.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "acalaGetExtrinsic": () => (/* binding */ acalaGetExtrinsic),
/* harmony export */   "getNftTransferExtrinsic": () => (/* binding */ getNftTransferExtrinsic),
/* harmony export */   "isRecipientSelf": () => (/* binding */ isRecipientSelf),
/* harmony export */   "quartzGetExtrinsic": () => (/* binding */ quartzGetExtrinsic),
/* harmony export */   "rmrkGetExtrinsic": () => (/* binding */ rmrkGetExtrinsic),
/* harmony export */   "statemineGetExtrinsic": () => (/* binding */ statemineGetExtrinsic),
/* harmony export */   "statemintGetExtrinsic": () => (/* binding */ statemintGetExtrinsic),
/* harmony export */   "uniqueGetExtrinsic": () => (/* binding */ uniqueGetExtrinsic)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/config */ "../extension-base/src/koni/api/nft/config.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



function isRecipientSelf(currentAddress, recipientAddress) {
  return (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(currentAddress, 1) === (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(recipientAddress, 1);
}
function acalaGetExtrinsic(substrateApi, senderAddress, recipientAddress, params) {
  try {
    const itemId = params.itemId;
    const collectionId = params.collectionId;
    return substrateApi.api.tx.nft.transfer(recipientAddress, [collectionId, itemId]);
  } catch (e) {
    console.error(e);
    return null;
  }
}
function rmrkGetExtrinsic(substrateApi, senderAddress, recipientAddress, params) {
  try {
    const remark = params.remark;
    if (!remark) {
      return null;
    }
    const parsedRemark = remark.concat(recipientAddress.replace(/\\s/g, ''));
    return substrateApi.api.tx.system.remark(parsedRemark);
  } catch (e) {
    console.error(e);
    return null;
  }
}
function uniqueGetExtrinsic(substrateApi, senderAddress, recipientAddress, params) {
  try {
    const itemId = params.itemId;
    const collectionId = params.collectionId;
    return substrateApi.api.tx.nft.transfer({
      Substrate: recipientAddress
    }, collectionId, itemId, 1);
  } catch (e) {
    console.error(e);
    return null;
  }
}
function quartzGetExtrinsic(substrateApi, senderAddress, recipientAddress, params) {
  try {
    const itemId = params.itemId;
    const collectionId = params.collectionId;
    return substrateApi.api.tx.unique.transfer({
      Substrate: recipientAddress
    }, collectionId, itemId, 1);
  } catch (e) {
    console.error(e);
    return null;
  }
}
function statemineGetExtrinsic(substrateApi, senderAddress, recipientAddress, params) {
  try {
    const itemId = params.itemId;
    const collectionId = params.collectionId;
    return substrateApi.api.tx.uniques.transfer(collectionId, itemId, recipientAddress);
  } catch (e) {
    console.error(e);
    return null;
  }
}
function statemintGetExtrinsic(substrateApi, senderAddress, recipientAddress, params) {
  try {
    const itemId = params.itemId;
    const collectionId = params.collectionId;
    return substrateApi.api.tx.nfts.transfer(collectionId, itemId, recipientAddress);
  } catch (e) {
    console.error(e);
    return null;
  }
}
function getNftTransferExtrinsic(networkKey, substrateApi, senderAddress, recipientAddress, params) {
  switch (networkKey) {
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.acala:
      return acalaGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.karura:
      return acalaGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.kusama:
      return rmrkGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.uniqueNft:
      return uniqueGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.quartz:
      return quartzGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.opal:
      return quartzGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.statemine:
      return statemineGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.statemint:
      return statemintGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.bitcountry:
      return acalaGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
    case _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_TRANSFER_SUBSTRATE_CHAIN_NAME.pioneer:
      return acalaGetExtrinsic(substrateApi, senderAddress, recipientAddress, params);
  }
  return null;
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/unique_nft/index.ts":
/*!**************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/unique_nft/index.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UniqueNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _protobuf__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./protobuf */ "../extension-base/src/koni/api/nft/unique_nft/protobuf.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0




// deprecated
class UniqueNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_0__.BaseNftApi {
  // eslint-disable-next-line no-useless-constructor
  constructor(api, addresses, chain) {
    super(chain, api, addresses);
  }
  async getCollectionCount() {
    if (!this.substrateApi) {
      return 0;
    }
    return await this.substrateApi.api.query.nft.createdCollectionCount();
  }

  /**
    * Retrieve address of NFTs
    *
    * @param collectionId: Id of the collection
    * @param owner: address of account
    * @returns the array of NFTs
    */
  async getAddressTokens(collectionId, owner) {
    if (!this.substrateApi) {
      return;
    }
    return (await this.substrateApi.api.query.nft.addressTokens(collectionId, owner)).toJSON();
  }

  /**
   * Retrieve NFT image URL according to the collection offchain schema
   *
   * @param collection
   * @param tokenId: Token ID
   * @returns the URL of the token image
   */
  getNftImageUrl(collection, tokenId) {
    if (!this.substrateApi) {
      return;
    }
    let url = '';

    // Get schema version and off-chain schema
    if (!collection) {
      return;
    }
    const schemaVersion = collection.SchemaVersion;
    const offchainSchema = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.hexToStr)(collection.OffchainSchema);
    if (schemaVersion === 'ImageURL') {
      // Replace {id} with token ID
      url = offchainSchema;
      url = url.replace('{id}', `${tokenId}`);
    } else {
      // TBD: Query image URL from the RESTful service
    }
    return url;
  }

  /**
   * Retrieve and deserialize properties
   *
   *
   * @param collection
   * @param tokenId: Token ID
   * @param locale: Output locale (default is "en")
   * @param collectionId
   * @returns tokenData: Token data object
   */
  async getNftData(collection, tokenId, locale = 'en', collectionId) {
    if (!this.substrateApi) {
      return;
    }
    const schemaRead = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.hexToStr)(collection.ConstOnChainSchema);
    const token = (await this.substrateApi.api.query.nft.nftItemList(collectionId, tokenId)).toJSON();
    const nftProps = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.hexToUTF16)(token.ConstData);
    const properties = (0,_protobuf__WEBPACK_IMPORTED_MODULE_2__.deserializeNft)(schemaRead, nftProps, locale);
    let url = '';

    // Get schema version and off-chain schema
    if (!collection) {
      return;
    }
    const schemaVersion = collection.SchemaVersion;
    const offchainSchema = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.hexToStr)(collection.OffchainSchema);
    if (schemaVersion === 'ImageURL') {
      // Replace {id} with token ID
      url = offchainSchema;
      url = url.replace('{id}', `${tokenId}`);
    } else {
      // TBD: Query image URL from the RESTful service
    }
    return {
      owner: token.Owner,
      prefix: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.hexToStr)(collection.TokenPrefix),
      collectionName: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.utf16ToString)(collection.Name),
      collectionDescription: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.utf16ToString)(collection.Description),
      properties: properties,
      image: url
    };
  }
  async handleNft(address, params) {
    // const start = performance.now();

    const collectionCount = await this.getCollectionCount();
    const addressTokenDict = [];
    const nftMap = {};
    const collectionMap = {};
    const allCollectionId = [];
    try {
      for (let i = 0; i < collectionCount; i++) {
        for (const addr of [address]) {
          addressTokenDict.push({
            i,
            account: addr
          });
        }
      }
      await Promise.all(addressTokenDict.map(async item => {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const nftIds = await this.getAddressTokens(item.i, item.account);

        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (nftIds && nftIds.length > 0) {
          if (!allCollectionId.includes(item.i)) {
            allCollectionId.push(item.i);
          }
          for (const nftId of nftIds) {
            nftMap[nftId] = item.i;
          }
        }
      }));
      await Promise.all(allCollectionId.map(async collectionId => {
        const collectionIdStr = collectionId.toString();

        // @ts-ignore
        const collection = (await this.substrateApi.api.query.nft.collectionById(collectionId)).toJSON();
        collectionMap[collectionIdStr] = collection;
        const nftIds = Object.entries(nftMap).filter(item => item[1] === collectionId).map(item => item[0]);
        const parsedCollection = {
          collectionId: collectionIdStr,
          chain: this.chain
        };
        await Promise.all(nftIds.map(async nft => {
          const tokenId = nft;
          const imageUrl = this.getNftImageUrl(collection, tokenId);
          const tokenData = await this.getNftData(collection, tokenId, 'en', collectionId);
          if (tokenData && imageUrl) {
            const parsedItem = {
              id: tokenId,
              name: tokenData.prefix + '#' + tokenId,
              image: this.parseUrl(imageUrl),
              externalUrl: `https://unqnft.io/#/market/token-details?collectionId=${collectionId}&tokenId=${tokenId}`,
              collectionId: collectionIdStr,
              properties: tokenData.properties,
              rarity: '',
              chain: this.chain,
              owner: address
            };
            if (!parsedCollection.collectionName) {
              parsedCollection.collectionName = tokenData.collectionName;
              parsedCollection.image = this.parseUrl(tokenData.image);
            }
            params.updateItem(this.chain, parsedItem, address);
            params.updateCollection(this.chain, parsedCollection);
          }
        }));
      }));
    } catch (e) {
      console.error(`${this.chain}`, e);
    }
  }
  async handleNfts(params) {
    await Promise.all(this.addresses.map(address => this.handleNft(address, params)));
  }
  async fetchNfts(params) {
    try {
      await this.connect();
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/unique_nft/protobuf.ts":
/*!*****************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/unique_nft/protobuf.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "deserializeNft": () => (/* binding */ deserializeNft)
/* harmony export */ });
/* harmony import */ var protobufjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs */ "../../node_modules/protobufjs/index.js");
/* harmony import */ var protobufjs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


function defineMessage(schema) {
  try {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    return protobufjs__WEBPACK_IMPORTED_MODULE_0__.Root.fromJSON(JSON.parse(schema));
  } catch (e) {
    console.log('Error parsing JSON schema', e);
    return null;
  }
}
function convertEnumToString(value, key, NFTMeta, locale) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  let result = value;
  try {
    var _NFTMeta$fields$key, _NFTMeta$fields$key$r;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
    const options = NFTMeta === null || NFTMeta === void 0 ? void 0 : (_NFTMeta$fields$key = NFTMeta.fields[key]) === null || _NFTMeta$fields$key === void 0 ? void 0 : (_NFTMeta$fields$key$r = _NFTMeta$fields$key.resolvedType) === null || _NFTMeta$fields$key$r === void 0 ? void 0 : _NFTMeta$fields$key$r.options;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
    const valueJsonComment = options[value];
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment
    const translationObject = JSON.parse(valueJsonComment);

    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (translationObject && translationObject[locale]) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
      result = translationObject[locale];
    }
  } catch (e) {
    console.log('Error parsing schema when trying to convert enum to string: ', e);
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  return result;
}
const deserializeNft = (schema, buffer, locale) => {
  const root = defineMessage(schema);
  if (root === null) {
    return root;
  }

  // Obtain the message type
  const NFTMeta = root.lookupType('onChainMetaData.NFTMeta');

  // Decode a Uint8Array (browser) or Buffer (node) to a message
  const message = NFTMeta.decode(buffer);

  // Maybe convert the message back to a plain object
  const objectItem = NFTMeta.toObject(message, {
    arrays: true,
    // populates empty arrays (repeated fields) even if defaults=false
    bytes: String,
    // bytes as base64 encoded strings
    defaults: true,
    // includes default values
    enums: String,
    // enums as string names
    longs: String,
    // longs as strings (requires long.js)
    objects: true,
    // populates empty objects (map fields) even if defaults=false
    oneofs: true
  });
  for (const key in objectItem) {
    var _NFTMeta$fields$key2, _NFTMeta$fields$key2$, _NFTMeta$fields$key3, _NFTMeta$fields$key3$;
    // eslint-disable-next-line @typescript-eslint/ban-types
    if (NFTMeta !== null && NFTMeta !== void 0 && (_NFTMeta$fields$key2 = NFTMeta.fields[key]) !== null && _NFTMeta$fields$key2 !== void 0 && (_NFTMeta$fields$key2$ = _NFTMeta$fields$key2.resolvedType) !== null && _NFTMeta$fields$key2$ !== void 0 && _NFTMeta$fields$key2$.options && Object.keys(NFTMeta === null || NFTMeta === void 0 ? void 0 : (_NFTMeta$fields$key3 = NFTMeta.fields[key]) === null || _NFTMeta$fields$key3 === void 0 ? void 0 : (_NFTMeta$fields$key3$ = _NFTMeta$fields$key3.resolvedType) === null || _NFTMeta$fields$key3$ === void 0 ? void 0 : _NFTMeta$fields$key3$.options).length > 0) {
      if (Array.isArray(objectItem[key])) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        const item = objectItem[key];
        objectItem[key] = [];
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        item.forEach(value => {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
          objectItem[key].push(convertEnumToString(value, key, NFTMeta, locale));
        });
      } else {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
        objectItem[key] = convertEnumToString(objectItem[key], key, NFTMeta, locale);
      }
    }
  }
  return objectItem;
};

/***/ }),

/***/ "../extension-base/src/koni/api/nft/vara_nft/index.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/vara_nft/index.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VaraNftApi": () => (/* binding */ VaraNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/config */ "../extension-base/src/koni/api/nft/config.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/addPrefix.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/u8a/toHex.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/decode.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0






class VaraNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_1__.BaseNftApi {
  endpoint = _subwallet_extension_base_koni_api_nft_config__WEBPACK_IMPORTED_MODULE_2__.VARA_SCAN_ENDPOINT;

  // eslint-disable-next-line no-useless-constructor
  constructor(chain, addresses) {
    super(chain, undefined, addresses);
  }
  static parseNftRequest(publicKey) {
    return {
      // eslint-disable-next-line
      query: `
        query MyQuery {
          accountById(id: "${publicKey}") {
            id
            nfts {
              id
              mediaUrl
              name
              tokenId
              attribUrl
              description
              collection {
                id
                name
                description
              }
            }
          }
        }
      `
    };
  }

  // private static parseNftCollectionRequest (collectionId: string) {
  //   return {
  //     // eslint-disable-next-line
  //     query: `query MyQuery { collections(where: {collection_id: {_eq: \"${collectionId}\"}}) { collection_id name } }`
  //   };
  // }

  async getNftByAccount(address) {
    var _result$data, _result$data$accountB;
    const publicKey = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__.hexAddPrefix)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_4__.u8aToHex)((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.decodeAddress)(address)));
    const resp = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(this.endpoint, {
      method: 'post',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(VaraNftApi.parseNftRequest(publicKey))
    });
    const result = await resp.json();

    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$accountB = _result$data.accountById) === null || _result$data$accountB === void 0 ? void 0 : _result$data$accountB.nfts;
  }
  async handleNfts(params) {
    try {
      await Promise.all(this.addresses.map(async address => {
        const nfts = await this.getNftByAccount(address);
        for (const nft of nfts) {
          const parsedNft = {
            id: nft.tokenId,
            chain: this.chain,
            owner: address,
            name: nft.name,
            image: this.parseUrl(nft.mediaUrl),
            description: nft.description,
            collectionId: nft.collection.id
          };
          const parsedCollection = {
            collectionId: nft.collection.id,
            chain: this.chain,
            collectionName: nft.collection.name
          };
          params.updateItem(this.chain, parsedNft, address);
          params.updateCollection(this.chain, parsedCollection);
        }
      }));
    } catch (e) {
      console.error(`Failed to fetch ${this.chain} nft`, e);
    }
  }
  async fetchNfts(params) {
    try {
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/wasm_nft/index.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/wasm_nft/index.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WasmNftApi": () => (/* binding */ WasmNftApi)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_domain__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/domain */ "../extension-base/src/koni/api/dotsama/domain.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/nft */ "../extension-base/src/koni/api/nft/nft.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/wasm_nft/utils */ "../extension-base/src/koni/api/nft/wasm_nft/utils.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm */ "../extension-base/src/koni/api/tokens/wasm/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm/utils */ "../extension-base/src/koni/api/tokens/wasm/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ "../../node_modules/axios/lib/axios.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0













// interface CollectionAttributes {
//   storedOnChain: boolean,
//   attributeList: string[] // list of attribute names
// }

async function isArtZeroFeaturedCollection(networkKey, contractAddress) {
  const timeout = new Promise(resolve => {
    const id = setTimeout(() => {
      clearTimeout(id);
      resolve(null);
    }, 3000);
  });
  const urlencoded = new URLSearchParams();
  urlencoded.append('collection_address', contractAddress);
  const collectionInfoPromise = new Promise(function (resolve) {
    cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()((0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.collectionApiFromArtZero)(networkKey), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: urlencoded
    }).then(resp => {
      resolve(resp.json());
    }).catch(console.error);
  });
  const collectionInfo = await Promise.race([timeout, collectionInfoPromise]);

  // @ts-ignore
  return collectionInfo !== null && (collectionInfo === null || collectionInfo === void 0 ? void 0 : collectionInfo.status) !== 'FAILED';
}
class WasmNftApi extends _subwallet_extension_base_koni_api_nft_nft__WEBPACK_IMPORTED_MODULE_2__.BaseNftApi {
  wasmContracts = [];
  constructor(api, addresses, chain) {
    super(chain, api, addresses);
  }
  setSmartContractNfts(wasmContracts) {
    this.wasmContracts = wasmContracts;
  }
  async isAttributeStoredOnChain(contractPromise) {
    var _this$substrateApi, _onChainAttributeCoun;
    if (!contractPromise.query['psp34Traits::getAttributeCount']) {
      return false;
    }

    // @ts-ignore
    const _onChainAttributeCount = await contractPromise.query['psp34Traits::getAttributeCount'](this.addresses[0], {
      gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__.getDefaultWeightV2)((_this$substrateApi = this.substrateApi) === null || _this$substrateApi === void 0 ? void 0 : _this$substrateApi.api)
    });
    const _attributeCount = _onChainAttributeCount === null || _onChainAttributeCount === void 0 ? void 0 : (_onChainAttributeCoun = _onChainAttributeCount.output) === null || _onChainAttributeCoun === void 0 ? void 0 : _onChainAttributeCoun.toJSON();
    const onChainAttributeCount = _onChainAttributeCount.output ? (_attributeCount === null || _attributeCount === void 0 ? void 0 : _attributeCount.ok) || (_attributeCount === null || _attributeCount === void 0 ? void 0 : _attributeCount.Ok) : '0';
    if (!_onChainAttributeCount.result.isOk) {
      return false;
    }
    return !!onChainAttributeCount && parseInt(onChainAttributeCount) !== 0;
  }
  parseFeaturedTokenUri(tokenUri) {
    if (!tokenUri || tokenUri.length === 0) {
      return undefined;
    }
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__.isUrl)(tokenUri)) {
      return tokenUri;
    }
    if (tokenUri.startsWith('/ipfs/')) {
      return tokenUri;
    }
    if (tokenUri.startsWith('ipfs://')) {
      return `/ipfs/${tokenUri.split('ipfs://')[1]}`;
    }
    if (!tokenUri.includes('ipfs://') && !tokenUri.includes('ipfs://ipfs/')) {
      return `/ipfs/${tokenUri}`;
    }
    if (tokenUri.includes('ipfs://ipfs/')) {
      return `/ipfs/${tokenUri.split('ipfs://ipfs/')[1]}`;
    }
    return tokenUri;
  }
  async parseFeaturedNftImage(tokenUri) {
    const parsedTokenUri = this.parseFeaturedTokenUri(tokenUri);
    if (!parsedTokenUri) {
      return undefined;
    }
    const nftItemImageSrc = `${(0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.itemImageApiFromArtZero)(this.chain)}?input=${parsedTokenUri}&size=500`;
    const collectionImageUrl = await (0,axios__WEBPACK_IMPORTED_MODULE_5__["default"])(nftItemImageSrc, {
      method: 'GET'
    });
    return collectionImageUrl.data;
  }
  async parseFeaturedCollectionImage(smartContract) {
    const urlencoded = new URLSearchParams();
    urlencoded.append('collection_address', smartContract);
    const resp = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()((0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.collectionDetailApiFromArtZero)(this.chain), {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      },
      body: urlencoded
    });
    const result = resp && resp.ok && (await resp.json());
    if (!result) {
      return;
    }

    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const collectionDetail = result.ret[0];
    const collectionImage = collectionDetail.avatarImage;
    const parsedCollectionImage = this.parseFeaturedTokenUri(collectionImage);
    if (!parsedCollectionImage) {
      return;
    }
    const collectionImageSrc = `${(0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.itemImageApiFromArtZero)(this.chain)}?input=${parsedCollectionImage}&size=500`;
    const collectionImageUrl = await (0,axios__WEBPACK_IMPORTED_MODULE_5__["default"])(collectionImageSrc, {
      method: 'GET'
    });
    return collectionImageUrl.data;
  }

  // private async getCollectionAttributes (contractPromise: ContractPromise): Promise<CollectionAttributes> {
  //   const _onChainAttributeCount = await contractPromise.query['psp34Traits::getAttributeCount'](this.addresses[0], { gasLimit: getDefaultWeightV2(this.substrateApi?.api as ApiPromise) });
  //   const onChainAttributeCount = _onChainAttributeCount.output ? _onChainAttributeCount.output.toString() : '0';
  //
  //   if (parseInt(onChainAttributeCount) === 0) {
  //     return {
  //       storedOnChain: false,
  //       attributeList: []
  //     };
  //   }
  //
  //   const attributeList: string[] = [];
  //   const attributeIndexes: number[] = [];
  //
  //   for (let i = 0; i < parseInt(onChainAttributeCount); i++) {
  //     attributeIndexes.push(i);
  //   }
  //
  //   await Promise.all(attributeIndexes.map(async (i) => {
  //     const _attributeByIndex = await contractPromise.query['psp34Traits::getAttributeName'](this.addresses[0], { gasLimit: getDefaultWeightV2(this.substrateApi?.api as ApiPromise) }, i);
  //
  //     if (_attributeByIndex.output) {
  //       const attributeName = _attributeByIndex.output.toString();
  //
  //       if (attributeName !== '') {
  //         attributeList.push(attributeName);
  //       }
  //     }
  //   }));
  //
  //   return {
  //     storedOnChain: true,
  //     attributeList
  //   };
  // }

  // private async processOnChainMetadata (contractPromise: ContractPromise, address: string, tokenIdObj: Record<string, string>, collectionAttributes: string[], isFeatured: boolean): Promise<NftItem> {
  //   const nftItem: NftItem = { chain: '', collectionId: '', id: '', owner: '' };
  //   const _attributeValues = await contractPromise.query['psp34Traits::getAttributes'](address, { gasLimit: getDefaultWeightV2(this.substrateApi?.api as ApiPromise) }, tokenIdObj, collectionAttributes);
  //
  //   if (_attributeValues.output) {
  //     const attributeValues = _attributeValues.output.toHuman() as string[];
  //
  //     const attributeDict: Record<string, any> = {};
  //
  //     for (let i = 0; i < collectionAttributes.length; i++) {
  //       const attributeName = collectionAttributes[i];
  //       const attributeValue = attributeValues[i] ? attributeValues[i] : '';
  //
  //       if (attributeName.toLowerCase() === 'nft_name') {
  //         nftItem.name = attributeValue;
  //       } else if (attributeName.toLowerCase() === 'description') {
  //         nftItem.description = attributeValue;
  //       } else if (attributeName.toLowerCase() === 'avatar') {
  //         if (isFeatured) {
  //           nftItem.image = await this.parseFeaturedNftImage(attributeValue);
  //         } else {
  //           nftItem.image = this.parseUrl(attributeValue);
  //         }
  //       } else {
  //         if (attributeValue !== '') {
  //           attributeDict[attributeName] = { value: attributeValue };
  //         }
  //       }
  //     }
  //
  //     nftItem.properties = attributeDict;
  //   }
  //
  //   if (isFeatured) {
  //     nftItem.externalUrl = ART_ZERO_EXTERNAL_URL;
  //   }
  //
  //   return nftItem;
  // }

  async processOnChainMetadata(tokenId, isFeatured, tokenUri) {
    const nftItem = {
      chain: '',
      collectionId: '',
      id: '',
      owner: '',
      name: tokenId
    };
    let itemDetail = false;
    if (isFeatured) {
      const parsedTokenUri = this.parseFeaturedTokenUri(tokenUri);
      if (parsedTokenUri) {
        const resp = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(`${(0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.ipfsApiFromArtZero)(this.chain)}?input=${parsedTokenUri}`);
        itemDetail = resp && resp.ok && (await resp.json());
      }
    } else {
      const parsedTokenUri = this.parseFeaturedTokenUri(tokenUri);
      const detailUrl = this.parseUrl(parsedTokenUri);
      if (detailUrl) {
        const resp = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(detailUrl);
        itemDetail = resp && resp.ok && (await resp.json());
      }
    }
    if (!itemDetail) {
      return nftItem;
    }
    nftItem.name = itemDetail.name;
    nftItem.description = itemDetail.description;
    const rawImageSrc = itemDetail.image ? itemDetail.image : itemDetail.image_url;
    if (isFeatured) {
      nftItem.image = await this.parseFeaturedNftImage(rawImageSrc);
      nftItem.externalUrl = (0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.externalUrlOnArtZero)(this.chain);
    } else {
      nftItem.image = this.parseUrl(rawImageSrc);
    }
    const propertiesMap = {};
    const traitList = itemDetail.attributes ? itemDetail.attributes : itemDetail.traits;
    if (traitList) {
      traitList.forEach(traitMap => {
        propertiesMap[traitMap.trait_type] = {
          value: traitMap.value
        };
      });
      nftItem.properties = propertiesMap;
    }
    return nftItem;
  }
  async processOffChainMetadata(contractPromise, address, tokenId, isFeatured) {
    var _this$substrateApi2;
    const nftItem = {
      chain: '',
      collectionId: '',
      id: '',
      owner: '',
      name: tokenId
    };
    const _isFeatured = isFeatured && !_subwallet_extension_base_koni_api_dotsama_domain__WEBPACK_IMPORTED_MODULE_6__.AZERO_DOMAIN_CONTRACTS.includes(contractPromise.address.toString());
    const _tokenUri = await contractPromise.query[(0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_7__.getTokenUriMethod)(contractPromise.address.toString())](address, {
      gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__.getDefaultWeightV2)((_this$substrateApi2 = this.substrateApi) === null || _this$substrateApi2 === void 0 ? void 0 : _this$substrateApi2.api)
    }, (0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_7__.isAzeroDomainNft)(contractPromise.address.toString()) ? {
      bytes: tokenId
    } : tokenId);
    if (_tokenUri.output) {
      let itemDetail = false;
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const _tokenUriObj = _tokenUri.output.toJSON();
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      const tokenUri = (0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_7__.isPinkRoboNft)(contractPromise.address.toString()) ? _tokenUriObj.ok.ok : _tokenUriObj.Ok || _tokenUriObj.ok;
      if (_isFeatured) {
        const parsedTokenUri = this.parseFeaturedTokenUri(tokenUri);
        if (parsedTokenUri) {
          const resp = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(`${(0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.ipfsApiFromArtZero)(this.chain)}?input=${parsedTokenUri}`);
          itemDetail = resp && resp.ok && (await resp.json());
        }
      } else {
        const parsedTokenUri = this.parseFeaturedTokenUri(tokenUri);
        const detailUrl = this.parseUrl(parsedTokenUri);
        if (detailUrl) {
          const resp = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(detailUrl);
          itemDetail = resp && resp.ok && (await resp.json());
          if (_subwallet_extension_base_koni_api_dotsama_domain__WEBPACK_IMPORTED_MODULE_6__.AZERO_DOMAIN_CONTRACTS.includes(contractPromise.address.toString())) {
            var _itemDetail;
            // @ts-ignore
            itemDetail = (_itemDetail = itemDetail) === null || _itemDetail === void 0 ? void 0 : _itemDetail.metadata;
          }
        }
      }
      if (!itemDetail) {
        return nftItem;
      }
      nftItem.name = itemDetail.name;
      nftItem.description = itemDetail.description;
      nftItem.externalUrl = itemDetail.external_url;
      const rawImageSrc = itemDetail.image ? itemDetail.image : itemDetail.image_url;
      if (_isFeatured) {
        nftItem.image = await this.parseFeaturedNftImage(rawImageSrc);
        nftItem.externalUrl = (0,_subwallet_extension_base_koni_api_nft_wasm_nft_utils__WEBPACK_IMPORTED_MODULE_1__.externalUrlOnArtZero)(this.chain);
      } else {
        nftItem.image = this.parseUrl(rawImageSrc);
      }
      const propertiesMap = {};
      const traitList = itemDetail.attributes || itemDetail.traits;
      if (traitList) {
        traitList.forEach(traitMap => {
          propertiesMap[traitMap.trait_type] = {
            value: traitMap.value
          };
        });
        nftItem.properties = propertiesMap;
      }
    }
    return nftItem;
  }
  async getItemsByCollection(contractPromise, tokenInfo, collectionName, nftParams, isFeatured, isAttributeOnChain) {
    let ownItem = false;
    let collectionImage;
    const smartContract = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_8__._getContractAddressOfToken)(tokenInfo);
    const nftOwnerMap = {};
    await Promise.all(this.addresses.map(async address => {
      var _this$substrateApi3, _balance$output;
      if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_9__.isEthereumAddress)(address)) {
        return;
      }
      const nftIds = [];
      const _balance = await contractPromise.query['psp34::balanceOf'](address, {
        gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__.getDefaultWeightV2)((_this$substrateApi3 = this.substrateApi) === null || _this$substrateApi3 === void 0 ? void 0 : _this$substrateApi3.api)
      }, address);
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const balanceJson = _balance === null || _balance === void 0 ? void 0 : (_balance$output = _balance.output) === null || _balance$output === void 0 ? void 0 : _balance$output.toJSON();
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      const balance = _balance.output ? balanceJson.ok || balanceJson.Ok : '0';
      if (parseInt(balance) === 0) {
        return;
      }
      const itemIndexes = [];
      for (let i = 0; i < parseInt(balance); i++) {
        itemIndexes.push(i);
      }
      try {
        await Promise.all(itemIndexes.map(async i => {
          var _this$substrateApi4;
          const _tokenByIndexResp = await contractPromise.query['psp34Enumerable::ownersTokenByIndex'](address, {
            gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__.getDefaultWeightV2)((_this$substrateApi4 = this.substrateApi) === null || _this$substrateApi4 === void 0 ? void 0 : _this$substrateApi4.api)
          }, address, i);
          if (_tokenByIndexResp.output) {
            const rawTokenId = _tokenByIndexResp.output.toHuman();
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            let tokenIdObj = rawTokenId.Ok.Ok || rawTokenId.ok.ok; // capital O, not normal o
            const tokenId = Object.values(tokenIdObj)[0].replaceAll(',', '');
            if ((0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_7__.isAzeroDomainNft)(contractPromise.address.toString())) {
              tokenIdObj = {
                bytes: tokenId
              };
            }
            nftIds.push(tokenId);
            let tokenUri;
            try {
              if (isAttributeOnChain) {
                var _this$substrateApi5, _tokenUri$output;
                const _tokenUri = await contractPromise.query['psp34Traits::getAttributes'](address, {
                  gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_3__.getDefaultWeightV2)((_this$substrateApi5 = this.substrateApi) === null || _this$substrateApi5 === void 0 ? void 0 : _this$substrateApi5.api)
                }, tokenIdObj, ['metadata']);
                const tokenUriObj = (_tokenUri$output = _tokenUri.output) === null || _tokenUri$output === void 0 ? void 0 : _tokenUri$output.toJSON();
                tokenUri = (tokenUriObj.ok || tokenUriObj.Ok)[0];
              }
            } catch (e) {
              console.debug(e);
            }
            if (!tokenUri) {
              const nftItem = await this.processOffChainMetadata(contractPromise, address, tokenId, isFeatured);
              nftItem.collectionId = smartContract;
              nftItem.chain = this.chain;
              nftItem.type = _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_10__._AssetType.PSP34;
              nftItem.id = tokenId;
              nftItem.owner = address;
              nftItem.onChainOption = tokenIdObj;
              nftItem.originAsset = tokenInfo.slug;
              nftParams.updateItem(this.chain, nftItem, address);
              ownItem = true;
              if (!isFeatured && !collectionImage && nftItem.image) {
                collectionImage = nftItem.image; // No default collection image
              }
            } else {
              const nftItem = await this.processOnChainMetadata(tokenId, false, tokenUri);
              nftItem.collectionId = smartContract;
              nftItem.chain = this.chain;
              nftItem.type = _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_10__._AssetType.PSP34;
              nftItem.id = tokenId;
              nftItem.owner = address;
              nftItem.onChainOption = tokenIdObj;
              nftItem.originAsset = tokenInfo.slug;
              nftParams.updateItem(this.chain, nftItem, address);
              ownItem = true;
              if (!isFeatured && !collectionImage && nftItem.image) {
                collectionImage = nftItem.image; // No default collection image
              }
            }
          }
        }));

        nftOwnerMap[address] = nftIds;
      } catch (e) {
        console.error(`${this.chain}`, e);
      }
    }));
    if (isFeatured) {
      const featuredCollectionImage = await this.parseFeaturedCollectionImage(smartContract);
      if (featuredCollectionImage) {
        collectionImage = featuredCollectionImage;
      }
    }
    if (ownItem) {
      const nftCollection = {
        collectionId: smartContract,
        collectionName,
        image: collectionImage || undefined,
        chain: this.chain,
        originAsset: tokenInfo.slug
      };
      nftParams.updateCollection(this.chain, nftCollection);
    }
  }
  async fetchNfts(params) {
    try {
      await this.handleNfts(params);
    } catch (e) {
      return 0;
    }
    return 1;
  }
  async handleNfts(params) {
    var _this$substrateApi6;
    if (!this.wasmContracts || this.wasmContracts.length === 0) {
      return;
    }
    await this.connect(); // might not be necessary

    const apiPromise = (_this$substrateApi6 = this.substrateApi) === null || _this$substrateApi6 === void 0 ? void 0 : _this$substrateApi6.api;
    await Promise.all(this.wasmContracts.map(async tokenInfo => {
      const contractPromise = (0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_7__.getPSP34ContractPromise)(apiPromise, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_8__._getContractAddressOfToken)(tokenInfo));
      const [isAttributeOnChain, isCollectionFeatured] = await Promise.all([this.isAttributeStoredOnChain(contractPromise), isArtZeroFeaturedCollection(this.chain, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_8__._getContractAddressOfToken)(tokenInfo))]);
      return await this.getItemsByCollection(contractPromise, tokenInfo, tokenInfo.name, params, isCollectionFeatured, isAttributeOnChain);
    }));
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/nft/wasm_nft/utils.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/koni/api/nft/wasm_nft/utils.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A0_ART_ZERO_COLLECTION_API": () => (/* binding */ A0_ART_ZERO_COLLECTION_API),
/* harmony export */   "A0_ART_ZERO_EXTERNAL_URL": () => (/* binding */ A0_ART_ZERO_EXTERNAL_URL),
/* harmony export */   "A0_ART_ZERO_IMAGE_API": () => (/* binding */ A0_ART_ZERO_IMAGE_API),
/* harmony export */   "A0_ART_ZERO_IPFS_API": () => (/* binding */ A0_ART_ZERO_IPFS_API),
/* harmony export */   "A0_ART_ZERO_TESTNET_COLLECTION_API": () => (/* binding */ A0_ART_ZERO_TESTNET_COLLECTION_API),
/* harmony export */   "A0_ART_ZERO_TESTNET_IMAGE_API": () => (/* binding */ A0_ART_ZERO_TESTNET_IMAGE_API),
/* harmony export */   "ART_ZERO_TESTNET_IPFS_API": () => (/* binding */ ART_ZERO_TESTNET_IPFS_API),
/* harmony export */   "ASTAR_ART_ZERO_COLLECTION_API": () => (/* binding */ ASTAR_ART_ZERO_COLLECTION_API),
/* harmony export */   "ASTAR_ART_ZERO_EXTERNAL_URL": () => (/* binding */ ASTAR_ART_ZERO_EXTERNAL_URL),
/* harmony export */   "ASTAR_ART_ZERO_IMAGE_API": () => (/* binding */ ASTAR_ART_ZERO_IMAGE_API),
/* harmony export */   "ASTAR_ART_ZERO_IPFS_API": () => (/* binding */ ASTAR_ART_ZERO_IPFS_API),
/* harmony export */   "ASTAR_ART_ZERO_TESTNET_COLLECTION_API": () => (/* binding */ ASTAR_ART_ZERO_TESTNET_COLLECTION_API),
/* harmony export */   "ASTAR_ART_ZERO_TESTNET_IMAGE_API": () => (/* binding */ ASTAR_ART_ZERO_TESTNET_IMAGE_API),
/* harmony export */   "ASTAR_ART_ZERO_TESTNET_IPFS_API": () => (/* binding */ ASTAR_ART_ZERO_TESTNET_IPFS_API),
/* harmony export */   "collectionApiFromArtZero": () => (/* binding */ collectionApiFromArtZero),
/* harmony export */   "collectionDetailApiFromArtZero": () => (/* binding */ collectionDetailApiFromArtZero),
/* harmony export */   "externalUrlOnArtZero": () => (/* binding */ externalUrlOnArtZero),
/* harmony export */   "ipfsApiFromArtZero": () => (/* binding */ ipfsApiFromArtZero),
/* harmony export */   "itemImageApiFromArtZero": () => (/* binding */ itemImageApiFromArtZero)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0

const A0_ART_ZERO_TESTNET_IMAGE_API = 'https://a0-test-api.artzero.io/getImage';
const ASTAR_ART_ZERO_TESTNET_IMAGE_API = 'https://astar-test-api.artzero.io/getImage';
const ART_ZERO_TESTNET_IPFS_API = 'https://a0-test-api.artzero.io/getJSON';
const ASTAR_ART_ZERO_TESTNET_IPFS_API = 'https://astar-test-api.artzero.io/getJSON';
const A0_ART_ZERO_TESTNET_COLLECTION_API = 'https://a0-test-api.artzero.io/getCollectionByAddress';
const ASTAR_ART_ZERO_TESTNET_COLLECTION_API = 'https://astar-test-api.artzero.io/getCollectionByAddress';
const A0_ART_ZERO_IMAGE_API = 'https://a0-api.artzero.io/getImage';
const ASTAR_ART_ZERO_IMAGE_API = 'https://astar-api.artzero.io/getImage';
const A0_ART_ZERO_IPFS_API = 'https://a0-api.artzero.io/getJSON';
const ASTAR_ART_ZERO_IPFS_API = 'https://astar-api.artzero.io/getJSON';
const A0_ART_ZERO_COLLECTION_API = 'https://a0-api.artzero.io/getCollectionByAddress';
const ASTAR_ART_ZERO_COLLECTION_API = 'https://astar-api.artzero.io/getCollectionByAddress';
const A0_ART_ZERO_EXTERNAL_URL = 'https://a0.artzero.io/#/marketplace';
const ASTAR_ART_ZERO_EXTERNAL_URL = 'https://astar.artzero.io/#/marketplace';
function collectionApiFromArtZero(chain) {
  if (chain === 'alephTest') {
    return A0_ART_ZERO_TESTNET_COLLECTION_API;
  }
  if (chain === 'astar') {
    return ASTAR_ART_ZERO_COLLECTION_API;
  }
  return A0_ART_ZERO_COLLECTION_API;
}
function itemImageApiFromArtZero(chain) {
  if (chain === 'alephTest') {
    return A0_ART_ZERO_TESTNET_IMAGE_API;
  }
  if (chain === 'astar') {
    return ASTAR_ART_ZERO_IMAGE_API;
  }
  return A0_ART_ZERO_IMAGE_API;
}
function collectionDetailApiFromArtZero(chain) {
  if (chain === 'alephTest') {
    return A0_ART_ZERO_TESTNET_COLLECTION_API;
  }
  if (chain === 'astar') {
    return ASTAR_ART_ZERO_COLLECTION_API;
  }
  return A0_ART_ZERO_COLLECTION_API;
}
function ipfsApiFromArtZero(chain) {
  if (chain === 'alephTest') {
    return ART_ZERO_TESTNET_IPFS_API;
  }
  if (chain === 'astar') {
    return ASTAR_ART_ZERO_IPFS_API;
  }
  return A0_ART_ZERO_IPFS_API;
}
function externalUrlOnArtZero(chain) {
  if (chain === 'astar') {
    return ASTAR_ART_ZERO_EXTERNAL_URL;
  }
  return A0_ART_ZERO_EXTERNAL_URL;
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/bonding/amplitude.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/koni/api/staking/bonding/amplitude.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAmplitudeBondingExtrinsic": () => (/* binding */ getAmplitudeBondingExtrinsic),
/* harmony export */   "getAmplitudeClaimRewardExtrinsic": () => (/* binding */ getAmplitudeClaimRewardExtrinsic),
/* harmony export */   "getAmplitudeCollatorsInfo": () => (/* binding */ getAmplitudeCollatorsInfo),
/* harmony export */   "getAmplitudeNominatorMetadata": () => (/* binding */ getAmplitudeNominatorMetadata),
/* harmony export */   "getAmplitudeStakingMetadata": () => (/* binding */ getAmplitudeStakingMetadata),
/* harmony export */   "getAmplitudeUnbondingExtrinsic": () => (/* binding */ getAmplitudeUnbondingExtrinsic),
/* harmony export */   "getAmplitudeWithdrawalExtrinsic": () => (/* binding */ getAmplitudeWithdrawalExtrinsic),
/* harmony export */   "subscribeAmplitudeNominatorMetadata": () => (/* binding */ subscribeAmplitudeNominatorMetadata),
/* harmony export */   "subscribeAmplitudeStakingMetadata": () => (/* binding */ subscribeAmplitudeStakingMetadata)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/utils */ "../extension-base/src/koni/api/staking/bonding/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/bn/consts.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0







function subscribeAmplitudeStakingMetadata(chain, substrateApi, callback) {
  return substrateApi.api.query.parachainStaking.round(_round => {
    const roundObj = _round.toHuman();
    const round = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.parseRawNumber)(roundObj.current);
    const maxDelegations = substrateApi.api.consts.parachainStaking.maxDelegationsPerRound.toString();
    const minDelegatorStake = substrateApi.api.consts.parachainStaking.minDelegatorStake.toString();
    const unstakingDelay = substrateApi.api.consts.parachainStaking.stakeDuration.toString();
    const _blockPerRound = substrateApi.api.consts.parachainStaking.defaultBlocksPerRound.toString();
    const blockPerRound = parseFloat(_blockPerRound);
    const blockDuration = (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP[chain] || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP["default"]) / blockPerRound; // in hours
    const unstakingPeriod = blockDuration * parseInt(unstakingDelay);
    callback(chain, {
      chain,
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
      era: round,
      minStake: minDelegatorStake,
      maxValidatorPerNominator: parseInt(maxDelegations),
      maxWithdrawalRequestPerValidator: 1,
      // by default
      allowCancelUnstaking: true,
      unstakingPeriod
    });
  });
}
async function getAmplitudeStakingMetadata(chain, substrateApi) {
  const chainApi = await substrateApi.isReady;
  const _round = (await chainApi.api.query.parachainStaking.round()).toHuman();
  const round = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.parseRawNumber)(_round.current);
  const maxDelegations = chainApi.api.consts.parachainStaking.maxDelegationsPerRound.toString();
  const minDelegatorStake = chainApi.api.consts.parachainStaking.minDelegatorStake.toString();
  const unstakingDelay = chainApi.api.consts.parachainStaking.stakeDuration.toString();
  const _blockPerRound = chainApi.api.consts.parachainStaking.defaultBlocksPerRound.toString();
  const blockPerRound = parseFloat(_blockPerRound);
  const blockDuration = (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP[chain] || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP["default"]) / blockPerRound; // in hours
  const unstakingPeriod = blockDuration * parseInt(unstakingDelay);
  return {
    chain,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
    era: round,
    minStake: minDelegatorStake,
    maxValidatorPerNominator: parseInt(maxDelegations),
    maxWithdrawalRequestPerValidator: 1,
    // by default
    allowCancelUnstaking: true,
    unstakingPeriod
  };
}
async function subscribeAmplitudeNominatorMetadata(chainInfo, address, substrateApi, delegatorState, unstakingInfo) {
  const nominationList = [];
  const unstakingList = [];
  const minDelegatorStake = substrateApi.api.consts.parachainStaking.minDelegatorStake.toString();
  let activeStake = '0';
  if (delegatorState) {
    // delegatorState can be null while unstaking all
    const identityInfo = substrateApi.api.query.identity ? (await substrateApi.api.query.identity.identityOf(delegatorState.owner)).toPrimitive() : undefined;
    const identity = identityInfo ? (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_3__.parseIdentity)(identityInfo) : undefined;
    activeStake = delegatorState.amount.toString();
    const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(activeStake);
    let delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_EARNING;
    if (bnActiveStake.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_5__.BN_ZERO) && bnActiveStake.gte(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(minDelegatorStake))) {
      delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.EARNING_REWARD;
    }
    nominationList.push({
      status: delegationStatus,
      chain: chainInfo.slug,
      validatorAddress: delegatorState.owner,
      activeStake: delegatorState.amount.toString(),
      validatorMinStake: '0',
      hasUnstaking: !!unstakingInfo && Object.values(unstakingInfo).length > 0,
      validatorIdentity: identity
    });
  }
  if (unstakingInfo && Object.values(unstakingInfo).length > 0) {
    const _currentBlockInfo = await substrateApi.api.rpc.chain.getHeader();
    const currentBlockInfo = _currentBlockInfo.toPrimitive();
    const currentBlockNumber = currentBlockInfo.number;
    const _blockPerRound = substrateApi.api.consts.parachainStaking.defaultBlocksPerRound.toString();
    const blockPerRound = parseFloat(_blockPerRound);
    const nearestUnstakingBlock = Object.keys(unstakingInfo)[0];
    const nearestUnstakingAmount = Object.values(unstakingInfo)[0];
    const blockDuration = (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP[chainInfo.slug] || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP["default"]) / blockPerRound; // in hours

    const isClaimable = parseInt(nearestUnstakingBlock) - currentBlockNumber < 0;
    const remainingBlock = parseInt(nearestUnstakingBlock) - currentBlockNumber;
    const waitingTime = remainingBlock * blockDuration;
    unstakingList.push({
      chain: chainInfo.slug,
      status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.UNLOCKING,
      claimable: nearestUnstakingAmount.toString(),
      waitingTime,
      validatorAddress: (delegatorState === null || delegatorState === void 0 ? void 0 : delegatorState.owner) || undefined
    });
  }
  const stakingStatus = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_3__.getStakingStatusByNominations)(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(activeStake), nominationList);
  return {
    chain: chainInfo.slug,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
    status: stakingStatus,
    address: address,
    activeStake: activeStake,
    nominations: nominationList,
    unstakings: unstakingList
  };
}
async function getAmplitudeNominatorMetadata(chainInfo, address, substrateApi) {
  if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__.isEthereumAddress)(address)) {
    return;
  }
  const chain = chainInfo.slug;
  const chainApi = await substrateApi.isReady;
  const nominationList = [];
  const unstakingList = [];
  const [_delegatorState, _unstakingInfo] = await Promise.all([chainApi.api.query.parachainStaking.delegatorState(address), chainApi.api.query.parachainStaking.unstaking(address)]);
  const minDelegatorStake = chainApi.api.consts.parachainStaking.minDelegatorStake.toString();
  const delegatorState = _delegatorState.toPrimitive();
  const unstakingInfo = _unstakingInfo.toPrimitive();
  if (!delegatorState && !unstakingInfo) {
    return {
      chain: chainInfo.slug,
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
      address,
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING,
      activeStake: '0',
      nominations: [],
      unstakings: []
    };
  }
  let activeStake = '0';
  if (delegatorState) {
    // delegatorState can be null while unstaking all
    const identityInfo = chainApi.api.query.identity ? (await chainApi.api.query.identity.identityOf(delegatorState.owner)).toPrimitive() : undefined;
    const identity = identityInfo ? (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_3__.parseIdentity)(identityInfo) : undefined;
    activeStake = delegatorState.amount.toString();
    const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(activeStake);
    let delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_EARNING;
    if (bnActiveStake.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_5__.BN_ZERO) && bnActiveStake.gte(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(minDelegatorStake))) {
      delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.EARNING_REWARD;
    }
    nominationList.push({
      status: delegationStatus,
      chain,
      validatorAddress: delegatorState.owner,
      activeStake: delegatorState.amount.toString(),
      validatorMinStake: '0',
      hasUnstaking: !!unstakingInfo && Object.values(unstakingInfo).length > 0,
      validatorIdentity: identity
    });
  }
  if (unstakingInfo && Object.values(unstakingInfo).length > 0) {
    const _currentBlockInfo = await chainApi.api.rpc.chain.getHeader();
    const currentBlockInfo = _currentBlockInfo.toPrimitive();
    const currentBlockNumber = currentBlockInfo.number;
    const _blockPerRound = chainApi.api.consts.parachainStaking.defaultBlocksPerRound.toString();
    const blockPerRound = parseFloat(_blockPerRound);
    const nearestUnstakingBlock = Object.keys(unstakingInfo)[0];
    const nearestUnstakingAmount = Object.values(unstakingInfo)[0];
    const blockDuration = (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP[chain] || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_ERA_LENGTH_MAP["default"]) / blockPerRound; // in hours

    const isClaimable = parseInt(nearestUnstakingBlock) - currentBlockNumber < 0;
    const remainingBlock = parseInt(nearestUnstakingBlock) - currentBlockNumber;
    const waitingTime = remainingBlock * blockDuration;
    unstakingList.push({
      chain,
      status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.UNLOCKING,
      claimable: nearestUnstakingAmount.toString(),
      waitingTime,
      validatorAddress: (delegatorState === null || delegatorState === void 0 ? void 0 : delegatorState.owner) || undefined
    });
  }
  if (nominationList.length === 0 && unstakingList.length === 0) {
    return;
  }
  const stakingStatus = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_3__.getStakingStatusByNominations)(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(activeStake), nominationList);
  return {
    chain,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
    status: stakingStatus,
    address: address,
    activeStake: activeStake,
    nominations: nominationList,
    unstakings: unstakingList
  };
}
async function getAmplitudeCollatorsInfo(chain, substrateApi) {
  const chainApi = await substrateApi.isReady;
  const [_allCollators, _inflationConfig] = await Promise.all([chainApi.api.query.parachainStaking.candidatePool.entries(), chainApi.api.query.parachainStaking.inflationConfig()]);
  const maxDelegatorsPerCollator = chainApi.api.consts.parachainStaking.maxDelegatorsPerCollator.toString();
  const inflationConfig = _inflationConfig.toHuman();
  const rawDelegatorReturn = inflationConfig.delegator.rewardRate.annual;
  const delegatorReturn = parseFloat(rawDelegatorReturn.split('%')[0]);
  const allCollators = [];
  for (const _collator of _allCollators) {
    const collatorInfo = _collator[1].toPrimitive();
    const bnTotalStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(collatorInfo.total);
    const bnOwnStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(collatorInfo.stake);
    const bnOtherStake = bnTotalStake.sub(bnOwnStake);
    allCollators.push({
      address: collatorInfo.id,
      totalStake: bnTotalStake.toString(),
      ownStake: bnOwnStake.toString(),
      otherStake: bnOtherStake.toString(),
      nominatorCount: collatorInfo.delegators.length,
      commission: 0,
      expectedReturn: delegatorReturn,
      blocked: false,
      isVerified: false,
      minBond: '0',
      chain,
      isCrowded: collatorInfo.delegators.length >= parseInt(maxDelegatorsPerCollator)
    });
  }
  return allCollators;
}
async function getAmplitudeBondingExtrinsic(substrateApi, amount, selectedValidatorInfo, nominatorMetadata) {
  const chainApi = await substrateApi.isReady;
  const binaryAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(amount);
  if (!nominatorMetadata) {
    return chainApi.api.tx.parachainStaking.joinDelegators(selectedValidatorInfo.address, binaryAmount);
  }
  const {
    bondedValidators
  } = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_3__.getBondedValidators)(nominatorMetadata.nominations);
  if (!bondedValidators.includes((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(selectedValidatorInfo.address, 0))) {
    return chainApi.api.tx.parachainStaking.joinDelegators(selectedValidatorInfo.address, binaryAmount);
  } else {
    const _params = chainApi.api.tx.parachainStaking.delegatorStakeMore.toJSON();
    const paramsCount = _params.args.length;
    if (paramsCount === 2) {
      // detect number of params
      return chainApi.api.tx.parachainStaking.delegatorStakeMore(selectedValidatorInfo.address, binaryAmount);
    } else {
      return chainApi.api.tx.parachainStaking.delegatorStakeMore(binaryAmount);
    }
  }
}
async function getAmplitudeUnbondingExtrinsic(substrateApi, amount, nominatorMetadata, collatorAddress) {
  const chainApi = await substrateApi.isReady;
  const binaryAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_4___default())(amount);
  const unstakeAll = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_3__.isUnstakeAll)(collatorAddress, nominatorMetadata.nominations, amount);
  if (!unstakeAll) {
    const _params = chainApi.api.tx.parachainStaking.delegatorStakeMore.toJSON();
    const paramsCount = _params.args.length;
    if (paramsCount === 2) {
      return chainApi.api.tx.parachainStaking.delegatorStakeLess(collatorAddress, binaryAmount);
    } else {
      return chainApi.api.tx.parachainStaking.delegatorStakeLess(binaryAmount);
    }
  } else {
    return chainApi.api.tx.parachainStaking.leaveDelegators();
  }
}
async function getAmplitudeWithdrawalExtrinsic(substrateApi, address) {
  const chainApi = await substrateApi.isReady;
  return chainApi.api.tx.parachainStaking.unlockUnstaked(address);
}
async function getAmplitudeClaimRewardExtrinsic(substrateApi) {
  const chainApi = await substrateApi.isReady;
  return chainApi.api.tx.utility.batch([chainApi.api.tx.parachainStaking.incrementDelegatorRewards(), chainApi.api.tx.parachainStaking.claimRewards()]);
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/bonding/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/koni/api/staking/bonding/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBondingExtrinsic": () => (/* binding */ getBondingExtrinsic),
/* harmony export */   "getCancelWithdrawalExtrinsic": () => (/* binding */ getCancelWithdrawalExtrinsic),
/* harmony export */   "getChainStakingMetadata": () => (/* binding */ getChainStakingMetadata),
/* harmony export */   "getClaimRewardExtrinsic": () => (/* binding */ getClaimRewardExtrinsic),
/* harmony export */   "getNominationPoolsInfo": () => (/* binding */ getNominationPoolsInfo),
/* harmony export */   "getNominatorMetadata": () => (/* binding */ getNominatorMetadata),
/* harmony export */   "getUnbondingExtrinsic": () => (/* binding */ getUnbondingExtrinsic),
/* harmony export */   "getValidatorsInfo": () => (/* binding */ getValidatorsInfo),
/* harmony export */   "getWithdrawalExtrinsic": () => (/* binding */ getWithdrawalExtrinsic),
/* harmony export */   "subscribeEssentialChainStakingMetadata": () => (/* binding */ subscribeEssentialChainStakingMetadata),
/* harmony export */   "validateBondingCondition": () => (/* binding */ validateBondingCondition),
/* harmony export */   "validateUnbondingCondition": () => (/* binding */ validateUnbondingCondition)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/amplitude */ "../extension-base/src/koni/api/staking/bonding/amplitude.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/astar */ "../extension-base/src/koni/api/staking/bonding/astar.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/paraChain */ "../extension-base/src/koni/api/staking/bonding/paraChain.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/relayChain */ "../extension-base/src/koni/api/staking/bonding/relayChain.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0







// all addresses must be converted to its chain format

function validateUnbondingCondition(nominatorMetadata, amount, chain, chainStakingMetadata, selectedValidator) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.relay.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.validateRelayUnbondingCondition)(amount, chainStakingMetadata, nominatorMetadata);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.validateParaChainUnbondingCondition)(amount, nominatorMetadata, chainStakingMetadata, selectedValidator);
}
function validateBondingCondition(chainInfo, amount, selectedValidators, address, chainStakingMetadata, nominatorMetadata) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.relay.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.validateRelayBondingCondition)(chainInfo, amount, selectedValidators, address, chainStakingMetadata, nominatorMetadata);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.validateParaChainBondingCondition)(chainInfo, amount, selectedValidators, address, chainStakingMetadata, nominatorMetadata);
}
async function getChainStakingMetadata(chainInfo, substrateApi) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.astar.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.getAstarStakingMetadata)(chainInfo.slug, substrateApi);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.getParaChainStakingMetadata)(chainInfo.slug, substrateApi);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.getAmplitudeStakingMetadata)(chainInfo.slug, substrateApi);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayChainStakingMetadata)(chainInfo, substrateApi);
}
async function getNominatorMetadata(chainInfo, address, substrateApi) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.astar.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.getAstarNominatorMetadata)(chainInfo, address, substrateApi);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.getParaChainNominatorMetadata)(chainInfo, address, substrateApi);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.getAmplitudeNominatorMetadata)(chainInfo, address, substrateApi);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayChainNominatorMetadata)(chainInfo, address, substrateApi);
}
async function getValidatorsInfo(networkKey, substrateApi, decimals, chainStakingMetadata) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(networkKey)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.getParachainCollatorsInfo)(networkKey, substrateApi);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.astar.includes(networkKey)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.getAstarDappsInfo)(networkKey, substrateApi);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(networkKey)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.getAmplitudeCollatorsInfo)(networkKey, substrateApi);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayValidatorsInfo)(networkKey, substrateApi, decimals, chainStakingMetadata);
}
async function getNominationPoolsInfo(chain, substrateApi) {
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayPoolsInfo)(chain, substrateApi);
}
async function getBondingExtrinsic(chainInfo, amount, selectedValidators, substrateApi, address, nominatorMetadata) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.getParaBondingExtrinsic)(chainInfo, substrateApi, amount, selectedValidators[0], nominatorMetadata); // only select 1 validator at a time
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.astar.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.getAstarBondingExtrinsic)(substrateApi, amount, selectedValidators[0]);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(chainInfo.slug)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.getAmplitudeBondingExtrinsic)(substrateApi, amount, selectedValidators[0], nominatorMetadata);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayBondingExtrinsic)(substrateApi, amount, selectedValidators, chainInfo, address, nominatorMetadata);
}
async function getUnbondingExtrinsic(nominatorMetadata, amount, chain, substrateApi, selectedValidator) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.getParaUnbondingExtrinsic)(substrateApi, amount, nominatorMetadata, selectedValidator);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.astar.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.getAstarUnbondingExtrinsic)(substrateApi, amount, selectedValidator);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.getAmplitudeUnbondingExtrinsic)(substrateApi, amount, nominatorMetadata, selectedValidator);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayUnbondingExtrinsic)(substrateApi, amount, nominatorMetadata);
}
async function getWithdrawalExtrinsic(substrateApi, chain, nominatorMetadata, validatorAddress) {
  if (nominatorMetadata.type === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.StakingType.POOLED) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getPoolingWithdrawalExtrinsic)(substrateApi, nominatorMetadata);
  }
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.getParaWithdrawalExtrinsic)(substrateApi, nominatorMetadata.address, validatorAddress);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.astar.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.getAstarWithdrawalExtrinsic)(substrateApi);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.getAmplitudeWithdrawalExtrinsic)(substrateApi, nominatorMetadata.address);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayWithdrawalExtrinsic)(substrateApi, nominatorMetadata.address);
}
async function getClaimRewardExtrinsic(substrateApi, chain, address, stakingType, bondReward = true) {
  if (stakingType === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.StakingType.POOLED) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getPoolingClaimRewardExtrinsic)(substrateApi, bondReward);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.getAmplitudeClaimRewardExtrinsic)(substrateApi);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.getAstarClaimRewardExtrinsic)(substrateApi, address);
}
async function getCancelWithdrawalExtrinsic(substrateApi, chain, selectedUnstaking) {
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(chain)) {
    return (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.getParaCancelWithdrawalExtrinsic)(substrateApi, selectedUnstaking);
  }
  return (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.getRelayCancelWithdrawalExtrinsic)(substrateApi, selectedUnstaking);
}
function subscribeEssentialChainStakingMetadata(substrateApiMap, chainInfoMap, callback) {
  const unsubList = [];

  // eslint-disable-next-line @typescript-eslint/no-misused-promises
  Object.values(chainInfoMap).forEach(async chainInfo => {
    if (!substrateApiMap[chainInfo.slug]) {
      return;
    }
    const substrateApi = await substrateApiMap[chainInfo.slug].isReady;
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.astar.includes(chainInfo.slug)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_3__.subscribeAstarStakingMetadata)(chainInfo.slug, substrateApi, callback);

      // @ts-ignore
      unsubList.push(unsub);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.para.includes(chainInfo.slug)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_2__.subscribeParaChainStakingMetadata)(chainInfo.slug, substrateApi, callback);

      // @ts-ignore
      unsubList.push(unsub);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.amplitude.includes(chainInfo.slug)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_4__.subscribeAmplitudeStakingMetadata)(chainInfo.slug, substrateApi, callback);

      // @ts-ignore
      unsubList.push(unsub);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._STAKING_CHAIN_GROUP.relay.includes(chainInfo.slug)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_1__.subscribeRelayChainStakingMetadata)(chainInfo, substrateApi, callback);

      // @ts-ignore
      unsubList.push(unsub);
    }
  });
  return () => {
    unsubList.forEach(unsub => {
      unsub && unsub();
    });
  };
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/bonding/paraChain.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/koni/api/staking/bonding/paraChain.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getParaBondingExtrinsic": () => (/* binding */ getParaBondingExtrinsic),
/* harmony export */   "getParaCancelWithdrawalExtrinsic": () => (/* binding */ getParaCancelWithdrawalExtrinsic),
/* harmony export */   "getParaChainNominatorMetadata": () => (/* binding */ getParaChainNominatorMetadata),
/* harmony export */   "getParaChainStakingMetadata": () => (/* binding */ getParaChainStakingMetadata),
/* harmony export */   "getParaUnbondingExtrinsic": () => (/* binding */ getParaUnbondingExtrinsic),
/* harmony export */   "getParaWithdrawalExtrinsic": () => (/* binding */ getParaWithdrawalExtrinsic),
/* harmony export */   "getParachainCollatorsInfo": () => (/* binding */ getParachainCollatorsInfo),
/* harmony export */   "getTuringCancelCompoundingExtrinsic": () => (/* binding */ getTuringCancelCompoundingExtrinsic),
/* harmony export */   "getTuringCompoundExtrinsic": () => (/* binding */ getTuringCompoundExtrinsic),
/* harmony export */   "subscribeParaChainNominatorMetadata": () => (/* binding */ subscribeParaChainNominatorMetadata),
/* harmony export */   "subscribeParaChainStakingMetadata": () => (/* binding */ subscribeParaChainStakingMetadata),
/* harmony export */   "validateParaChainBondingCondition": () => (/* binding */ validateParaChainBondingCondition),
/* harmony export */   "validateParaChainUnbondingCondition": () => (/* binding */ validateParaChainUnbondingCondition)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/TransactionError */ "../extension-base/src/background/errors/TransactionError.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/utils */ "../extension-base/src/koni/api/staking/bonding/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/bn/consts.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0









function validateParaChainUnbondingCondition(amount, nominatorMetadata, chainStakingMetadata, selectedCollator) {
  const errors = [];
  let targetNomination;
  for (const nomination of nominatorMetadata.nominations) {
    if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.isSameAddress)(nomination.validatorAddress, selectedCollator)) {
      targetNomination = nomination;
      break;
    }
  }
  if (!targetNomination) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.BasicTxErrorType.INTERNAL_ERROR));
    return errors;
  }
  const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(targetNomination.activeStake);
  const bnRemainingStake = bnActiveStake.sub(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(amount));
  const bnChainMinStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(chainStakingMetadata.minStake || '0');
  const bnCollatorMinStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(targetNomination.validatorMinStake || '0');
  const bnMinStake = _polkadot_util__WEBPACK_IMPORTED_MODULE_3___default().max(bnCollatorMinStake, bnChainMinStake);
  const existUnstakeErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getExistUnstakeErrorMessage)(chainStakingMetadata.chain);
  if (targetNomination.hasUnstaking) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.EXIST_UNSTAKING_REQUEST, existUnstakeErrorMessage));
  }
  if (!(bnRemainingStake.isZero() || bnRemainingStake.gte(bnMinStake))) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.INVALID_ACTIVE_STAKE));
  }
  return errors;
}
function validateParaChainBondingCondition(chainInfo, amount, selectedCollators, address, chainStakingMetadata, nominatorMetadata) {
  const errors = [];
  const selectedCollator = selectedCollators[0];
  let bnTotalStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(amount);
  const bnChainMinStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(chainStakingMetadata.minStake || '0');
  const bnCollatorMinStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(selectedCollator.minBond || '0');
  const bnMinStake = bnCollatorMinStake > bnChainMinStake ? bnCollatorMinStake : bnChainMinStake;
  const minStakeErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getMinStakeErrorMessage)(chainInfo, bnMinStake);
  const maxValidatorErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getMaxValidatorErrorMessage)(chainInfo, chainStakingMetadata.maxValidatorPerNominator);
  const existUnstakeErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getExistUnstakeErrorMessage)(chainInfo.slug, true);
  if (!nominatorMetadata || nominatorMetadata.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING) {
    if (!bnTotalStake.gte(bnMinStake)) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.NOT_ENOUGH_MIN_STAKE, minStakeErrorMessage));
    }
    return errors;
  }
  const {
    bondedValidators
  } = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getBondedValidators)(nominatorMetadata.nominations);
  const parsedSelectedCollatorAddress = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(selectedCollator.address, 0);
  if (!bondedValidators.includes(parsedSelectedCollatorAddress)) {
    // new delegation
    if (!bnTotalStake.gte(bnMinStake)) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.NOT_ENOUGH_MIN_STAKE, minStakeErrorMessage));
    }
    const delegationCount = nominatorMetadata.nominations.length + 1;
    if (delegationCount > chainStakingMetadata.maxValidatorPerNominator) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.EXCEED_MAX_NOMINATIONS, maxValidatorErrorMessage));
    }
  } else {
    let currentDelegationAmount = '0';
    let hasUnstaking = false;
    for (const delegation of nominatorMetadata.nominations) {
      if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(delegation.validatorAddress, 0) === parsedSelectedCollatorAddress) {
        currentDelegationAmount = delegation.activeStake;
        hasUnstaking = !!delegation.hasUnstaking && delegation.hasUnstaking;
        break;
      }
    }
    bnTotalStake = bnTotalStake.add(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(currentDelegationAmount));
    if (!bnTotalStake.gte(bnMinStake)) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.NOT_ENOUGH_MIN_STAKE, minStakeErrorMessage));
    }
    if (hasUnstaking) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_1__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingTxErrorType.EXIST_UNSTAKING_REQUEST, existUnstakeErrorMessage));
    }
  }
  return errors;
}
function subscribeParaChainStakingMetadata(chain, substrateApi, callback) {
  return substrateApi.api.query.parachainStaking.round(_round => {
    var _substrateApi$api$con, _substrateApi$api$con2, _substrateApi$api$con3;
    const roundObj = _round.toHuman();
    const round = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.parseRawNumber)(roundObj.current);
    const maxDelegations = (_substrateApi$api$con = substrateApi.api.consts) === null || _substrateApi$api$con === void 0 ? void 0 : (_substrateApi$api$con2 = _substrateApi$api$con.parachainStaking) === null || _substrateApi$api$con2 === void 0 ? void 0 : (_substrateApi$api$con3 = _substrateApi$api$con2.maxDelegationsPerDelegator) === null || _substrateApi$api$con3 === void 0 ? void 0 : _substrateApi$api$con3.toString();
    const unstakingDelay = substrateApi.api.consts.parachainStaking.delegationBondLessDelay.toString();
    const unstakingPeriod = parseInt(unstakingDelay) * (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chain] || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP["default"]);
    callback(chain, {
      chain,
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
      era: round,
      minStake: '0',
      maxValidatorPerNominator: parseInt(maxDelegations),
      maxWithdrawalRequestPerValidator: 1,
      // by default
      allowCancelUnstaking: true,
      unstakingPeriod
    });
  });
}
async function getParaChainStakingMetadata(chain, substrateApi) {
  const chainApi = await substrateApi.isReady;
  const _round = (await chainApi.api.query.parachainStaking.round()).toHuman();
  const round = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.parseRawNumber)(_round.current);
  const maxDelegations = chainApi.api.consts.parachainStaking.maxDelegationsPerDelegator.toString();
  const unstakingDelay = chainApi.api.consts.parachainStaking.delegationBondLessDelay.toString();
  let _unvestedAllocation;
  if (chainApi.api.query.vesting && chainApi.api.query.vesting.totalUnvestedAllocation) {
    _unvestedAllocation = await chainApi.api.query.vesting.totalUnvestedAllocation();
  }
  const [_totalStake, _totalIssuance, _inflation] = await Promise.all([chainApi.api.query.parachainStaking.staked(round), chainApi.api.query.balances.totalIssuance(), chainApi.api.query.parachainStaking.inflationConfig()]);
  let unvestedAllocation;
  if (_unvestedAllocation) {
    const rawUnvestedAllocation = _unvestedAllocation.toString();
    unvestedAllocation = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(rawUnvestedAllocation);
  }
  const totalStake = _totalStake ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(_totalStake.toString()) : _polkadot_util__WEBPACK_IMPORTED_MODULE_6__.BN_ZERO;
  const totalIssuance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(_totalIssuance.toString());
  if (unvestedAllocation) {
    totalIssuance.add(unvestedAllocation); // for Turing network, read more at https://hackmd.io/@sbAqOuXkRvyiZPOB3Ryn6Q/Sypr3ZJh5
  }

  const inflationConfig = _inflation.toHuman();
  const inflation = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getParaCurrentInflation)((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.parseRawNumber)(totalStake.toString()), inflationConfig);
  const unstakingPeriod = parseInt(unstakingDelay) * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chain];
  return {
    chain,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
    era: round,
    inflation,
    minStake: '0',
    maxValidatorPerNominator: parseInt(maxDelegations),
    maxWithdrawalRequestPerValidator: 1,
    // by default
    allowCancelUnstaking: true,
    unstakingPeriod
  };
}
async function subscribeParaChainNominatorMetadata(chainInfo, address, substrateApi, delegatorState) {
  const nominationList = [];
  const unstakingMap = {};
  let bnTotalActiveStake = _polkadot_util__WEBPACK_IMPORTED_MODULE_6__.BN_ZERO;
  const _roundInfo = await substrateApi.api.query.parachainStaking.round();
  const roundInfo = _roundInfo.toPrimitive();
  const currentRound = roundInfo.current;
  await Promise.all(delegatorState.delegations.map(async delegation => {
    var _substrateApi$api$que;
    const [_delegationScheduledRequests, _identity, _collatorInfo] = await Promise.all([substrateApi.api.query.parachainStaking.delegationScheduledRequests(delegation.owner), (_substrateApi$api$que = substrateApi.api.query.identity) === null || _substrateApi$api$que === void 0 ? void 0 : _substrateApi$api$que.identityOf(delegation.owner), substrateApi.api.query.parachainStaking.candidateInfo(delegation.owner)]);
    const collatorInfo = _collatorInfo.toPrimitive();
    const minDelegation = collatorInfo === null || collatorInfo === void 0 ? void 0 : collatorInfo.lowestTopDelegationAmount.toString();
    const identityInfo = _identity === null || _identity === void 0 ? void 0 : _identity.toHuman();
    const delegationScheduledRequests = _delegationScheduledRequests.toPrimitive();
    const identity = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parseIdentity)(identityInfo);
    let hasUnstaking = false;
    let delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_EARNING;

    // parse unstaking info
    if (delegationScheduledRequests) {
      for (const scheduledRequest of delegationScheduledRequests) {
        if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(scheduledRequest.delegator, 0) === (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(address, 0)) {
          // add network prefix
          const isClaimable = scheduledRequest.whenExecutable - currentRound < 0;
          const remainingEra = scheduledRequest.whenExecutable - currentRound;
          const waitingTime = remainingEra * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chainInfo.slug];
          const claimable = Object.values(scheduledRequest.action)[0];
          unstakingMap[delegation.owner] = {
            chain: chainInfo.slug,
            status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.UNLOCKING,
            validatorAddress: delegation.owner,
            claimable: claimable.toString(),
            waitingTime
          };
          hasUnstaking = true;
          break; // only handle 1 scheduledRequest per collator
        }
      }
    }

    const bnStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(delegation.amount);
    const bnUnstakeBalance = unstakingMap[delegation.owner] ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(unstakingMap[delegation.owner].claimable) : _polkadot_util__WEBPACK_IMPORTED_MODULE_6__.BN_ZERO;
    const bnActiveStake = bnStake.sub(bnUnstakeBalance);
    if (bnActiveStake.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_6__.BN_ZERO) && bnActiveStake.gte(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(minDelegation))) {
      delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.EARNING_REWARD;
    }
    bnTotalActiveStake = bnTotalActiveStake.add(bnActiveStake);
    nominationList.push({
      chain: chainInfo.slug,
      status: delegationStatus,
      validatorAddress: delegation.owner,
      validatorIdentity: identity,
      activeStake: bnActiveStake.toString(),
      hasUnstaking,
      validatorMinStake: collatorInfo.lowestTopDelegationAmount.toString()
    });
  }));

  // await Promise.all(nominationList.map(async (nomination) => {
  //   const _collatorInfo = await substrateApi.api.query.parachainStaking.candidateInfo(nomination.validatorAddress);
  //   const collatorInfo = _collatorInfo.toPrimitive() as unknown as ParachainStakingCandidateMetadata;
  //
  //   nomination.validatorMinStake = collatorInfo.lowestTopDelegationAmount.toString();
  // }));

  const stakingStatus = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getStakingStatusByNominations)(bnTotalActiveStake, nominationList);
  return {
    chain: chainInfo.slug,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
    status: stakingStatus,
    address: address,
    activeStake: bnTotalActiveStake.toString(),
    nominations: nominationList,
    unstakings: Object.values(unstakingMap)
  };
}
async function getParaChainNominatorMetadata(chainInfo, address, substrateApi) {
  if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._isChainEvmCompatible)(chainInfo) && !(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_8__.isEthereumAddress)(address)) {
    return;
  }
  const chain = chainInfo.slug;
  const chainApi = await substrateApi.isReady;
  const nominationList = [];
  const unstakingMap = {};
  const _delegatorState = await chainApi.api.query.parachainStaking.delegatorState(address);
  const delegatorState = _delegatorState.toPrimitive();
  if (!delegatorState) {
    return {
      chain: chainInfo.slug,
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
      address,
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING,
      activeStake: '0',
      nominations: [],
      unstakings: []
    };
  }
  let bnTotalActiveStake = _polkadot_util__WEBPACK_IMPORTED_MODULE_6__.BN_ZERO;
  await Promise.all(delegatorState.delegations.map(async delegation => {
    const [_delegationScheduledRequests, _identity, _roundInfo, _collatorInfo] = await Promise.all([chainApi.api.query.parachainStaking.delegationScheduledRequests(delegation.owner), chainApi.api.query.identity.identityOf(delegation.owner), chainApi.api.query.parachainStaking.round(), chainApi.api.query.parachainStaking.candidateInfo(delegation.owner)]);
    const rawCollatorInfo = _collatorInfo.toHuman();
    const minDelegation = (rawCollatorInfo === null || rawCollatorInfo === void 0 ? void 0 : rawCollatorInfo.lowestTopDelegationAmount).replaceAll(',', '');
    const identityInfo = _identity.toHuman();
    const roundInfo = _roundInfo.toPrimitive();
    const delegationScheduledRequests = _delegationScheduledRequests.toPrimitive();
    const currentRound = roundInfo.current;
    const identity = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parseIdentity)(identityInfo);
    let hasUnstaking = false;
    let delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_EARNING;

    // parse unstaking info
    if (delegationScheduledRequests) {
      for (const scheduledRequest of delegationScheduledRequests) {
        if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(scheduledRequest.delegator, 0) === (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(address, 0)) {
          // add network prefix
          const isClaimable = scheduledRequest.whenExecutable - currentRound < 0;
          const remainingEra = scheduledRequest.whenExecutable - (currentRound + 1);
          const waitingTime = remainingEra * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chain];
          const claimable = Object.values(scheduledRequest.action)[0];
          unstakingMap[delegation.owner] = {
            chain,
            status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.UnstakingStatus.UNLOCKING,
            validatorAddress: delegation.owner,
            claimable: claimable.toString(),
            waitingTime: waitingTime
          };
          hasUnstaking = true;
          break; // only handle 1 scheduledRequest per collator
        }
      }
    }

    const bnStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(delegation.amount);
    const bnUnstakeBalance = unstakingMap[delegation.owner] ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(unstakingMap[delegation.owner].claimable) : _polkadot_util__WEBPACK_IMPORTED_MODULE_6__.BN_ZERO;
    const bnActiveStake = bnStake.sub(bnUnstakeBalance);
    if (bnActiveStake.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_6__.BN_ZERO) && bnActiveStake.gte(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(minDelegation))) {
      delegationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.EARNING_REWARD;
    }
    bnTotalActiveStake = bnTotalActiveStake.add(bnActiveStake);
    nominationList.push({
      chain,
      status: delegationStatus,
      validatorAddress: delegation.owner,
      validatorIdentity: identity,
      activeStake: bnActiveStake.toString(),
      hasUnstaking
    });
  }));
  await Promise.all(nominationList.map(async nomination => {
    const _collatorInfo = await chainApi.api.query.parachainStaking.candidateInfo(nomination.validatorAddress);
    const collatorInfo = _collatorInfo.toPrimitive();
    nomination.validatorMinStake = collatorInfo.lowestTopDelegationAmount.toString();
  }));
  const stakingStatus = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getStakingStatusByNominations)(bnTotalActiveStake, nominationList);
  return {
    chain,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
    status: stakingStatus,
    address: address,
    activeStake: bnTotalActiveStake.toString(),
    nominations: nominationList,
    unstakings: Object.values(unstakingMap)
  };
}
async function getParachainCollatorsInfo(chain, substrateApi) {
  const apiProps = await substrateApi.isReady;
  const allCollators = [];
  const [_allCollators, _collatorCommission] = await Promise.all([apiProps.api.query.parachainStaking.candidateInfo.entries(), apiProps.api.query.parachainStaking.collatorCommission()]);
  const maxDelegationPerCollator = apiProps.api.consts.parachainStaking.maxTopDelegationsPerCandidate.toString();
  const rawCollatorCommission = _collatorCommission.toHuman();
  const collatorCommission = parseFloat(rawCollatorCommission.split('%')[0]);
  for (const collator of _allCollators) {
    const _collatorAddress = collator[0].toHuman();
    const collatorAddress = _collatorAddress[0];
    const collatorInfo = collator[1].toPrimitive();
    const bnTotalStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(collatorInfo.totalCounted);
    const bnOwnStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(collatorInfo.bond);
    const bnOtherStake = bnTotalStake.sub(bnOwnStake);
    const bnMinBond = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(collatorInfo.lowestTopDelegationAmount);
    allCollators.push({
      commission: 0,
      expectedReturn: 0,
      address: collatorAddress,
      totalStake: bnTotalStake.toString(),
      ownStake: bnOwnStake.toString(),
      otherStake: bnOtherStake.toString(),
      nominatorCount: collatorInfo.delegationCount,
      blocked: false,
      isVerified: false,
      minBond: bnMinBond.toString(),
      chain,
      isCrowded: parseInt(maxDelegationPerCollator) > 0
    });
  }
  const extraInfoMap = {};
  await Promise.all(allCollators.map(async collator => {
    var _apiProps$api$query, _apiProps$api$query$i;
    const [_info, _identity] = await Promise.all([apiProps.api.query.parachainStaking.candidateInfo(collator.address), (_apiProps$api$query = apiProps.api.query) === null || _apiProps$api$query === void 0 ? void 0 : (_apiProps$api$query$i = _apiProps$api$query.identity) === null || _apiProps$api$query$i === void 0 ? void 0 : _apiProps$api$query$i.identityOf(collator.address) // some chains might not have identity pallet
    ]);
    const rawInfo = _info.toHuman();
    const rawIdentity = _identity ? _identity.toHuman() : null;
    const active = (rawInfo === null || rawInfo === void 0 ? void 0 : rawInfo.status) === 'Active';
    let isReasonable = false;
    let identity;
    if (rawIdentity !== null) {
      // Check if identity is eth address
      isReasonable = rawIdentity.judgements.length > 0;
      identity = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parseIdentity)(rawIdentity);
    }
    extraInfoMap[collator.address] = {
      identity,
      isVerified: isReasonable,
      active
    };
  }));
  for (const validator of allCollators) {
    validator.blocked = !extraInfoMap[validator.address].active;
    validator.identity = extraInfoMap[validator.address].identity;
    validator.isVerified = extraInfoMap[validator.address].isVerified;
    // @ts-ignore
    validator.commission = collatorCommission;
  }
  return allCollators;
}
async function getParaBondingExtrinsic(chainInfo, substrateApi, amount, selectedCollatorInfo, nominatorMetadata) {
  const apiPromise = await substrateApi.isReady;
  const binaryAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(amount);
  if (!nominatorMetadata) {
    return apiPromise.api.tx.parachainStaking.delegate(selectedCollatorInfo.address, binaryAmount, new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(selectedCollatorInfo.nominatorCount), 0);
  }
  const {
    bondedValidators,
    nominationCount
  } = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getBondedValidators)(nominatorMetadata.nominations);
  const parsedSelectedCollatorAddress = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.reformatAddress)(selectedCollatorInfo.address, 0);
  if (!bondedValidators.includes(parsedSelectedCollatorAddress)) {
    return apiPromise.api.tx.parachainStaking.delegate(selectedCollatorInfo.address, binaryAmount, new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(selectedCollatorInfo.nominatorCount), nominationCount);
  } else {
    return apiPromise.api.tx.parachainStaking.delegatorBondMore(selectedCollatorInfo.address, binaryAmount);
  }
}
async function getParaUnbondingExtrinsic(substrateApi, amount, nominatorMetadata, selectedValidator) {
  const apiPromise = await substrateApi.isReady;
  const binaryAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(amount);
  const unstakeAll = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.isUnstakeAll)(selectedValidator, nominatorMetadata.nominations, amount);
  if (!unstakeAll) {
    return apiPromise.api.tx.parachainStaking.scheduleDelegatorBondLess(selectedValidator, binaryAmount);
  } else {
    return apiPromise.api.tx.parachainStaking.scheduleRevokeDelegation(selectedValidator);
  }
}
async function getParaWithdrawalExtrinsic(substrateApi, address, collatorAddress) {
  const chainApi = await substrateApi.isReady;
  return chainApi.api.tx.parachainStaking.executeDelegationRequest(address, collatorAddress);
}
async function getTuringCompoundExtrinsic(substrateApi, address, collatorAddress, accountMinimum, bondedAmount) {
  const apiPromise = await substrateApi.isReady;

  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
  const _optimalCompounding = await apiPromise.api.rpc.automationTime.calculateOptimalAutostaking(bondedAmount, collatorAddress);

  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
  const optimalCompounding = _optimalCompounding.toHuman();
  const compoundingPeriod = parseInt(optimalCompounding.period); // in days

  const frequency = compoundingPeriod * 24 * 60 * 60; // in seconds
  const timestamp = new Date();
  timestamp.setDate(timestamp.getDate() + compoundingPeriod);
  timestamp.setHours(timestamp.getHours() + Math.round(timestamp.getMinutes() / 60));
  timestamp.setMinutes(0, 0, 0);
  const startTime = Math.floor(timestamp.valueOf() / 1000); // must be in seconds

  return apiPromise.api.tx.automationTime.scheduleAutoCompoundDelegatedStakeTask(startTime.toString(), frequency.toString(), collatorAddress, accountMinimum);
}
async function getTuringCancelCompoundingExtrinsic(substrateApi, taskId) {
  const apiPromise = await substrateApi.isReady;
  return apiPromise.api.tx.automationTime.cancelTask(taskId);
}
async function getParaCancelWithdrawalExtrinsic(substrateApi, selectedUnstaking) {
  const chainApi = await substrateApi.isReady;
  return chainApi.api.tx.parachainStaking.cancelDelegationRequest(selectedUnstaking.validatorAddress);
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/bonding/relayChain.ts":
/*!********************************************************************!*\
  !*** ../extension-base/src/koni/api/staking/bonding/relayChain.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPoolingBondingExtrinsic": () => (/* binding */ getPoolingBondingExtrinsic),
/* harmony export */   "getPoolingClaimRewardExtrinsic": () => (/* binding */ getPoolingClaimRewardExtrinsic),
/* harmony export */   "getPoolingUnbondingExtrinsic": () => (/* binding */ getPoolingUnbondingExtrinsic),
/* harmony export */   "getPoolingWithdrawalExtrinsic": () => (/* binding */ getPoolingWithdrawalExtrinsic),
/* harmony export */   "getRelayBondingExtrinsic": () => (/* binding */ getRelayBondingExtrinsic),
/* harmony export */   "getRelayCancelWithdrawalExtrinsic": () => (/* binding */ getRelayCancelWithdrawalExtrinsic),
/* harmony export */   "getRelayChainNominatorMetadata": () => (/* binding */ getRelayChainNominatorMetadata),
/* harmony export */   "getRelayChainPoolMemberMetadata": () => (/* binding */ getRelayChainPoolMemberMetadata),
/* harmony export */   "getRelayChainStakingMetadata": () => (/* binding */ getRelayChainStakingMetadata),
/* harmony export */   "getRelayPoolsInfo": () => (/* binding */ getRelayPoolsInfo),
/* harmony export */   "getRelayUnbondingExtrinsic": () => (/* binding */ getRelayUnbondingExtrinsic),
/* harmony export */   "getRelayValidatorsInfo": () => (/* binding */ getRelayValidatorsInfo),
/* harmony export */   "getRelayWithdrawalExtrinsic": () => (/* binding */ getRelayWithdrawalExtrinsic),
/* harmony export */   "subscribeRelayChainNominatorMetadata": () => (/* binding */ subscribeRelayChainNominatorMetadata),
/* harmony export */   "subscribeRelayChainPoolMemberMetadata": () => (/* binding */ subscribeRelayChainPoolMemberMetadata),
/* harmony export */   "subscribeRelayChainStakingMetadata": () => (/* binding */ subscribeRelayChainStakingMetadata),
/* harmony export */   "validatePoolBondingCondition": () => (/* binding */ validatePoolBondingCondition),
/* harmony export */   "validateRelayBondingCondition": () => (/* binding */ validateRelayBondingCondition),
/* harmony export */   "validateRelayUnbondingCondition": () => (/* binding */ validateRelayUnbondingCondition)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/TransactionError */ "../extension-base/src/background/errors/TransactionError.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/utils */ "../extension-base/src/koni/api/staking/bonding/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/bn/consts.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0










function validateRelayUnbondingCondition(amount, chainStakingMetadata, nominatorMetadata) {
  const errors = [];
  const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(nominatorMetadata.activeStake);
  const bnRemainingStake = bnActiveStake.sub(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(amount));
  const minStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(chainStakingMetadata.minJoinNominationPool || '0');
  if (!(bnRemainingStake.isZero() || bnRemainingStake.gte(minStake))) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.INVALID_ACTIVE_STAKE));
  }
  if (nominatorMetadata.unstakings.length > chainStakingMetadata.maxWithdrawalRequestPerValidator) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.EXCEED_MAX_UNSTAKING, (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('You cannot unstake more than {{number}} times', {
      replace: {
        number: chainStakingMetadata.maxWithdrawalRequestPerValidator
      }
    })));
  }
  return errors;
}
function validatePoolBondingCondition(chainInfo, amount, selectedPool, address, chainStakingMetadata, nominatorMetadata) {
  // cannot stake when unstake all
  // amount >= min stake
  const errors = [];
  let bnTotalStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(amount);
  const bnMinStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(chainStakingMetadata.minJoinNominationPool || '0');
  const minStakeErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getMinStakeErrorMessage)(chainInfo, bnMinStake);
  const existUnstakeErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getExistUnstakeErrorMessage)(chainInfo.slug, true);
  if (selectedPool.state !== 'Open') {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.INACTIVE_NOMINATION_POOL));
  }
  if (nominatorMetadata) {
    const bnCurrentActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(nominatorMetadata.activeStake);
    bnTotalStake = bnTotalStake.add(bnCurrentActiveStake);
    if (nominatorMetadata.unstakings.length > 0 && bnCurrentActiveStake.isZero()) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.EXIST_UNSTAKING_REQUEST, existUnstakeErrorMessage));
    }
  }
  if (!bnTotalStake.gte(bnMinStake)) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.NOT_ENOUGH_MIN_STAKE, minStakeErrorMessage));
  }
  return errors;
}
function validateRelayBondingCondition(chainInfo, amount, selectedValidators, address, chainStakingMetadata, nominatorMetadata) {
  const errors = [];
  let bnTotalStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(amount);
  const bnMinStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(chainStakingMetadata.minStake);
  const minStakeErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getMinStakeErrorMessage)(chainInfo, bnMinStake);
  const maxValidatorErrorMessage = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getMaxValidatorErrorMessage)(chainInfo, chainStakingMetadata.maxValidatorPerNominator);
  if (!nominatorMetadata || nominatorMetadata.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_STAKING) {
    if (!bnTotalStake.gte(bnMinStake)) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.NOT_ENOUGH_MIN_STAKE, minStakeErrorMessage));
    }
    if (selectedValidators.length > chainStakingMetadata.maxValidatorPerNominator) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.EXCEED_MAX_NOMINATIONS, maxValidatorErrorMessage));
    }
    return errors;
  }
  const bnCurrentActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(nominatorMetadata.activeStake);
  bnTotalStake = bnTotalStake.add(bnCurrentActiveStake);
  if (!bnTotalStake.gte(bnMinStake)) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.NOT_ENOUGH_MIN_STAKE, minStakeErrorMessage));
  }
  if (selectedValidators.length > chainStakingMetadata.maxValidatorPerNominator) {
    errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_2__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingTxErrorType.EXCEED_MAX_NOMINATIONS, maxValidatorErrorMessage));
  }
  return errors;
}
function subscribeRelayChainStakingMetadata(chainInfo, substrateApi, callback) {
  return substrateApi.api.query.staking.currentEra(async _currentEra => {
    var _substrateApi$api$que, _substrateApi$api$que2, _substrateApi$api$que3, _substrateApi$api$que4, _substrateApi$api$que5, _substrateApi$api$que6, _substrateApi$api$que7;
    const currentEra = _currentEra.toString();
    const maxNominations = substrateApi.api.consts.staking.maxNominations.toString();
    const maxUnlockingChunks = substrateApi.api.consts.staking.maxUnlockingChunks.toString();
    const unlockingEras = substrateApi.api.consts.staking.bondingDuration.toString();
    const [_totalEraStake, _totalIssuance, _auctionCounter, _minNominatorBond, _minPoolJoin, _minimumActiveStake] = await Promise.all([substrateApi.api.query.staking.erasTotalStake(parseInt(currentEra)), substrateApi.api.query.balances.totalIssuance(), (_substrateApi$api$que = substrateApi.api.query.auctions) === null || _substrateApi$api$que === void 0 ? void 0 : _substrateApi$api$que.auctionCounter(), substrateApi.api.query.staking.minNominatorBond(), (_substrateApi$api$que2 = substrateApi.api.query) === null || _substrateApi$api$que2 === void 0 ? void 0 : (_substrateApi$api$que3 = _substrateApi$api$que2.nominationPools) === null || _substrateApi$api$que3 === void 0 ? void 0 : _substrateApi$api$que3.minJoinBond(), ((_substrateApi$api$que4 = substrateApi.api.query) === null || _substrateApi$api$que4 === void 0 ? void 0 : (_substrateApi$api$que5 = _substrateApi$api$que4.staking) === null || _substrateApi$api$que5 === void 0 ? void 0 : _substrateApi$api$que5.minimumActiveStake) && ((_substrateApi$api$que6 = substrateApi.api.query) === null || _substrateApi$api$que6 === void 0 ? void 0 : (_substrateApi$api$que7 = _substrateApi$api$que6.staking) === null || _substrateApi$api$que7 === void 0 ? void 0 : _substrateApi$api$que7.minimumActiveStake())]);
    const minActiveStake = (_minimumActiveStake === null || _minimumActiveStake === void 0 ? void 0 : _minimumActiveStake.toString()) || '0';
    const minNominatorBond = _minNominatorBond.toString();
    const bnMinActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minActiveStake);
    const bnMinNominatorBond = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minNominatorBond);
    const minStake = bnMinActiveStake.gt(bnMinNominatorBond) ? bnMinActiveStake : bnMinNominatorBond;
    const rawTotalEraStake = _totalEraStake.toString();
    const rawTotalIssuance = _totalIssuance.toString();
    const numAuctions = _auctionCounter ? _auctionCounter.toHuman() : 0;
    const bnTotalEraStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(rawTotalEraStake);
    const bnTotalIssuance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(rawTotalIssuance);
    const inflation = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.calculateInflation)(bnTotalEraStake, bnTotalIssuance, numAuctions, chainInfo.slug);
    const expectedReturn = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.calculateChainStakedReturn)(inflation, bnTotalEraStake, bnTotalIssuance, chainInfo.slug);
    const minPoolJoin = (_minPoolJoin === null || _minPoolJoin === void 0 ? void 0 : _minPoolJoin.toString()) || undefined;
    const unlockingPeriod = parseInt(unlockingEras) * (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chainInfo.slug] || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP["default"]); // in hours

    callback(chainInfo.slug, {
      chain: chainInfo.slug,
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
      expectedReturn: !_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_CHAIN_GROUP.ternoa.includes(chainInfo.slug) ? expectedReturn : undefined,
      // in %, annually
      inflation,
      era: parseInt(currentEra),
      minStake: minStake.toString(),
      maxValidatorPerNominator: parseInt(maxNominations),
      maxWithdrawalRequestPerValidator: parseInt(maxUnlockingChunks),
      allowCancelUnstaking: true,
      unstakingPeriod: unlockingPeriod,
      minJoinNominationPool: minPoolJoin
    });
  });
}
async function getRelayChainStakingMetadata(chainInfo, substrateApi) {
  var _chainApi$api$query$a, _chainApi$api$query, _chainApi$api$query$s, _chainApi$api$query2, _chainApi$api$query2$, _chainApi$api$query3, _chainApi$api$query3$;
  const chain = chainInfo.slug;
  const chainApi = await substrateApi.isReady;
  const _era = await chainApi.api.query.staking.currentEra();
  const currentEra = _era.toString();
  const maxNominations = chainApi.api.consts.staking.maxNominations.toString();
  const maxUnlockingChunks = chainApi.api.consts.staking.maxUnlockingChunks.toString();
  const unlockingEras = chainApi.api.consts.staking.bondingDuration.toString();
  const [_totalEraStake, _totalIssuance, _auctionCounter, _minimumActiveStake, _minNominatorBond, _minPoolJoin, _eraStakers] = await Promise.all([chainApi.api.query.staking.erasTotalStake(parseInt(currentEra)), chainApi.api.query.balances.totalIssuance(), (_chainApi$api$query$a = chainApi.api.query.auctions) === null || _chainApi$api$query$a === void 0 ? void 0 : _chainApi$api$query$a.auctionCounter(), ((_chainApi$api$query = chainApi.api.query) === null || _chainApi$api$query === void 0 ? void 0 : (_chainApi$api$query$s = _chainApi$api$query.staking) === null || _chainApi$api$query$s === void 0 ? void 0 : _chainApi$api$query$s.minimumActiveStake) && ((_chainApi$api$query2 = chainApi.api.query) === null || _chainApi$api$query2 === void 0 ? void 0 : (_chainApi$api$query2$ = _chainApi$api$query2.staking) === null || _chainApi$api$query2$ === void 0 ? void 0 : _chainApi$api$query2$.minimumActiveStake()), chainApi.api.query.staking.minNominatorBond(), (_chainApi$api$query3 = chainApi.api.query) === null || _chainApi$api$query3 === void 0 ? void 0 : (_chainApi$api$query3$ = _chainApi$api$query3.nominationPools) === null || _chainApi$api$query3$ === void 0 ? void 0 : _chainApi$api$query3$.minJoinBond(), chainApi.api.query.staking.erasStakers.entries(parseInt(currentEra))]);
  const eraStakers = _eraStakers;
  let allCurrentNominators = [];
  const nominatorList = [];
  for (const item of eraStakers) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
    const rawValidatorStat = item[1].toHuman();
    const eraNominators = rawValidatorStat.others;
    allCurrentNominators = allCurrentNominators.concat(eraNominators);
  }
  for (const nominator of allCurrentNominators) {
    if (!nominatorList.includes(nominator.who)) {
      nominatorList.push(nominator.who);
    }
  }
  const minActiveStake = (_minimumActiveStake === null || _minimumActiveStake === void 0 ? void 0 : _minimumActiveStake.toString()) || '0';
  const minNominatorBond = _minNominatorBond.toString();
  const bnMinActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minActiveStake);
  const bnMinNominatorBond = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minNominatorBond);
  const minStake = bnMinActiveStake.gt(bnMinNominatorBond) ? bnMinActiveStake : bnMinNominatorBond;
  const minPoolJoin = (_minPoolJoin === null || _minPoolJoin === void 0 ? void 0 : _minPoolJoin.toString()) || undefined;
  const rawTotalEraStake = _totalEraStake.toString();
  const rawTotalIssuance = _totalIssuance.toString();
  const numAuctions = _auctionCounter ? _auctionCounter.toHuman() : 0;
  const bnTotalEraStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(rawTotalEraStake);
  const bnTotalIssuance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(rawTotalIssuance);
  const inflation = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.calculateInflation)(bnTotalEraStake, bnTotalIssuance, numAuctions, chain);
  const expectedReturn = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.calculateChainStakedReturn)(inflation, bnTotalEraStake, bnTotalIssuance, chain);
  const unlockingPeriod = parseInt(unlockingEras) * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chain]; // in hours

  return {
    chain,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
    era: parseInt(currentEra),
    expectedReturn: !_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_CHAIN_GROUP.ternoa.includes(chain) ? expectedReturn : undefined,
    // in %, annually
    inflation,
    minStake: minStake.toString(),
    maxValidatorPerNominator: parseInt(maxNominations),
    maxWithdrawalRequestPerValidator: parseInt(maxUnlockingChunks),
    allowCancelUnstaking: true,
    unstakingPeriod: unlockingPeriod,
    minJoinNominationPool: minPoolJoin,
    nominatorCount: nominatorList.length
  };
}
async function subscribeRelayChainNominatorMetadata(chainInfo, address, substrateApi, ledger) {
  var _chainApi$api$query4, _chainApi$api$query4$, _chainApi$api$query5, _chainApi$api$query5$, _chainApi$api$query6, _chainApi$api$query6$, _chainApi$api$query7, _chainApi$api$query7$, _chainApi$api$query8, _chainApi$api$query8$, _chainApi$api$query9, _chainApi$api$query9$;
  const chain = chainInfo.slug;
  const chainApi = await substrateApi.isReady;
  const [_nominations, _currentEra, _bonded, _minimumActiveStake, _minNominatorBond] = await Promise.all([(_chainApi$api$query4 = chainApi.api.query) === null || _chainApi$api$query4 === void 0 ? void 0 : (_chainApi$api$query4$ = _chainApi$api$query4.staking) === null || _chainApi$api$query4$ === void 0 ? void 0 : _chainApi$api$query4$.nominators(address), (_chainApi$api$query5 = chainApi.api.query) === null || _chainApi$api$query5 === void 0 ? void 0 : (_chainApi$api$query5$ = _chainApi$api$query5.staking) === null || _chainApi$api$query5$ === void 0 ? void 0 : _chainApi$api$query5$.currentEra(), (_chainApi$api$query6 = chainApi.api.query) === null || _chainApi$api$query6 === void 0 ? void 0 : (_chainApi$api$query6$ = _chainApi$api$query6.staking) === null || _chainApi$api$query6$ === void 0 ? void 0 : _chainApi$api$query6$.bonded(address), ((_chainApi$api$query7 = chainApi.api.query) === null || _chainApi$api$query7 === void 0 ? void 0 : (_chainApi$api$query7$ = _chainApi$api$query7.staking) === null || _chainApi$api$query7$ === void 0 ? void 0 : _chainApi$api$query7$.minimumActiveStake) && ((_chainApi$api$query8 = chainApi.api.query) === null || _chainApi$api$query8 === void 0 ? void 0 : (_chainApi$api$query8$ = _chainApi$api$query8.staking) === null || _chainApi$api$query8$ === void 0 ? void 0 : _chainApi$api$query8$.minimumActiveStake()), (_chainApi$api$query9 = chainApi.api.query) === null || _chainApi$api$query9 === void 0 ? void 0 : (_chainApi$api$query9$ = _chainApi$api$query9.staking) === null || _chainApi$api$query9$ === void 0 ? void 0 : _chainApi$api$query9$.minNominatorBond()]);
  const minActiveStake = (_minimumActiveStake === null || _minimumActiveStake === void 0 ? void 0 : _minimumActiveStake.toString()) || '0';
  const minNominatorBond = _minNominatorBond.toString();
  const bnMinActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minActiveStake);
  const bnMinNominatorBond = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minNominatorBond);
  const minStake = bnMinActiveStake.gt(bnMinNominatorBond) ? bnMinActiveStake : bnMinNominatorBond;
  const _maxNominatorRewardedPerValidator = chainApi.api.consts.staking.maxNominatorRewardedPerValidator.toString();
  const maxNominatorRewardedPerValidator = parseInt(_maxNominatorRewardedPerValidator);
  const nominations = _nominations.toPrimitive();
  const currentEra = _currentEra.toString();
  const bonded = _bonded.toHuman();
  const activeStake = ledger.active.toString();
  const nominationList = [];
  const unstakingList = [];
  if (nominations) {
    const validatorList = nominations.targets;
    await Promise.all(validatorList.map(async validatorAddress => {
      var _chainApi$api$query$i;
      let nominationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
      const [_identityInfo, _eraStaker] = await Promise.all([(_chainApi$api$query$i = chainApi.api.query.identity) === null || _chainApi$api$query$i === void 0 ? void 0 : _chainApi$api$query$i.identityOf(validatorAddress), chainApi.api.query.staking.erasStakers(currentEra, validatorAddress)]);
      const eraStaker = _eraStaker.toPrimitive();
      const identityInfo = _identityInfo === null || _identityInfo === void 0 ? void 0 : _identityInfo.toHuman();
      const identity = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parseIdentity)(identityInfo);
      const topNominators = eraStaker.others.map(nominator => {
        return nominator.who;
      });
      if (!topNominators.includes((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__.reformatAddress)(address, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainSubstrateAddressPrefix)(chainInfo)))) {
        // if nominator has target but not in nominator list
        nominationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.WAITING;
      } else if (topNominators.slice(0, maxNominatorRewardedPerValidator).includes((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__.reformatAddress)(address, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainSubstrateAddressPrefix)(chainInfo)))) {
        // if address in top nominators
        nominationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD;
      }
      nominationList.push({
        chain,
        validatorAddress,
        status: nominationStatus,
        validatorIdentity: identity,
        activeStake: '0' // relaychain allocates stake accordingly
      });
    }));
  }

  let stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
  const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(activeStake);
  let waitingNominationCount = 0;
  if (bnActiveStake.gte(minStake)) {
    for (const nomination of nominationList) {
      if (nomination.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD) {
        // only need 1 earning nomination to count
        stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD;
      } else if (nomination.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.WAITING) {
        waitingNominationCount += 1;
      }
    }
    if (waitingNominationCount === nominationList.length) {
      stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.WAITING;
    }
  }
  ledger.unlocking.forEach(unlockingChunk => {
    const isClaimable = unlockingChunk.era - parseInt(currentEra) < 0;
    const remainingEra = unlockingChunk.era - parseInt(currentEra);
    const waitingTime = remainingEra * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chain];
    unstakingList.push({
      chain,
      status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.UNLOCKING,
      claimable: unlockingChunk.value.toString(),
      waitingTime: waitingTime
    });
  });
  return {
    chain,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
    status: stakingStatus,
    address: address,
    activeStake,
    nominations: nominationList,
    unstakings: unstakingList,
    isBondedBefore: bonded !== null
  };
}
async function getRelayChainNominatorMetadata(chainInfo, address, substrateApi) {
  var _chainApi$api$query10, _chainApi$api$query11, _chainApi$api$query12, _chainApi$api$query13, _chainApi$api$query14, _chainApi$api$query15, _chainApi$api$query16, _chainApi$api$query17, _chainApi$api$query18, _chainApi$api$query19, _chainApi$api$query20, _chainApi$api$query21, _chainApi$api$query22, _chainApi$api$query23;
  if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_8__.isEthereumAddress)(address)) {
    return;
  }
  const chain = chainInfo.slug;
  const chainApi = await substrateApi.isReady;
  const [_ledger, _nominations, _currentEra, _bonded, _minimumActiveStake, _minNominatorBond] = await Promise.all([(_chainApi$api$query10 = chainApi.api.query) === null || _chainApi$api$query10 === void 0 ? void 0 : (_chainApi$api$query11 = _chainApi$api$query10.staking) === null || _chainApi$api$query11 === void 0 ? void 0 : _chainApi$api$query11.ledger(address), (_chainApi$api$query12 = chainApi.api.query) === null || _chainApi$api$query12 === void 0 ? void 0 : (_chainApi$api$query13 = _chainApi$api$query12.staking) === null || _chainApi$api$query13 === void 0 ? void 0 : _chainApi$api$query13.nominators(address), (_chainApi$api$query14 = chainApi.api.query) === null || _chainApi$api$query14 === void 0 ? void 0 : (_chainApi$api$query15 = _chainApi$api$query14.staking) === null || _chainApi$api$query15 === void 0 ? void 0 : _chainApi$api$query15.currentEra(), (_chainApi$api$query16 = chainApi.api.query) === null || _chainApi$api$query16 === void 0 ? void 0 : (_chainApi$api$query17 = _chainApi$api$query16.staking) === null || _chainApi$api$query17 === void 0 ? void 0 : _chainApi$api$query17.bonded(address), ((_chainApi$api$query18 = chainApi.api.query) === null || _chainApi$api$query18 === void 0 ? void 0 : (_chainApi$api$query19 = _chainApi$api$query18.staking) === null || _chainApi$api$query19 === void 0 ? void 0 : _chainApi$api$query19.minimumActiveStake) && ((_chainApi$api$query20 = chainApi.api.query) === null || _chainApi$api$query20 === void 0 ? void 0 : (_chainApi$api$query21 = _chainApi$api$query20.staking) === null || _chainApi$api$query21 === void 0 ? void 0 : _chainApi$api$query21.minimumActiveStake()), (_chainApi$api$query22 = chainApi.api.query) === null || _chainApi$api$query22 === void 0 ? void 0 : (_chainApi$api$query23 = _chainApi$api$query22.staking) === null || _chainApi$api$query23 === void 0 ? void 0 : _chainApi$api$query23.minNominatorBond()]);
  const minActiveStake = (_minimumActiveStake === null || _minimumActiveStake === void 0 ? void 0 : _minimumActiveStake.toString()) || '0';
  const minNominatorBond = _minNominatorBond.toString();
  const bnMinActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minActiveStake);
  const bnMinNominatorBond = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(minNominatorBond);
  const minStake = bnMinActiveStake.gt(bnMinNominatorBond) ? bnMinActiveStake : bnMinNominatorBond;
  const _maxNominatorRewardedPerValidator = chainApi.api.consts.staking.maxNominatorRewardedPerValidator.toString();
  const maxNominatorRewardedPerValidator = parseInt(_maxNominatorRewardedPerValidator);
  const ledger = _ledger.toPrimitive();
  const nominations = _nominations.toPrimitive();
  const currentEra = _currentEra.toString();
  const bonded = _bonded.toHuman();
  if (!ledger) {
    return {
      chain,
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_STAKING,
      address: address,
      activeStake: '0',
      nominations: [],
      unstakings: []
    };
  }
  const activeStake = ledger.active.toString();
  const nominationList = [];
  const unstakingList = [];
  if (nominations) {
    const validatorList = nominations.targets;
    await Promise.all(validatorList.map(async validatorAddress => {
      let nominationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
      const [_identityInfo, _eraStaker] = await Promise.all([chainApi.api.query.identity.identityOf(validatorAddress), chainApi.api.query.staking.erasStakers(currentEra, validatorAddress)]);
      const eraStaker = _eraStaker.toPrimitive();
      const identityInfo = _identityInfo.toHuman();
      const identity = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parseIdentity)(identityInfo);
      const topNominators = eraStaker.others.map(nominator => {
        return nominator.who;
      });
      if (!topNominators.includes((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__.reformatAddress)(address, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainSubstrateAddressPrefix)(chainInfo)))) {
        // if nominator has target but not in nominator list
        nominationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.WAITING;
      } else if (topNominators.slice(0, maxNominatorRewardedPerValidator).includes((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__.reformatAddress)(address, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainSubstrateAddressPrefix)(chainInfo)))) {
        // if address in top nominators
        nominationStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD;
      }
      nominationList.push({
        chain,
        validatorAddress,
        status: nominationStatus,
        validatorIdentity: identity,
        activeStake: '0' // relaychain allocates stake accordingly
      });
    }));
  }

  let stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
  const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(activeStake);
  let waitingNominationCount = 0;
  if (bnActiveStake.gte(minStake)) {
    for (const nomination of nominationList) {
      if (nomination.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD) {
        // only need 1 earning nomination to count
        stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD;
      } else if (nomination.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.WAITING) {
        waitingNominationCount += 1;
      }
    }
    if (waitingNominationCount === nominationList.length) {
      stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.WAITING;
    }
  }
  ledger.unlocking.forEach(unlockingChunk => {
    const isClaimable = unlockingChunk.era - parseInt(currentEra) < 0;
    const remainingEra = unlockingChunk.era - parseInt(currentEra);
    const waitingTime = remainingEra * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chain];
    unstakingList.push({
      chain,
      status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.UNLOCKING,
      claimable: unlockingChunk.value.toString(),
      waitingTime: waitingTime
    });
  });
  return {
    chain,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
    status: stakingStatus,
    address: address,
    activeStake,
    nominations: nominationList,
    unstakings: unstakingList,
    isBondedBefore: bonded !== null
  };
}
async function subscribeRelayChainPoolMemberMetadata(chainInfo, address, substrateApi, poolMemberInfo) {
  const _maxNominatorRewardedPerValidator = substrateApi.api.consts.staking.maxNominatorRewardedPerValidator.toString();
  const maxNominatorRewardedPerValidator = parseInt(_maxNominatorRewardedPerValidator);
  const poolsPalletId = substrateApi.api.consts.nominationPools.palletId.toString();
  const poolStashAccount = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parsePoolStashAddress)(substrateApi.api, 0, poolMemberInfo.poolId, poolsPalletId);
  const [_nominations, _poolMetadata, _currentEra] = await Promise.all([substrateApi.api.query.staking.nominators(poolStashAccount), substrateApi.api.query.nominationPools.metadata(poolMemberInfo.poolId), substrateApi.api.query.staking.currentEra()]);
  const poolMetadata = _poolMetadata.toPrimitive();
  const currentEra = _currentEra.toString();
  const nominations = _nominations.toJSON();
  let stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
  const poolName = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.transformPoolName)(poolMetadata.isUtf8 ? poolMetadata.toUtf8() : poolMetadata.toString());
  if (nominations) {
    const validatorList = nominations.targets;
    await Promise.all(validatorList.map(async validatorAddress => {
      const _eraStaker = await substrateApi.api.query.staking.erasStakers(currentEra, validatorAddress);
      const eraStaker = _eraStaker.toPrimitive();
      const topNominators = eraStaker.others.map(nominator => {
        return nominator.who;
      }).slice(0, maxNominatorRewardedPerValidator);
      if (topNominators.includes((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__.reformatAddress)(poolStashAccount, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainSubstrateAddressPrefix)(chainInfo)))) {
        // if address in top nominators
        stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD;
      }
    }));
  }
  const joinedPoolInfo = {
    activeStake: poolMemberInfo.points.toString(),
    chain: chainInfo.slug,
    status: stakingStatus,
    validatorIdentity: poolName,
    validatorAddress: poolMemberInfo.poolId.toString(),
    // use poolId
    hasUnstaking: poolMemberInfo.unbondingEras && Object.keys(poolMemberInfo.unbondingEras).length > 0
  };
  const unstakings = [];
  Object.entries(poolMemberInfo.unbondingEras).forEach(([unlockingEra, amount]) => {
    const isClaimable = parseInt(unlockingEra) - parseInt(currentEra) < 0;
    const remainingEra = parseInt(unlockingEra) - parseInt(currentEra);
    const waitingTime = remainingEra * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chainInfo.slug];
    unstakings.push({
      chain: chainInfo.slug,
      status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.UNLOCKING,
      claimable: amount.toString(),
      waitingTime: waitingTime
    });
  });
  const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(poolMemberInfo.points.toString());
  if (!bnActiveStake.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_9__.BN_ZERO)) {
    stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
  }
  return {
    chain: chainInfo.slug,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.POOLED,
    address,
    status: stakingStatus,
    activeStake: poolMemberInfo.points.toString(),
    nominations: [joinedPoolInfo],
    // can only join 1 pool at a time
    unstakings
  };
}
async function getRelayChainPoolMemberMetadata(chainInfo, address, substrateApi) {
  const chainApi = await substrateApi.isReady;
  const [_poolMemberInfo, _currentEra] = await Promise.all([chainApi.api.query.nominationPools.poolMembers(address), chainApi.api.query.staking.currentEra()]);
  const _maxNominatorRewardedPerValidator = chainApi.api.consts.staking.maxNominatorRewardedPerValidator.toString();
  const maxNominatorRewardedPerValidator = parseInt(_maxNominatorRewardedPerValidator);
  const poolsPalletId = chainApi.api.consts.nominationPools.palletId.toString();
  const poolMemberInfo = _poolMemberInfo.toPrimitive();
  const currentEra = _currentEra.toString();
  if (!poolMemberInfo) {
    return {
      chain: chainInfo.slug,
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.POOLED,
      address,
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_STAKING,
      activeStake: '0',
      nominations: [],
      // can only join 1 pool at a time
      unstakings: []
    };
  }
  let stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
  const _poolMetadata = await chainApi.api.query.nominationPools.metadata(poolMemberInfo.poolId);
  const poolMetadata = _poolMetadata.toPrimitive();
  const poolName = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.transformPoolName)(poolMetadata.isUtf8 ? poolMetadata.toUtf8() : poolMetadata.toString());
  const poolStashAccount = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parsePoolStashAddress)(chainApi.api, 0, poolMemberInfo.poolId, poolsPalletId);
  const _nominations = await chainApi.api.query.staking.nominators(poolStashAccount);
  const nominations = _nominations.toJSON();
  if (nominations) {
    const validatorList = nominations.targets;
    await Promise.all(validatorList.map(async validatorAddress => {
      const _eraStaker = await chainApi.api.query.staking.erasStakers(currentEra, validatorAddress);
      const eraStaker = _eraStaker.toPrimitive();
      const topNominators = eraStaker.others.map(nominator => {
        return nominator.who;
      }).slice(0, maxNominatorRewardedPerValidator);
      if (topNominators.includes((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__.reformatAddress)(poolStashAccount, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainSubstrateAddressPrefix)(chainInfo)))) {
        // if address in top nominators
        stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.EARNING_REWARD;
      }
    }));
  }
  const joinedPoolInfo = {
    activeStake: poolMemberInfo.points.toString(),
    chain: chainInfo.slug,
    status: stakingStatus,
    validatorIdentity: poolName,
    validatorAddress: poolMemberInfo.poolId.toString(),
    // use poolId
    hasUnstaking: poolMemberInfo.unbondingEras && Object.keys(poolMemberInfo.unbondingEras).length > 0
  };
  const unstakings = [];
  Object.entries(poolMemberInfo.unbondingEras).forEach(([unlockingEra, amount]) => {
    const isClaimable = parseInt(unlockingEra) - parseInt(currentEra) < 0;
    const remainingEra = parseInt(unlockingEra) - parseInt(currentEra);
    const waitingTime = remainingEra * _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_ERA_LENGTH_MAP[chainInfo.slug];
    unstakings.push({
      chain: chainInfo.slug,
      status: isClaimable ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.CLAIMABLE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.UnstakingStatus.UNLOCKING,
      claimable: amount.toString(),
      waitingTime: waitingTime
    });
  });
  const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(poolMemberInfo.points.toString());
  if (!bnActiveStake.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_9__.BN_ZERO)) {
    stakingStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_EARNING;
  }
  return {
    chain: chainInfo.slug,
    type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.POOLED,
    address,
    status: stakingStatus,
    activeStake: poolMemberInfo.points.toString(),
    nominations: [joinedPoolInfo],
    // can only join 1 pool at a time
    unstakings
  };
}
async function getRelayValidatorsInfo(chain, substrateApi, decimals, chainStakingMetadata) {
  var _chainApi$api$query$s2;
  const chainApi = await substrateApi.isReady;
  const _era = await chainApi.api.query.staking.currentEra();
  const currentEra = _era.toString();
  const allValidators = [];
  const validatorInfoList = [];
  const [_totalEraStake, _eraStakers, _minBond, _stakingRewards] = await Promise.all([chainApi.api.query.staking.erasTotalStake(parseInt(currentEra)), chainApi.api.query.staking.erasStakers.entries(parseInt(currentEra)), chainApi.api.query.staking.minNominatorBond(), ((_chainApi$api$query$s2 = chainApi.api.query.stakingRewards) === null || _chainApi$api$query$s2 === void 0 ? void 0 : _chainApi$api$query$s2.data) && chainApi.api.query.stakingRewards.data()]);
  const stakingRewards = _stakingRewards === null || _stakingRewards === void 0 ? void 0 : _stakingRewards.toPrimitive();
  const maxNominatorRewarded = chainApi.api.consts.staking.maxNominatorRewardedPerValidator.toString();
  const bnTotalEraStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(_totalEraStake.toString());
  const eraStakers = _eraStakers;
  const rawMinBond = _minBond.toHuman();
  const minBond = rawMinBond.replaceAll(',', '');
  const totalStakeMap = {};
  const bnDecimals = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())((10 ** decimals).toString());
  for (const item of eraStakers) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
    const rawValidatorInfo = item[0].toHuman();
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
    const rawValidatorStat = item[1].toHuman();
    const validatorAddress = rawValidatorInfo[1];
    const rawTotalStake = rawValidatorStat.total;
    const rawOwnStake = rawValidatorStat.own;
    const bnTotalStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(rawTotalStake.replaceAll(',', ''));
    const bnOwnStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(rawOwnStake.replaceAll(',', ''));
    const otherStake = bnTotalStake.sub(bnOwnStake);
    totalStakeMap[validatorAddress] = bnTotalStake;
    let nominatorCount = 0;
    if ('others' in rawValidatorStat) {
      const others = rawValidatorStat.others;
      nominatorCount = others.length;
    }
    allValidators.push(validatorAddress);
    validatorInfoList.push({
      address: validatorAddress,
      totalStake: bnTotalStake.toString(),
      ownStake: bnOwnStake.toString(),
      otherStake: otherStake.toString(),
      nominatorCount,
      // to be added later
      commission: 0,
      expectedReturn: 0,
      blocked: false,
      isVerified: false,
      minBond,
      isCrowded: nominatorCount > parseInt(maxNominatorRewarded)
    });
  }
  const extraInfoMap = {};
  await Promise.all(allValidators.map(async address => {
    var _chainApi$api$query24, _chainApi$api$query25, _identityInfo$judgeme;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const [_commissionInfo, _identityInfo] = await Promise.all([chainApi.api.query.staking.validators(address), (_chainApi$api$query24 = chainApi.api.query) === null || _chainApi$api$query24 === void 0 ? void 0 : (_chainApi$api$query25 = _chainApi$api$query24.identity) === null || _chainApi$api$query25 === void 0 ? void 0 : _chainApi$api$query25.identityOf(address)]);
    const commissionInfo = _commissionInfo.toHuman();
    const identityInfo = _identityInfo ? _identityInfo.toHuman() : null;
    let identity;
    if (identityInfo !== null) {
      identity = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.parseIdentity)(identityInfo);
    }
    extraInfoMap[address] = {
      commission: commissionInfo.commission,
      blocked: commissionInfo.blocked,
      identity,
      isVerified: identityInfo && (identityInfo === null || identityInfo === void 0 ? void 0 : (_identityInfo$judgeme = identityInfo.judgements) === null || _identityInfo$judgeme === void 0 ? void 0 : _identityInfo$judgeme.length) > 0
    };
  }));
  const bnAvgStake = bnTotalEraStake.divn(validatorInfoList.length).div(bnDecimals);
  for (const validator of validatorInfoList) {
    const commission = extraInfoMap[validator.address].commission;
    const bnValidatorStake = totalStakeMap[validator.address].div(bnDecimals);
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_CHAIN_GROUP.aleph.includes(chain)) {
      validator.expectedReturn = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.calculateAlephZeroValidatorReturn)(chainStakingMetadata.expectedReturn, (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getCommission)(commission));
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_5__._STAKING_CHAIN_GROUP.ternoa.includes(chain)) {
      const rewardPerValidator = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(stakingRewards.sessionExtraRewardPayout).divn(allValidators.length).div(bnDecimals);
      const validatorStake = totalStakeMap[validator.address].div(bnDecimals).toNumber();
      validator.expectedReturn = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.calculateTernoaValidatorReturn)(rewardPerValidator.toNumber(), validatorStake, (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getCommission)(commission));
    } else {
      validator.expectedReturn = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.calculateValidatorStakedReturn)(chainStakingMetadata.expectedReturn, bnValidatorStake, bnAvgStake, (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.getCommission)(commission));
    }
    validator.commission = parseFloat(commission.split('%')[0]);
    validator.blocked = extraInfoMap[validator.address].blocked;
    validator.identity = extraInfoMap[validator.address].identity;
    validator.isVerified = extraInfoMap[validator.address].isVerified;
  }
  return validatorInfoList;
}
async function getRelayPoolsInfo(chain, substrateApi) {
  const chainApi = await substrateApi.isReady;
  const nominationPools = [];
  const _allPoolsInfo = await chainApi.api.query.nominationPools.reversePoolIdLookup.entries();
  await Promise.all(_allPoolsInfo.map(async _poolInfo => {
    var _bondedPool$points;
    const poolAddressList = _poolInfo[0].toHuman();
    const poolAddress = poolAddressList[0];
    const poolId = _poolInfo[1].toPrimitive();
    const [_bondedPool, _metadata] = await Promise.all([chainApi.api.query.nominationPools.bondedPools(poolId), chainApi.api.query.nominationPools.metadata(poolId)]);
    const poolMetadata = _metadata.toPrimitive();
    const bondedPool = _bondedPool.toPrimitive();
    const poolName = (0,_subwallet_extension_base_koni_api_staking_bonding_utils__WEBPACK_IMPORTED_MODULE_4__.transformPoolName)(poolMetadata.isUtf8 ? poolMetadata.toUtf8() : poolMetadata.toString());
    nominationPools.push({
      id: poolId,
      address: poolAddress,
      name: poolName,
      bondedAmount: ((_bondedPool$points = bondedPool.points) === null || _bondedPool$points === void 0 ? void 0 : _bondedPool$points.toString()) || '0',
      roles: bondedPool.roles,
      memberCounter: bondedPool.memberCounter,
      state: bondedPool.state
    });
  }));
  return nominationPools;
}
async function getRelayBondingExtrinsic(substrateApi, amount, targetValidators, chainInfo, address, nominatorMetadata, bondDest = 'Staked') {
  const chainApi = await substrateApi.isReady;
  const binaryAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(amount);
  let bondTx;
  let nominateTx;
  const _params = chainApi.api.tx.staking.bond.toJSON();
  const paramsCount = _params.args.length;
  const validatorParamList = targetValidators.map(validator => {
    return validator.address;
  });
  if (!nominatorMetadata) {
    if (paramsCount === 2) {
      bondTx = chainApi.api.tx.staking.bond(binaryAmount, bondDest);
    } else {
      bondTx = chainApi.api.tx.staking.bond(address, binaryAmount, bondDest);
    }
    nominateTx = chainApi.api.tx.staking.nominate(validatorParamList);
    return chainApi.api.tx.utility.batchAll([bondTx, nominateTx]);
  }
  if (!nominatorMetadata.isBondedBefore) {
    // first time
    if (paramsCount === 2) {
      bondTx = chainApi.api.tx.staking.bond(binaryAmount, bondDest);
    } else {
      bondTx = chainApi.api.tx.staking.bond(nominatorMetadata.address, binaryAmount, bondDest);
    }
    nominateTx = chainApi.api.tx.staking.nominate(validatorParamList);
    return chainApi.api.tx.utility.batchAll([bondTx, nominateTx]);
  } else {
    if (binaryAmount.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_9__.BN_ZERO)) {
      bondTx = chainApi.api.tx.staking.bondExtra(binaryAmount);
    }
    if (nominatorMetadata.isBondedBefore && targetValidators.length > 0) {
      nominateTx = chainApi.api.tx.staking.nominate(validatorParamList);
    }
  }
  if (bondTx && !nominateTx) {
    return bondTx;
  } else if (nominateTx && !bondTx) {
    return nominateTx;
  }
  return chainApi.api.tx.utility.batchAll([bondTx, nominateTx]);
}
async function getRelayUnbondingExtrinsic(substrateApi, amount, nominatorMetadata) {
  const chainApi = await substrateApi.isReady;
  const binaryAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())(amount);
  const isUnstakeAll = amount === nominatorMetadata.activeStake;
  if (isUnstakeAll) {
    const chillTx = chainApi.api.tx.staking.chill();
    const unbondTx = chainApi.api.tx.staking.unbond(binaryAmount);
    return chainApi.api.tx.utility.batchAll([chillTx, unbondTx]);
  }
  return chainApi.api.tx.staking.unbond(binaryAmount);
}
async function getRelayWithdrawalExtrinsic(substrateApi, address) {
  const chainApi = await substrateApi.isReady;
  if (chainApi.api.tx.staking.withdrawUnbonded.meta.args.length === 1) {
    const _slashingSpans = (await chainApi.api.query.staking.slashingSpans(address)).toHuman();
    const slashingSpanCount = _slashingSpans !== null ? _slashingSpans.spanIndex : '0';
    return chainApi.api.tx.staking.withdrawUnbonded(slashingSpanCount);
  } else {
    return chainApi.api.tx.staking.withdrawUnbonded();
  }
}
async function getRelayCancelWithdrawalExtrinsic(substrateApi, selectedUnstaking) {
  const chainApi = await substrateApi.isReady;
  return chainApi.api.tx.staking.rebond(selectedUnstaking.claimable);
}

// Pooling txs

async function getPoolingClaimRewardExtrinsic(substrateApi, bondReward = true) {
  const chainApi = await substrateApi.isReady;
  if (bondReward) {
    return chainApi.api.tx.nominationPools.bondExtra('Rewards');
  }
  return chainApi.api.tx.nominationPools.claimPayout();
}
async function getPoolingBondingExtrinsic(substrateApi, amount, selectedPoolId, nominatorMetadata) {
  const chainApi = await substrateApi.isReady;
  const bnActiveStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_1___default())((nominatorMetadata === null || nominatorMetadata === void 0 ? void 0 : nominatorMetadata.activeStake) || '0');
  if (bnActiveStake.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_9__.BN_ZERO)) {
    // already joined a pool
    return chainApi.api.tx.nominationPools.bondExtra({
      FreeBalance: amount
    });
  }
  return chainApi.api.tx.nominationPools.join(amount, selectedPoolId);
}
async function getPoolingUnbondingExtrinsic(substrateApi, amount, nominatorMetadata) {
  const chainApi = await substrateApi.isReady;
  return chainApi.api.tx.nominationPools.unbond({
    Id: nominatorMetadata.address
  }, amount);
}
async function getPoolingWithdrawalExtrinsic(substrateApi, nominatorMetadata) {
  const chainApi = await substrateApi.isReady;
  if (chainApi.api.tx.nominationPools.withdrawUnbonded.meta.args.length === 2) {
    const _slashingSpans = (await chainApi.api.query.staking.slashingSpans(nominatorMetadata.address)).toHuman();
    const slashingSpanCount = _slashingSpans !== null ? _slashingSpans.spanIndex : '0';
    return chainApi.api.tx.nominationPools.withdrawUnbonded({
      Id: nominatorMetadata.address
    }, slashingSpanCount);
  } else {
    return chainApi.api.tx.nominationPools.withdrawUnbonded({
      Id: nominatorMetadata.address
    });
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/config.ts":
/*!********************************************************!*\
  !*** ../extension-base/src/koni/api/staking/config.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "INDEXER_SUPPORTED_STAKING_CHAINS": () => (/* binding */ INDEXER_SUPPORTED_STAKING_CHAINS),
/* harmony export */   "SUBQUERY_ENDPOINTS": () => (/* binding */ SUBQUERY_ENDPOINTS),
/* harmony export */   "SUBSQUID_ENDPOINTS": () => (/* binding */ SUBSQUID_ENDPOINTS)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/chain-list */ "../../node_modules/@subwallet/chain-list/index.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


const SUBSQUID_ENDPOINTS = {
  [_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.KUSAMA]: 'https://squid.subsquid.io/kusama-explorer/graphql',
  [_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.POLKADOT]: 'https://squid.subsquid.io/polkadot-explorer/graphql',
  [_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.ASTAR]: 'https://squid.subsquid.io/astar-explorer/graphql',
  [_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.MOONRIVER]: 'https://squid.subsquid.io/moonriver-explorer/graphql',
  [_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.MOONBEAM]: 'https://squid.subsquid.io/moonbeam-explorer/graphql'
};
const INDEXER_SUPPORTED_STAKING_CHAINS = [_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.POLKADOT, _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.KUSAMA, _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.ASTAR, _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.MOONRIVER, _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.MOONBEAM];
const SUBQUERY_ENDPOINTS = {
  polkadot: 'https://api.subquery.network/sq/nova-wallet/nova-westend',
  kusama: 'https://api.subquery.network/sq/nova-wallet/nova-kusama',
  westend: 'https://api.subquery.network/sq/nova-wallet/nova-westend',
  picasso: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-picasso',
  calamari: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-calamari',
  khala: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-khala',
  parallel: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-parallel',
  bifrost: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-bifrost',
  clover: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-clover',
  basilisk: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-basilisk',
  acala: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-acala',
  astar: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-astar',
  karura: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-karura',
  altair: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-altair',
  kilt: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-kilt',
  robonomics: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-robonomics',
  statemint: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-statemint',
  quartz: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-quartz',
  zeigeist: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-zeitgeist',
  shiden: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-shiden',
  statemine: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-statemine',
  moonbeam: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-moonbeam',
  moonriver: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-moonriver',
  pioneer: 'https://api.subquery.network/sq/nova-wallet/nova-wallet-bit-country'
};

/***/ }),

/***/ "../extension-base/src/koni/api/staking/index.ts":
/*!*******************************************************!*\
  !*** ../extension-base/src/koni/api/staking/index.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getNominationStakingRewardData": () => (/* binding */ getNominationStakingRewardData),
/* harmony export */   "getPoolingStakingRewardData": () => (/* binding */ getPoolingStakingRewardData),
/* harmony export */   "stakingOnChainApi": () => (/* binding */ stakingOnChainApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_staking_paraChain__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/paraChain */ "../extension-base/src/koni/api/staking/paraChain.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_relayChain__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/relayChain */ "../extension-base/src/koni/api/staking/relayChain.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_subsquidStaking__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/subsquidStaking */ "../extension-base/src/koni/api/staking/subsquidStaking.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0







function stakingOnChainApi(addresses, substrateApiMap, chainInfoMap, stakingCallback, nominatorStateCallback) {
  const filteredApiMap = [];
  const [substrateAddresses, evmAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.categoryAddresses)(addresses);
  Object.entries(chainInfoMap).forEach(([networkKey, chainInfo]) => {
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._PURE_EVM_CHAINS.indexOf(networkKey) < 0 && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isChainSupportSubstrateStaking)(chainInfo)) {
      filteredApiMap.push({
        chain: networkKey,
        api: substrateApiMap[networkKey]
      });
    }
  });
  const unsubList = [];

  // eslint-disable-next-line @typescript-eslint/no-misused-promises
  filteredApiMap.forEach(async ({
    api: apiPromise,
    chain
  }) => {
    const parentApi = await apiPromise.isReady;
    const useAddresses = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isChainEvmCompatible)(chainInfoMap[chain]) ? evmAddresses : substrateAddresses;
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_CHAIN_GROUP.amplitude.includes(chain)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_paraChain__WEBPACK_IMPORTED_MODULE_3__.getAmplitudeStakingOnChain)(parentApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback);
      unsubList.push(unsub);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_CHAIN_GROUP.astar.includes(chain)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_paraChain__WEBPACK_IMPORTED_MODULE_3__.getAstarStakingOnChain)(parentApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback);
      unsubList.push(unsub);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_CHAIN_GROUP.para.includes(chain)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_paraChain__WEBPACK_IMPORTED_MODULE_3__.getParaStakingOnChain)(parentApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback);
      unsubList.push(unsub);
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_CHAIN_GROUP.relay.includes(chain)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_relayChain__WEBPACK_IMPORTED_MODULE_4__.getRelayStakingOnChain)(parentApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback);
      unsubList.push(unsub);
    }
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__._STAKING_CHAIN_GROUP.nominationPool.includes(chain)) {
      const unsub = await (0,_subwallet_extension_base_koni_api_staking_relayChain__WEBPACK_IMPORTED_MODULE_4__.getRelayPoolingOnChain)(parentApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback);
      unsubList.push(unsub);
    }
  });
  return () => {
    unsubList.forEach(unsub => {
      unsub && unsub();
    });
  };
}
async function getNominationStakingRewardData(addresses, chainInfoMap, callback) {
  // might retrieve from other sources
  await (0,_subwallet_extension_base_koni_api_staking_subsquidStaking__WEBPACK_IMPORTED_MODULE_5__.getAllSubsquidStaking)(addresses, chainInfoMap, callback);
}
async function getPoolingStakingRewardData(addresses, networkMap, dotSamaApiMap, callback) {
  const activeNetworks = [];
  Object.entries(networkMap).forEach(([key, chainInfo]) => {
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isChainSupportSubstrateStaking)(chainInfo) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_2__._isSubstrateRelayChain)(chainInfo)) {
      activeNetworks.push(key);
    }
  });
  if (activeNetworks.length === 0) {
    return;
  }
  await (0,_subwallet_extension_base_koni_api_staking_relayChain__WEBPACK_IMPORTED_MODULE_4__.getNominationPoolReward)(addresses, networkMap, dotSamaApiMap, callback);
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/paraChain.ts":
/*!***********************************************************!*\
  !*** ../extension-base/src/koni/api/staking/paraChain.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAmplitudeStakingOnChain": () => (/* binding */ getAmplitudeStakingOnChain),
/* harmony export */   "getAmplitudeUnclaimedStakingReward": () => (/* binding */ getAmplitudeUnclaimedStakingReward),
/* harmony export */   "getAstarStakingOnChain": () => (/* binding */ getAstarStakingOnChain),
/* harmony export */   "getParaStakingOnChain": () => (/* binding */ getParaStakingOnChain)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/amplitude */ "../extension-base/src/koni/api/staking/bonding/amplitude.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/astar */ "../extension-base/src/koni/api/staking/bonding/astar.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/paraChain */ "../extension-base/src/koni/api/staking/bonding/paraChain.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/bn/consts.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0










function getSingleStakingAmplitude(substrateApi, address, chainInfoMap, chain, stakingCallback, nominatorStateCallback) {
  return substrateApi.api.queryMulti([[substrateApi.api.query.parachainStaking.delegatorState, address], [substrateApi.api.query.parachainStaking.unstaking, address]], async ([_delegatorState, _unstaking]) => {
    const delegatorState = _delegatorState.toPrimitive();
    const unstakingInfo = _unstaking.toPrimitive();
    const {
      symbol
    } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfoMap[chain]);
    const owner = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.reformatAddress)(address, 42);
    if (!delegatorState && !unstakingInfo) {
      stakingCallback(chain, {
        name: chainInfoMap[chain].name,
        chain: chain,
        balance: '0',
        activeBalance: '0',
        unlockingBalance: '0',
        nativeToken: symbol,
        unit: symbol,
        state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
        type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
        address: owner
      });
      nominatorStateCallback({
        chain,
        type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
        address: owner,
        status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING,
        activeStake: '0',
        nominations: [],
        unstakings: []
      });
    } else {
      const activeBalance = delegatorState ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(delegatorState.amount.toString()) : _polkadot_util__WEBPACK_IMPORTED_MODULE_4__.BN_ZERO;
      let unstakingBalance = _polkadot_util__WEBPACK_IMPORTED_MODULE_4__.BN_ZERO;
      if (unstakingInfo) {
        Object.values(unstakingInfo).forEach(unstakingAmount => {
          const bnUnstakingAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(unstakingAmount.toString());
          unstakingBalance = unstakingBalance.add(bnUnstakingAmount);
        });
      }
      const totalBalance = activeBalance.add(unstakingBalance);
      const stakingItem = {
        name: chainInfoMap[chain].name,
        chain: chain,
        balance: totalBalance.toString(),
        activeBalance: activeBalance.toString(),
        unlockingBalance: unstakingBalance.toString(),
        nativeToken: symbol,
        unit: symbol,
        state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
        type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
        address: owner
      };
      stakingCallback(chain, stakingItem);
      const nominatorMetadata = await (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_5__.subscribeAmplitudeNominatorMetadata)(chainInfoMap[chain], owner, substrateApi, delegatorState, unstakingInfo);
      nominatorStateCallback(nominatorMetadata);
    }
  });
}
function getMultiStakingAmplitude(substrateApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback) {
  return substrateApi.api.query.parachainStaking.delegatorState.multi(useAddresses, async ledgers => {
    if (ledgers) {
      const {
        symbol
      } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfoMap[chain]);
      const _unstakingStates = await substrateApi.api.query.parachainStaking.unstaking.multi(useAddresses);
      await Promise.all(ledgers.map(async (_delegatorState, i) => {
        const owner = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.reformatAddress)(useAddresses[i], 42);
        const delegatorState = _delegatorState.toPrimitive();
        const unstakingInfo = _unstakingStates[i].toPrimitive();
        if (!delegatorState && !unstakingInfo) {
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: '0',
            activeBalance: '0',
            unlockingBalance: '0',
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner
          });
          nominatorStateCallback({
            chain,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner,
            status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING,
            activeStake: '0',
            nominations: [],
            unstakings: []
          });
        } else {
          const activeBalance = delegatorState ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(delegatorState.amount.toString()) : _polkadot_util__WEBPACK_IMPORTED_MODULE_4__.BN_ZERO;
          let unstakingBalance = _polkadot_util__WEBPACK_IMPORTED_MODULE_4__.BN_ZERO;
          if (unstakingInfo) {
            Object.values(unstakingInfo).forEach(unstakingAmount => {
              const bnUnstakingAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(unstakingAmount.toString());
              unstakingBalance = unstakingBalance.add(bnUnstakingAmount);
            });
          }
          const totalBalance = activeBalance.add(unstakingBalance);
          const stakingItem = {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: totalBalance.toString(),
            activeBalance: activeBalance.toString(),
            unlockingBalance: unstakingBalance.toString(),
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner
          };
          stakingCallback(chain, stakingItem);
          const nominatorMetadata = await (0,_subwallet_extension_base_koni_api_staking_bonding_amplitude__WEBPACK_IMPORTED_MODULE_5__.subscribeAmplitudeNominatorMetadata)(chainInfoMap[chain], owner, substrateApi, delegatorState, unstakingInfo);
          nominatorStateCallback(nominatorMetadata);
        }
      }));
    }
  });
}
function getAmplitudeStakingOnChain(parentApi, useAddresses, networks, chain, callback, nominatorStateCallback) {
  if (useAddresses.length === 1) {
    return getSingleStakingAmplitude(parentApi, useAddresses[0], networks, chain, callback, nominatorStateCallback);
  }
  return getMultiStakingAmplitude(parentApi, useAddresses, networks, chain, callback, nominatorStateCallback);
}
async function getAmplitudeUnclaimedStakingReward(substrateApiMap, addresses, networks, chains, callBack) {
  if (chains.length === 0) {
    return [];
  }
  const useAddresses = [];
  addresses.forEach(address => {
    if (!(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__.isEthereumAddress)(address)) {
      useAddresses.push(address);
    }
  });
  const unclaimedRewardList = [];
  await Promise.all(chains.map(async chain => {
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__._STAKING_CHAIN_GROUP.amplitude.includes(chain) && !_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__._STAKING_CHAIN_GROUP.kilt.includes(chain)) {
      const networkInfo = networks[chain];
      const apiProps = await substrateApiMap[chain].isReady;
      await Promise.all(useAddresses.map(async address => {
        const _unclaimedReward = await apiProps.api.query.parachainStaking.rewards(address);
        callBack({
          chain,
          name: networkInfo.name,
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
          type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
          address: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.reformatAddress)(address, 42),
          unclaimedReward: _unclaimedReward.toString()
        });
      }));
    }
  }));
  return unclaimedRewardList;
}
function getParaStakingOnChain(substrateApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback) {
  const {
    symbol
  } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfoMap[chain]);
  return substrateApi.api.query.parachainStaking.delegatorState.multi(useAddresses, async ledgers => {
    if (ledgers) {
      await Promise.all(ledgers.map(async (_delegatorState, i) => {
        const delegatorState = _delegatorState.toPrimitive();
        const owner = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.reformatAddress)(useAddresses[i], 42);
        if (delegatorState) {
          const _totalBalance = delegatorState.total;
          // let _unlockingBalance = delegatorState.lessTotal ? delegatorState.lessTotal : delegatorState.requests.lessTotal;
          const _unlockingBalance = delegatorState.lessTotal;
          const totalBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(_totalBalance.toString());
          const unlockingBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(_unlockingBalance.toString());
          const activeBalance = totalBalance.sub(unlockingBalance);
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: totalBalance.toString(),
            activeBalance: activeBalance.toString(),
            unlockingBalance: unlockingBalance.toString(),
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner
          });
          const nominatorMetadata = await (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_8__.subscribeParaChainNominatorMetadata)(chainInfoMap[chain], owner, substrateApi, delegatorState);
          nominatorStateCallback(nominatorMetadata);
        } else {
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: '0',
            activeBalance: '0',
            unlockingBalance: '0',
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner
          });
          nominatorStateCallback({
            chain,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner,
            status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING,
            activeStake: '0',
            nominations: [],
            unstakings: []
          });
        }
      }));
    }
  });
}
function getAstarStakingOnChain(substrateApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback) {
  const {
    symbol
  } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfoMap[chain]);
  return substrateApi.api.query.dappsStaking.ledger.multi(useAddresses, async ledgers => {
    if (ledgers) {
      await Promise.all(ledgers.map(async (_ledger, i) => {
        let bnUnlockingBalance = _polkadot_util__WEBPACK_IMPORTED_MODULE_4__.BN_ZERO;
        const owner = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.reformatAddress)(useAddresses[i], 42);
        const ledger = _ledger.toPrimitive();
        if (ledger && ledger.locked > 0) {
          const unlockingChunks = ledger.unbondingInfo.unlockingChunks;
          const _totalStake = ledger.locked;
          const bnTotalStake = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(_totalStake.toString());
          for (const chunk of unlockingChunks) {
            const bnChunk = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(chunk.amount.toString());
            bnUnlockingBalance = bnUnlockingBalance.add(bnChunk);
          }
          const bnActiveStake = bnTotalStake.sub(bnUnlockingBalance);
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: bnTotalStake.toString(),
            activeBalance: bnActiveStake.toString(),
            unlockingBalance: bnUnlockingBalance.toString(),
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner
          });
          const nominatorMetadata = await (0,_subwallet_extension_base_koni_api_staking_bonding_astar__WEBPACK_IMPORTED_MODULE_9__.subscribeAstarNominatorMetadata)(chainInfoMap[chain], owner, substrateApi, ledger);
          nominatorStateCallback(nominatorMetadata);
        } else {
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain,
            balance: '0',
            activeBalance: '0',
            unlockingBalance: '0',
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner
          });
          nominatorStateCallback({
            chain,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED,
            address: owner,
            status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING,
            activeStake: '0',
            nominations: [],
            unstakings: []
          });
        }
      }));
    }
  });
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/relayChain.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/koni/api/staking/relayChain.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getNominationPoolReward": () => (/* binding */ getNominationPoolReward),
/* harmony export */   "getRelayPoolingOnChain": () => (/* binding */ getRelayPoolingOnChain),
/* harmony export */   "getRelayStakingOnChain": () => (/* binding */ getRelayStakingOnChain)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/relayChain */ "../extension-base/src/koni/api/staking/bonding/relayChain.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0







function getRelayStakingOnChain(substrateApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback) {
  var _substrateApi$api$que;
  const {
    symbol
  } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfoMap[chain]);
  return (_substrateApi$api$que = substrateApi.api.query.staking) === null || _substrateApi$api$que === void 0 ? void 0 : _substrateApi$api$que.ledger.multi(useAddresses, async ledgers => {
    if (ledgers) {
      await Promise.all(ledgers.map(async (_ledger, i) => {
        const owner = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.reformatAddress)(useAddresses[i], 42);
        const ledger = _ledger.toPrimitive();
        if (ledger) {
          const _totalBalance = ledger.total.toString();
          const _activeBalance = ledger.active.toString();
          const bnUnlockingBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_2___default())(_totalBalance).sub(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_2___default())(_activeBalance));
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: _totalBalance,
            activeBalance: _activeBalance,
            unlockingBalance: bnUnlockingBalance.toString(),
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
            address: owner
          });
          const nominatorMetadata = await (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_4__.subscribeRelayChainNominatorMetadata)(chainInfoMap[chain], owner, substrateApi, ledger);
          nominatorStateCallback(nominatorMetadata);
        } else {
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: '0',
            activeBalance: '0',
            unlockingBalance: '0',
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
            address: owner
          });
          nominatorStateCallback({
            chain,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
            status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_STAKING,
            address: owner,
            activeStake: '0',
            nominations: [],
            unstakings: []
          });
        }
      }));
    }
  });
}
function getRelayPoolingOnChain(substrateApi, useAddresses, chainInfoMap, chain, stakingCallback, nominatorStateCallback) {
  var _substrateApi$api$que2, _substrateApi$api$que3;
  const {
    symbol
  } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfoMap[chain]);
  return (_substrateApi$api$que2 = substrateApi.api.query) === null || _substrateApi$api$que2 === void 0 ? void 0 : (_substrateApi$api$que3 = _substrateApi$api$que2.nominationPools) === null || _substrateApi$api$que3 === void 0 ? void 0 : _substrateApi$api$que3.poolMembers.multi(useAddresses, async ledgers => {
    if (ledgers) {
      await Promise.all(ledgers.map(async (_poolMemberInfo, i) => {
        const poolMemberInfo = _poolMemberInfo.toPrimitive();
        const owner = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_1__.reformatAddress)(useAddresses[i], 42);
        if (poolMemberInfo) {
          const bondedBalance = poolMemberInfo.points;
          const unbondedBalance = poolMemberInfo.unbondingEras;
          let unlockingBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_2___default())(0);
          const bnBondedBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_2___default())(bondedBalance.toString());
          Object.entries(unbondedBalance).forEach(([, value]) => {
            const bnUnbondedBalance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_2___default())(value.toString());
            unlockingBalance = unlockingBalance.add(bnUnbondedBalance);
          });
          const totalBalance = bnBondedBalance.add(unlockingBalance);
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: totalBalance.toString(),
            activeBalance: bnBondedBalance.toString(),
            unlockingBalance: unlockingBalance.toString(),
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.POOLED,
            address: owner
          });
          const nominatorMetadata = await (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_4__.subscribeRelayChainPoolMemberMetadata)(chainInfoMap[chain], owner, substrateApi, poolMemberInfo);
          nominatorStateCallback(nominatorMetadata);
        } else {
          stakingCallback(chain, {
            name: chainInfoMap[chain].name,
            chain: chain,
            balance: '0',
            activeBalance: '0',
            unlockingBalance: '0',
            nativeToken: symbol,
            unit: symbol,
            state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.APIItemState.READY,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.POOLED,
            address: owner
          });
          nominatorStateCallback({
            chain,
            type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.POOLED,
            address: owner,
            status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingStatus.NOT_STAKING,
            activeStake: '0',
            nominations: [],
            // can only join 1 pool at a time
            unstakings: []
          });
        }
      }));
    }
  });
}
async function getNominationPoolReward(addresses, chainInfoMap, substrateApiMap, callBack) {
  const targetNetworks = [];
  const validAddresses = [];
  Object.keys(chainInfoMap).forEach(key => {
    targetNetworks.push(key);
  });
  addresses.forEach(address => {
    if (!(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.isEthereumAddress)(address)) {
      validAddresses.push(address);
    }
  });
  try {
    await Promise.all(targetNetworks.map(async networkKey => {
      const substrateApi = await substrateApiMap[networkKey].isReady;
      if (substrateApi.api.call.nominationPoolsApi) {
        await Promise.all(validAddresses.map(async address => {
          var _substrateApi$api$cal, _substrateApi$api$cal2;
          const _unclaimedReward = await ((_substrateApi$api$cal = substrateApi.api.call) === null || _substrateApi$api$cal === void 0 ? void 0 : (_substrateApi$api$cal2 = _substrateApi$api$cal.nominationPoolsApi) === null || _substrateApi$api$cal2 === void 0 ? void 0 : _substrateApi$api$cal2.pendingRewards(address));
          if (_unclaimedReward) {
            callBack({
              address: address,
              chain: networkKey,
              unclaimedReward: _unclaimedReward.toString(),
              name: chainInfoMap[networkKey].name,
              state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.APIItemState.READY,
              type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.POOLED
            });
          }
        }));
      }
    }));
  } catch (e) {
    console.debug(e);
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/staking/subsquidStaking.ts":
/*!*****************************************************************!*\
  !*** ../extension-base/src/koni/api/staking/subsquidStaking.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getAllSubsquidStaking": () => (/* binding */ getAllSubsquidStaking)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_config__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/config */ "../extension-base/src/koni/api/staking/config.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ "../../node_modules/axios/lib/axios.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0







const getSubsquidQuery = (account, chain) => {
  if (chain === 'moonbeam' || chain === 'moonriver' || chain === 'astar') {
    return `
    query MyQuery {
      stakerById(id: "${account}") {
        totalReward
        activeBond
        rewards(limit: 1, orderBy: blockNumber_DESC) {
          amount
        }
      }
    }`;
  }
  return `
  query MyQuery {
    stakerById(id: "${account}") {
      totalReward
      totalSlash
      activeBond
      rewards(limit: 1, orderBy: blockNumber_DESC) {
        amount
      }
    }
  }`;
};
const getSubsquidStaking = async (accounts, chain, chainInfoMap, callback) => {
  try {
    await Promise.all(accounts.map(async account => {
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isChainEvmCompatible)(chainInfoMap[chain]) && (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_1__.isEthereumAddress)(account) || !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isChainEvmCompatible)(chainInfoMap[chain]) && !(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_1__.isEthereumAddress)(account)) {
        const parsedAccount = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.reformatAddress)(account, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainSubstrateAddressPrefix)(chainInfoMap[chain]));
        const stakingRewardItem = {
          chain: chain,
          name: chainInfoMap[chain].name,
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.APIItemState.READY,
          type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_3__.StakingType.NOMINATED,
          address: (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.reformatAddress)(account, 42)
        };
        const resp = await (0,axios__WEBPACK_IMPORTED_MODULE_4__["default"])({
          url: _subwallet_extension_base_koni_api_staking_config__WEBPACK_IMPORTED_MODULE_5__.SUBSQUID_ENDPOINTS[chain],
          method: 'post',
          data: {
            query: getSubsquidQuery(parsedAccount, chain)
          }
        });
        if (resp.status === 200) {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          const respData = resp.data.data;
          const rewardItem = respData.stakerById;
          if (rewardItem) {
            const latestReward = rewardItem.rewards[0];
            if (rewardItem.totalReward) {
              stakingRewardItem.totalReward = rewardItem.totalReward;
            }
            if (rewardItem.totalSlash) {
              stakingRewardItem.totalSlash = rewardItem.totalSlash;
            }
            if (latestReward && latestReward.amount) {
              stakingRewardItem.latestReward = latestReward.amount;
            }
          }
        }
        if (stakingRewardItem.totalReward && parseFloat(stakingRewardItem.totalReward) > 0) {
          callback(stakingRewardItem);
        }
      }
    }));
  } catch (e) {
    console.debug(e);
  }
};
const getAllSubsquidStaking = async (accounts, chainInfoMap, callback) => {
  const filteredNetworks = [];
  Object.values(chainInfoMap).forEach(network => {
    if (_subwallet_extension_base_koni_api_staking_config__WEBPACK_IMPORTED_MODULE_5__.INDEXER_SUPPORTED_STAKING_CHAINS.includes(network.slug)) {
      filteredNetworks.push(network.slug);
    }
  });
  try {
    await Promise.all(filteredNetworks.map(async network => {
      await getSubsquidStaking(accounts, network, chainInfoMap, callback);
    }));
  } catch (e) {
    console.debug(e);
  }
};

/***/ }),

/***/ "../extension-base/src/koni/api/tokens/evm/balance.ts":
/*!************************************************************!*\
  !*** ../extension-base/src/koni/api/tokens/evm/balance.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEVMBalance": () => (/* binding */ getEVMBalance)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0

async function getEVMBalance(networkKey, addresses, evmApiMap) {
  const web3Api = evmApiMap[networkKey];
  return await Promise.all(addresses.map(async address => {
    return await web3Api.api.eth.getBalance(address);
  }));
}

/***/ }),

/***/ "../extension-base/src/koni/api/tokens/evm/transfer.ts":
/*!*************************************************************!*\
  !*** ../extension-base/src/koni/api/tokens/evm/transfer.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getERC20TransactionObject": () => (/* binding */ getERC20TransactionObject),
/* harmony export */   "getERC721Transaction": () => (/* binding */ getERC721Transaction),
/* harmony export */   "getEVMTransactionObject": () => (/* binding */ getEVMTransactionObject),
/* harmony export */   "handleTransferBalanceResult": () => (/* binding */ handleTransferBalanceResult)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_evm_web3__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/evm/web3 */ "../extension-base/src/koni/api/tokens/evm/web3.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/helper */ "../extension-base/src/services/chain-service/helper/index.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/toBn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_3__);
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0






const handleTransferBalanceResult = ({
  callback,
  changeValue,
  networkKey,
  receipt,
  response,
  updateState
}) => {
  response.status = true;
  let fee;
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._BALANCE_PARSING_CHAIN_GROUP.bobabeam.indexOf(networkKey) > -1) {
    // @ts-ignore
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    fee = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__.hexToBn)(receipt.l1Fee || '0x0').add((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_1__.hexToBn)(receipt.l2BobaFee || '0x0')).toString();
  } else {
    fee = (receipt.gasUsed * receipt.effectiveGasPrice).toString();
  }
  response.txResult = {
    change: changeValue || '0',
    fee
  };
  updateState && updateState({
    status: receipt.status ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ExternalRequestPromiseStatus.COMPLETED : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ExternalRequestPromiseStatus.FAILED
  });
  callback(response);
};
async function getEVMTransactionObject(chainInfo, from, to, value, transferAll, evmApiMap) {
  const networkKey = chainInfo.slug;
  const web3Api = evmApiMap[networkKey];
  const gasPrice = await web3Api.api.eth.getGasPrice();
  const transactionObject = {
    gasPrice: gasPrice,
    to: to,
    value: value,
    from: from
  };
  const gasLimit = await web3Api.api.eth.estimateGas(transactionObject);
  transactionObject.gas = gasLimit;
  const estimateFee = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(gasLimit).mul(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(gasPrice));
  transactionObject.value = transferAll ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(value).sub(estimateFee).toString() : value;
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__.EVM_REFORMAT_DECIMALS.acala.includes(networkKey)) {
    const numberReplace = 18 - 12;
    transactionObject.value = transactionObject.value.substring(0, transactionObject.value.length - 6) + new Array(numberReplace).fill('0').join('');
  }
  return [transactionObject, transactionObject.value.toString()];
}
async function getERC20TransactionObject(assetAddress, chainInfo, from, to, value, transferAll, evmApiMap) {
  const networkKey = chainInfo.slug;
  const evmApi = evmApiMap[networkKey];
  const erc20Contract = (0,_subwallet_extension_base_koni_api_tokens_evm_web3__WEBPACK_IMPORTED_MODULE_4__.getERC20Contract)(networkKey, assetAddress, evmApiMap);
  let freeAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(0);
  let transferValue = value;
  if (transferAll) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
    const bal = await erc20Contract.methods.balanceOf(from).call();
    freeAmount = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(bal || '0');
    transferValue = freeAmount.toString() || '0';
  }
  function generateTransferData(to, transferValue) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
    return erc20Contract.methods.transfer(to, transferValue).encodeABI();
  }
  const transferData = generateTransferData(to, transferValue);
  const [gasLimit, gasPrice] = await Promise.all([
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
  erc20Contract.methods.transfer(to, transferValue).estimateGas({
    from
  }), evmApi.api.eth.getGasPrice()]);
  const transactionObject = {
    gasPrice: gasPrice,
    gas: gasLimit,
    from,
    to: assetAddress,
    data: transferData
  };
  if (transferAll) {
    transferValue = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_3___default())(freeAmount).toString();
    transactionObject.data = generateTransferData(to, transferValue);
  }
  return [transactionObject, transferValue];
}
async function getERC721Transaction(web3Api, contractAddress, senderAddress, recipientAddress, tokenId) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
  const contract = new web3Api.api.eth.Contract(_subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_5__._ERC721_ABI, contractAddress);
  const [gasLimit, gasPrice] = await Promise.all([
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
  contract.methods.safeTransferFrom(senderAddress, recipientAddress, tokenId).estimateGas({
    from: senderAddress
  }), web3Api.api.eth.getGasPrice()]);
  return {
    from: senderAddress,
    gasPrice,
    gas: gasLimit,
    to: contractAddress,
    value: '0x00',
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
    data: contract.methods.safeTransferFrom(senderAddress, recipientAddress, tokenId).encodeABI()
  };
}

/***/ }),

/***/ "../extension-base/src/koni/api/tokens/evm/web3.ts":
/*!*********************************************************!*\
  !*** ../extension-base/src/koni/api/tokens/evm/web3.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getERC20Contract": () => (/* binding */ getERC20Contract)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/helper */ "../extension-base/src/services/chain-service/helper/index.ts");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0


const getERC20Contract = (networkKey, assetAddress, evmApiMap, options = {}) => {
  // @ts-ignore
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access
  return new evmApiMap[networkKey].api.eth.Contract(_subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_0__._ERC20_ABI, assetAddress, options);
};

/***/ }),

/***/ "../extension-base/src/koni/api/tokens/wasm/index.ts":
/*!***********************************************************!*\
  !*** ../extension-base/src/koni/api/tokens/wasm/index.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPSP22ContractPromise": () => (/* binding */ getPSP22ContractPromise),
/* harmony export */   "getPSP34ContractPromise": () => (/* binding */ getPSP34ContractPromise),
/* harmony export */   "getPSP34TransferExtrinsic": () => (/* binding */ getPSP34TransferExtrinsic),
/* harmony export */   "getTokenUriMethod": () => (/* binding */ getTokenUriMethod),
/* harmony export */   "isAzeroDomainNft": () => (/* binding */ isAzeroDomainNft),
/* harmony export */   "isNeurogunNft": () => (/* binding */ isNeurogunNft),
/* harmony export */   "isPinkRoboNft": () => (/* binding */ isPinkRoboNft)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm/utils */ "../extension-base/src/koni/api/tokens/wasm/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/helper */ "../extension-base/src/services/chain-service/helper/index.ts");
/* harmony import */ var _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/api-contract */ "../../node_modules/@polkadot/api-contract/promise/index.js");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0




function getPSP22ContractPromise(apiPromise, contractAddress) {
  return new _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_0__.ContractPromise(apiPromise, _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_1__._PSP22_ABI, contractAddress);
}
function isPinkRoboNft(contractAddress) {
  return ['XoywUxTTtNKPRrRN7V5KXCqz2QLMFeK7DxhpSniqZHps5Xq'].includes(contractAddress);
}
function isNeurogunNft(contractAddress) {
  return ['aZ9bd2tHeGKrs3FnJv5oe7kgVrP5GQvdJMhC2GxjXA2Yqbd'].includes(contractAddress);
}
function isAzeroDomainNft(contractAddress) {
  return ['5FsB91tXSEuMj6akzdPczAtmBaVKToqHmtAwSUzXh49AYzaD', '5CTQBfBC9SfdrCDBJdfLiyW2pg9z5W6C6Es8sK313BLnFgDf'].includes(contractAddress);
}
function getPSP34ContractPromise(apiPromise, contractAddress) {
  if (isPinkRoboNft(contractAddress)) {
    return new _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_0__.ContractPromise(apiPromise, _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_1__._PINK_PSP34_ABI, contractAddress);
  }
  if (isNeurogunNft(contractAddress)) {
    return new _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_0__.ContractPromise(apiPromise, _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_1__._NEUROGUNS_PSP34_ABI, contractAddress);
  }
  if (isAzeroDomainNft(contractAddress)) {
    return new _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_0__.ContractPromise(apiPromise, _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_1__._AZERO_DOMAIN_REGISTRY_ABI, contractAddress);
  }
  return new _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_0__.ContractPromise(apiPromise, _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_1__._PSP34_ABI, contractAddress);
}
function getTokenUriMethod(contractAddress) {
  if (isPinkRoboNft(contractAddress)) {
    return 'pinkMint::tokenUri';
  }
  if (isNeurogunNft(contractAddress)) {
    return 'tokenUri';
  }
  return 'psp34Traits::tokenUri';
}
const mustFormatNumberReg = /^-?[0-9][0-9,.]+$/;
async function getPSP34TransferExtrinsic(networkKey, substrateApi, senderAddress, recipientAddress, params) {
  const contractAddress = params.contractAddress;
  const onChainOption = params.onChainOption;
  for (const [key, value] of Object.entries(onChainOption)) {
    if (mustFormatNumberReg.test(value)) {
      onChainOption[key] = value.replaceAll(',', '');
    }
  }
  try {
    const contractPromise = getPSP34ContractPromise(substrateApi.api, contractAddress);
    // @ts-ignore
    const gasLimit = await (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_2__.getWasmContractGasLimit)(substrateApi.api, senderAddress, 'psp34::transfer', contractPromise, {}, [recipientAddress, onChainOption, {}]);

    // @ts-ignore
    return contractPromise.tx['psp34::transfer']({
      gasLimit
    }, recipientAddress, onChainOption, {});
  } catch (e) {
    console.debug(e);
    return null;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/api/tokens/wasm/utils.ts":
/*!***********************************************************!*\
  !*** ../extension-base/src/koni/api/tokens/wasm/utils.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getDefaultWeightV2": () => (/* binding */ getDefaultWeightV2),
/* harmony export */   "getWasmContractGasLimit": () => (/* binding */ getWasmContractGasLimit)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0


const MAX_CALL_WEIGHT = '5000000000000';
const DEFAULT_REF_TIME = '1000000000000';
const toContractAbiMessage = (contractPromise, message) => {
  const value = contractPromise.abi.messages.find(m => m.method === message);
  if (!value) {
    const messages = contractPromise === null || contractPromise === void 0 ? void 0 : contractPromise.abi.messages.map(m => m.method).join(', ');
    const error = `"${message}" not found in metadata.spec.messages: [${messages}]`;
    return {
      ok: false,
      error
    };
  }
  return {
    ok: true,
    value
  };
};
async function getWasmContractGasLimit(api, callerAddress, message, contract, options = {}, args = []) {
  try {
    var _abiMessage$value;
    const abiMessage = toContractAbiMessage(contract, message);
    if (!abiMessage.ok) {
      return getDefaultWeightV2(api, true);
    }

    // @ts-ignore
    const {
      gasLimit,
      storageDepositLimit,
      value
    } = options;

    // @ts-ignore
    const {
      gasRequired
    } = await api.call.contractsApi.call(callerAddress, contract.address, value !== null && value !== void 0 ? value : new (_polkadot_util__WEBPACK_IMPORTED_MODULE_0___default())(0), gasLimit !== null && gasLimit !== void 0 ? gasLimit : null, storageDepositLimit !== null && storageDepositLimit !== void 0 ? storageDepositLimit : null, abiMessage === null || abiMessage === void 0 ? void 0 : (_abiMessage$value = abiMessage.value) === null || _abiMessage$value === void 0 ? void 0 : _abiMessage$value.toU8a(args));
    return gasRequired;
  } catch {
    return getDefaultWeightV2(api, true);
  }
}
function getDefaultWeightV2(apiPromise, isFallback) {
  const proofSize = isFallback ? 3407872 : MAX_CALL_WEIGHT; // TODO: handle error better
  const refTime = isFallback ? 32490000000 : DEFAULT_REF_TIME;
  return apiPromise.registry.createType('WeightV2', {
    refTime,
    proofSize
  });
}

/***/ }),

/***/ "../extension-base/src/koni/api/xcm/index.ts":
/*!***************************************************!*\
  !*** ../extension-base/src/koni/api/xcm/index.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createXcmExtrinsic": () => (/* binding */ createXcmExtrinsic)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_xcm_polkadotXcm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/xcm/polkadotXcm */ "../extension-base/src/koni/api/xcm/polkadotXcm.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_xcm_xcmPallet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/xcm/xcmPallet */ "../extension-base/src/koni/api/xcm/xcmPallet.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_xcm_xTokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/xcm/xTokens */ "../extension-base/src/koni/api/xcm/xTokens.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0





const createXcmExtrinsic = async ({
  chainInfoMap,
  destinationTokenInfo,
  originTokenInfo,
  recipient,
  sendingValue,
  substrateApi
}) => {
  const originChainInfo = chainInfoMap[originTokenInfo.originChain];
  const destinationChainInfo = chainInfoMap[destinationTokenInfo.originChain];
  const chainApi = await substrateApi.isReady;
  const api = chainApi.api;
  let extrinsic;
  if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._XCM_CHAIN_GROUP.polkadotXcm.includes(originTokenInfo.originChain)) {
    extrinsic = (0,_subwallet_extension_base_koni_api_xcm_polkadotXcm__WEBPACK_IMPORTED_MODULE_1__.getExtrinsicByPolkadotXcmPallet)(originTokenInfo, originChainInfo, destinationChainInfo, recipient, sendingValue, api);
  } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_0__._XCM_CHAIN_GROUP.xcmPallet.includes(originTokenInfo.originChain)) {
    extrinsic = (0,_subwallet_extension_base_koni_api_xcm_xcmPallet__WEBPACK_IMPORTED_MODULE_2__.getExtrinsicByXcmPalletPallet)(originTokenInfo, originChainInfo, destinationChainInfo, recipient, sendingValue, api);
  } else {
    extrinsic = (0,_subwallet_extension_base_koni_api_xcm_xTokens__WEBPACK_IMPORTED_MODULE_3__.getExtrinsicByXtokensPallet)(originTokenInfo, originChainInfo, destinationChainInfo, recipient, sendingValue, api);
  }
  return extrinsic;
};

/***/ }),

/***/ "../extension-base/src/koni/api/xcm/polkadotXcm.ts":
/*!*********************************************************!*\
  !*** ../extension-base/src/koni/api/xcm/polkadotXcm.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExtrinsicByPolkadotXcmPallet": () => (/* binding */ getExtrinsicByPolkadotXcmPallet)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/xcm/utils */ "../extension-base/src/koni/api/xcm/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0



function getExtrinsicByPolkadotXcmPallet(tokenInfo, originChainInfo, destinationChainInfo, recipientAddress, value, api) {
  const weightParam = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getDestWeight)();
  const version = ['statemint', 'statemine', 'shiden', 'astar'].includes(originChainInfo.slug) ? 'V3' : 'V1';
  const beneficiary = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getBeneficiary)(destinationChainInfo, recipientAddress, version);
  const destination = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getDestinationChainLocation)(originChainInfo, destinationChainInfo, version);
  let assetLocation = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getTokenLocation)(tokenInfo, value, version);
  let method = 'limitedReserveTransferAssets';
  if (['astar', 'shiden'].includes(originChainInfo.slug) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_1__._isNativeToken)(tokenInfo)) {
    method = 'limitedReserveWithdrawAssets';
  } else if (['statemint', 'statemine'].includes(originChainInfo.slug) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_1__._isSubstrateRelayChain)(destinationChainInfo)) {
    assetLocation = {
      [version]: [{
        id: {
          Concrete: {
            parents: 1,
            interior: 'Here'
          }
        },
        fun: {
          Fungible: value
        }
      }]
    };
    method = 'limitedTeleportAssets';
  }
  return api.tx.polkadotXcm[method](destination, beneficiary, assetLocation, 0,
  // FeeAssetItem
  weightParam);
}

/***/ }),

/***/ "../extension-base/src/koni/api/xcm/utils.ts":
/*!***************************************************!*\
  !*** ../extension-base/src/koni/api/xcm/utils.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FOUR_INSTRUCTIONS_LIMITED_WEIGHT": () => (/* binding */ FOUR_INSTRUCTIONS_LIMITED_WEIGHT),
/* harmony export */   "FOUR_INSTRUCTIONS_WEIGHT": () => (/* binding */ FOUR_INSTRUCTIONS_WEIGHT),
/* harmony export */   "getBeneficiary": () => (/* binding */ getBeneficiary),
/* harmony export */   "getDestMultilocation": () => (/* binding */ getDestMultilocation),
/* harmony export */   "getDestWeight": () => (/* binding */ getDestWeight),
/* harmony export */   "getDestinationChainLocation": () => (/* binding */ getDestinationChainLocation),
/* harmony export */   "getReceiverLocation": () => (/* binding */ getReceiverLocation),
/* harmony export */   "getTokenLocation": () => (/* binding */ getTokenLocation)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/chain-list */ "../../node_modules/@subwallet/chain-list/index.js");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/evmToAddress.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/decode.js");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0




const FOUR_INSTRUCTIONS_WEIGHT = 5000000000;
const FOUR_INSTRUCTIONS_LIMITED_WEIGHT = {
  Limited: 5000000000
};

// get multilocation for destination chain from a parachain

function getReceiverLocation(destinationChainInfo, toAddress, version) {
  const network = version && version === 'V3' ? undefined : 'Any';
  if (destinationChainInfo.slug === _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_0__.COMMON_CHAIN_SLUGS.ASTAR_EVM) {
    const ss58Address = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_1__.evmToAddress)(toAddress, 2006); // TODO: shouldn't pass addressPrefix directly

    return {
      AccountId32: {
        network,
        id: (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__.decodeAddress)(ss58Address)
      }
    };
  }
  if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isChainEvmCompatible)(destinationChainInfo)) {
    return {
      AccountKey20: {
        network,
        key: toAddress
      }
    };
  }
  return {
    AccountId32: {
      network,
      id: (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__.decodeAddress)(toAddress)
    }
  };
}
function getBeneficiary(destinationChainInfo, recipientAddress, version = 'V1') {
  const receiverLocation = getReceiverLocation(destinationChainInfo, recipientAddress, version);
  return {
    [version]: {
      parents: 0,
      interior: {
        X1: receiverLocation
      }
    }
  };
}
function getDestWeight() {
  return 'Unlimited';
}
function getTokenLocation(tokenInfo, sendingValue, version = 'V1') {
  if (!(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isNativeToken)(tokenInfo)) {
    const multilocation = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getXcmAssetMultilocation)(tokenInfo);
    return {
      [version]: [{
        id: multilocation,
        fun: {
          Fungible: sendingValue
        }
      }]
    };
  }
  return {
    [version]: [{
      id: {
        Concrete: {
          parents: 0,
          interior: 'Here'
        }
      },
      fun: {
        Fungible: sendingValue
      }
    }]
  };
}
function getDestMultilocation(destinationChainInfo, recipient, version = 'V1') {
  const receiverLocation = getReceiverLocation(destinationChainInfo, recipient, version);
  if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isSubstrateParaChain)(destinationChainInfo)) {
    const interior = {
      X2: [{
        Parachain: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getSubstrateParaId)(destinationChainInfo)
      }, receiverLocation]
    };
    return {
      [version]: {
        parents: 1,
        interior
      }
    };
  }
  return {
    [version]: {
      parents: 1,
      interior: {
        X1: receiverLocation
      }
    }
  };
}
function getDestinationChainLocation(originChainInfo, destinationChainInfo, version = 'V1') {
  const parents = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isSubstrateRelayChain)(originChainInfo) ? 0 : 1;
  const interior = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isSubstrateParaChain)(destinationChainInfo) ? {
    X1: {
      Parachain: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getSubstrateParaId)(destinationChainInfo)
    }
  } : 'Here';
  return {
    [version]: {
      parents,
      interior
    }
  };
}

/***/ }),

/***/ "../extension-base/src/koni/api/xcm/xTokens.ts":
/*!*****************************************************!*\
  !*** ../extension-base/src/koni/api/xcm/xTokens.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExtrinsicByXtokensPallet": () => (/* binding */ getExtrinsicByXtokensPallet)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/xcm/utils */ "../extension-base/src/koni/api/xcm/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0



function getCurrencyId(tokenInfo) {
  if (['acala', 'karura'].includes(tokenInfo.originChain) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._isNativeToken)(tokenInfo)) {
    return (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getXcmAssetMultilocation)(tokenInfo);
  } else if (['moonbeam', 'moonbase', 'moonriver'].includes(tokenInfo.originChain)) {
    const tokenType = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getXcmAssetType)(tokenInfo);
    const assetId = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getXcmAssetId)(tokenInfo);
    return {
      [tokenType]: assetId
    };
  } else if (['pioneer'].includes(tokenInfo.originChain)) {
    return (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getXcmAssetMultilocation)(tokenInfo);
  }
  return (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainInfo)(tokenInfo) || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getTokenOnChainAssetId)(tokenInfo);
}
function getExtrinsicByXtokensPallet(tokenInfo, originChainInfo, destinationChainInfo, recipientAddress, value, api) {
  const weightParam = ['pioneer'].includes(originChainInfo.slug) ? _subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_1__.FOUR_INSTRUCTIONS_WEIGHT : (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_1__.getDestWeight)();
  const destVersion = ['moonbeam', 'moonriver', 'bifrost_dot', 'interlay', 'hydradx_main', 'acala'].includes(originChainInfo.slug) ? 'V3' : undefined;
  return api.tx.xTokens.transfer(getCurrencyId(tokenInfo), value, (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_1__.getDestMultilocation)(destinationChainInfo, recipientAddress, destVersion), weightParam);
}

/***/ }),

/***/ "../extension-base/src/koni/api/xcm/xcmPallet.ts":
/*!*******************************************************!*\
  !*** ../extension-base/src/koni/api/xcm/xcmPallet.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getExtrinsicByXcmPalletPallet": () => (/* binding */ getExtrinsicByXcmPalletPallet)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/xcm/utils */ "../extension-base/src/koni/api/xcm/utils.ts");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0


// this pallet is only used by Relaychains
function getExtrinsicByXcmPalletPallet(tokenInfo, originChainInfo, destinationChainInfo, recipientAddress, value, api) {
  const weightParam = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getDestWeight)();
  const xcmVer = 'V3';
  const destination = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getDestinationChainLocation)(originChainInfo, destinationChainInfo, xcmVer);
  const beneficiary = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getBeneficiary)(destinationChainInfo, recipientAddress, xcmVer);
  const tokenLocation = (0,_subwallet_extension_base_koni_api_xcm_utils__WEBPACK_IMPORTED_MODULE_0__.getTokenLocation)(tokenInfo, value, xcmVer);
  let method = 'limitedReserveTransferAssets';
  if (['statemint', 'statemine'].includes(destinationChainInfo.slug)) {
    method = 'limitedTeleportAssets';
  }
  return api.tx.xcmPallet[method](destination, beneficiary, tokenLocation, 0, weightParam);
}

/***/ }),

/***/ "../extension-base/src/koni/background/cron.ts":
/*!*****************************************************!*\
  !*** ../extension-base/src/koni/background/cron.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KoniCron": () => (/* binding */ KoniCron)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/Subject.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0






class KoniCron {
  status = 'pending';
  constructor(state, subscriptions, dbService) {
    this.subscriptions = subscriptions;
    this.dbService = dbService;
    this.state = state;
    this.logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__.logger)('Cron');
    // this.init();
  }

  cronMap = {};
  subjectMap = {};
  getCron = name => {
    return this.cronMap[name];
  };
  getSubjectMap = name => {
    return this.subjectMap[name];
  };
  addCron = (name, callback, interval, runFirst = true) => {
    if (runFirst) {
      callback();
    }
    this.cronMap[name] = setInterval(callback, interval);
  };
  addSubscribeCron = (name, callback, interval) => {
    const sb = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
    callback(sb);
    this.subjectMap[name] = sb;
    this.cronMap[name] = setInterval(callback, interval);
  };
  removeCron = name => {
    const interval = this.cronMap[name];
    if (interval) {
      clearInterval(interval);
      delete this.cronMap[name];
    }
  };
  removeAllCrons = () => {
    Object.entries(this.cronMap).forEach(([key, interval]) => {
      clearInterval(interval);
      delete this.cronMap[key];
    });
  };
  start = async () => {
    if (this.status === 'running') {
      return;
    }
    await Promise.all([this.state.eventService.waitKeyringReady, this.state.eventService.waitAssetReady]);
    const currentAccountInfo = this.state.keyringService.currentAccount;
    const commonReloadEvents = ['account.add', 'account.remove', 'account.updateCurrent', 'chain.add', 'asset.updateState'];
    this.eventHandler = (events, eventTypes) => {
      var _serviceInfo$currentA;
      const serviceInfo = this.state.getServiceInfo();
      const commonReload = eventTypes.some(eventType => commonReloadEvents.includes(eventType));
      const chainUpdated = eventTypes.includes('chain.updateState');
      const reloadMantaPay = eventTypes.includes('mantaPay.submitTransaction') || eventTypes.includes('mantaPay.enable');
      const updatedChains = [];
      if (chainUpdated) {
        events.forEach(event => {
          if (event.type === 'chain.updateState') {
            const updatedData = event.data;
            updatedChains.push(updatedData[0]);
          }
        });
      }
      if (!commonReload && !chainUpdated && !reloadMantaPay) {
        return;
      }
      const address = (_serviceInfo$currentA = serviceInfo.currentAccountInfo) === null || _serviceInfo$currentA === void 0 ? void 0 : _serviceInfo$currentA.address;
      if (!address) {
        return;
      }
      const chainInfoMap = serviceInfo.chainInfoMap;
      const needUpdateNft = this.needUpdateNft(chainInfoMap, updatedChains);

      // MantaPay
      reloadMantaPay && this.removeCron('syncMantaPay');

      // NFT
      (commonReload || needUpdateNft) && this.resetNft(address);
      (commonReload || needUpdateNft) && this.removeCron('refreshNft');

      // Chains
      if (this.checkNetworkAvailable(serviceInfo)) {
        // only add cron job if there's at least 1 active network
        (commonReload || needUpdateNft) && this.addCron('refreshNft', this.refreshNft(address, serviceInfo.chainApiMap, this.state.getSmartContractNfts(), this.state.getActiveChainInfoMap()), _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.CRON_REFRESH_NFT_INTERVAL);
        reloadMantaPay && this.addCron('syncMantaPay', this.syncMantaPay, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.CRON_SYNC_MANTA_PAY);
      } else {
        this.setStakingRewardReady();
      }
    };
    this.state.eventService.onLazy(this.eventHandler);
    if (!(currentAccountInfo !== null && currentAccountInfo !== void 0 && currentAccountInfo.address)) {
      return;
    }
    if (Object.keys(this.state.getSubstrateApiMap()).length !== 0 || Object.keys(this.state.getEvmApiMap()).length !== 0) {
      this.resetNft(currentAccountInfo.address);
      this.addCron('refreshNft', this.refreshNft(currentAccountInfo.address, this.state.getApiMap(), this.state.getSmartContractNfts(), this.state.getActiveChainInfoMap()), _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.CRON_REFRESH_NFT_INTERVAL);
      this.addCron('refreshStakingReward', this.refreshStakingReward(currentAccountInfo.address), _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.CRON_REFRESH_STAKING_REWARD_INTERVAL);
      this.addCron('refreshPoolingSta             kingReward', this.refreshStakingRewardFastInterval(currentAccountInfo.address), _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.CRON_REFRESH_STAKING_REWARD_FAST_INTERVAL);
      this.addCron('syncMantaPay', this.syncMantaPay, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.CRON_SYNC_MANTA_PAY);
    } else {
      this.setStakingRewardReady();
    }
    this.status = 'running';
  };
  stop = async () => {
    if (this.status === 'stopped') {
      return;
    }

    // Unsubscribe events
    if (this.eventHandler) {
      this.state.eventService.offLazy(this.eventHandler);
      this.eventHandler = undefined;
    }
    if (this.serviceSubscription) {
      this.serviceSubscription.unsubscribe();
      this.serviceSubscription = undefined;
    }
    this.removeAllCrons();
    this.status = 'stopped';
    return Promise.resolve();
  };
  syncMantaPay = () => {
    if (this.state.isMantaPayEnabled) {
      this.state.syncMantaPay().catch(console.warn);
    }
  };
  refreshNft = (address, apiMap, smartContractNfts, chainInfoMap) => {
    return () => {
      this.subscriptions.subscribeNft(address, apiMap.substrate, apiMap.evm, smartContractNfts, chainInfoMap);
    };
  };
  resetNft = newAddress => {
    this.state.resetNft(newAddress);
  };
  refreshStakingReward = address => {
    return () => {
      this.subscriptions.subscribeStakingReward(address).catch(this.logger.error);
    };
  };
  refreshStakingRewardFastInterval = address => {
    return () => {
      this.subscriptions.subscribeStakingRewardFastInterval(address).catch(this.logger.error);
    };
  };
  setStakingRewardReady = () => {
    this.state.updateStakingRewardReady(true);
  };
  checkNetworkAvailable = serviceInfo => {
    return Object.keys(serviceInfo.chainApiMap.substrate).length > 0 || Object.keys(serviceInfo.chainApiMap.evm).length > 0;
  };
  async reloadNft() {
    const address = this.state.keyringService.currentAccount.address;
    const serviceInfo = this.state.getServiceInfo();
    this.resetNft(address);
    this.removeCron('refreshNft');
    this.addCron('refreshNft', this.refreshNft(address, serviceInfo.chainApiMap, this.state.getSmartContractNfts(), this.state.getActiveChainInfoMap()), _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.CRON_REFRESH_NFT_INTERVAL);
    await (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_3__.waitTimeout)(1800);
    return true;
  }
  async reloadStaking() {
    const address = this.state.keyringService.currentAccount.address;
    console.log('reload staking', address);
    await (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_3__.waitTimeout)(1800);
    return true;
  }
  needUpdateNft(chainInfoMap, updatedChains) {
    if (updatedChains && updatedChains.length > 0) {
      return updatedChains.some(updatedChain => {
        const chainInfo = chainInfoMap[updatedChain];
        return (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._isChainSupportNativeNft)(chainInfo) || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._isChainSupportEvmNft)(chainInfo) || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._isChainSupportWasmNft)(chainInfo);
      });
    }
    return false;
  }
}

/***/ }),

/***/ "../extension-base/src/koni/background/handlers/Extension.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/koni/background/handlers/Extension.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KoniExtension)
/* harmony export */ });
/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/common */ "../../node_modules/@ethereumjs/common/dist.browser/index.js");
/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/TransactionError */ "../extension-base/src/background/errors/TransactionError.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/Extension */ "../extension-base/src/background/handlers/Extension.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/helpers */ "../extension-base/src/background/handlers/helpers.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/subscriptions */ "../extension-base/src/background/handlers/subscriptions.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_background_warnings_TransactionWarning__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @subwallet/extension-base/background/warnings/TransactionWarning */ "../extension-base/src/background/warnings/TransactionWarning.ts");
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_domain__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/domain */ "../extension-base/src/koni/api/dotsama/domain.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_parseTransaction__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/parseTransaction */ "../extension-base/src/koni/api/dotsama/parseTransaction.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_transfer__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/transfer */ "../extension-base/src/koni/api/dotsama/transfer.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft_transfer__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft/transfer */ "../extension-base/src/koni/api/nft/transfer.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding */ "../extension-base/src/koni/api/staking/bonding/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/paraChain */ "../extension-base/src/koni/api/staking/bonding/paraChain.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding/relayChain */ "../extension-base/src/koni/api/staking/bonding/relayChain.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_evm_transfer__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/evm/transfer */ "../extension-base/src/koni/api/tokens/evm/transfer.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm */ "../extension-base/src/koni/api/tokens/wasm/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_xcm__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/xcm */ "../extension-base/src/koni/api/xcm/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/types */ "../extension-base/src/services/chain-service/types.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @subwallet/extension-base/services/request-service/constants */ "../extension-base/src/services/request-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/services/setting-service/constants */ "../extension-base/src/services/setting-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_constants__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/constants */ "../extension-base/src/services/wallet-connect-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/helpers */ "../extension-base/src/services/wallet-connect-service/helpers.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/array.ts");
/* harmony import */ var _subwallet_extension_base_utils_address__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @subwallet/extension-base/utils/address */ "../extension-base/src/utils/address.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth */ "../extension-base/src/utils/eth.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth/parseTransaction */ "../extension-base/src/utils/eth/parseTransaction/index.ts");
/* harmony import */ var _subwallet_extension_base_utils_number__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @subwallet/extension-base/utils/number */ "../extension-base/src/utils/number.ts");
/* harmony import */ var _subwallet_keyring__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @subwallet/keyring */ "../../node_modules/@subwallet/keyring/pair/index.js");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/bundle.js");
/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @walletconnect/utils */ "../../node_modules/@walletconnect/utils/dist/index.es.js");
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ "../../node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var ethereumjs_tx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethereumjs-tx */ "../../node_modules/ethereumjs-tx/dist/index.js");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _polkadot_types__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! @polkadot/types */ "../../node_modules/@polkadot/types/create/registry.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/assert.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/hex.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/toU8a.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/u8a/toString.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/u8a/toHex.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/bn/consts.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/stripPrefix.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/ascii.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/mnemonic/generate.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/key/extractSuri.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/mnemonic/validate.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/is.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/decode.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/base64/bs64.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/json/decrypt.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/addressToEvm.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0










































const ETH_DERIVE_DEFAULT = '/m/44\'/60\'/0\'/0/0';
function getSuri(seed, type) {
  return type === 'ethereum' ? `${seed}${ETH_DERIVE_DEFAULT}` : seed;
}
function transformAccounts(accounts) {
  return Object.values(accounts).map(({
    json: {
      address,
      meta
    },
    type
  }) => ({
    address,
    ...meta,
    type
  }));
}
const ACCOUNT_ALL_JSON = {
  address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY,
  name: 'All'
};
class KoniExtension {
  #lockTimeOut = undefined;
  #koniState;
  #timeAutoLock = _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_6__.DEFAULT_AUTO_LOCK_TIME;
  #skipAutoLock = false;
  #alwaysLock = false;
  #firstTime = true;
  constructor(state) {
    this.#koniState = state;
    const updateTimeAutoLock = rs => {
      // Check time auto lock change
      if (this.#timeAutoLock !== rs.timeAutoLock) {
        this.#timeAutoLock = rs.timeAutoLock;
        this.#alwaysLock = !rs.timeAutoLock;
        clearTimeout(this.#lockTimeOut);
        if (this.#timeAutoLock > 0) {
          this.#lockTimeOut = setTimeout(() => {
            if (!this.#skipAutoLock) {
              this.keyringLock();
            }
          }, this.#timeAutoLock * 60 * 1000);
        } else if (this.#alwaysLock) {
          if (!this.#firstTime) {
            this.keyringLock();
          }
        }
      }
      if (this.#firstTime) {
        this.#firstTime = false;
      }
    };
    this.#koniState.settingService.getSettings(updateTimeAutoLock);
    this.#koniState.settingService.getSubject().subscribe({
      next: updateTimeAutoLock
    });
  }

  /// Clone from PolkadotJs
  accountsCreateExternal({
    address,
    genesisHash,
    name
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addExternal(address, {
      genesisHash,
      name
    });
    return true;
  }
  accountsCreateHardware({
    accountIndex,
    address,
    addressOffset,
    genesisHash,
    hardwareType,
    name
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addHardware(address, hardwareType, {
      accountIndex,
      addressOffset,
      genesisHash,
      name
    });
    return true;
  }
  accountsCreateSuri({
    genesisHash,
    name,
    suri,
    type
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addUri(getSuri(suri, type), {
      genesisHash,
      name
    }, type);
    return true;
  }
  accountsChangePassword({
    address,
    newPass,
    oldPass
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to find account'));
    try {
      if (!pair.isLocked) {
        pair.lock();
      }
      pair.decodePkcs8(oldPass);
    } catch (error) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Wrong password'));
    }
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.encryptAccount(pair, newPass);
    return true;
  }
  accountsEdit({
    address,
    name
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to find account'));
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.saveAccountMeta(pair, {
      ...pair.meta,
      name
    });
    return true;
  }
  accountsExport({
    address,
    password
  }) {
    return {
      exportedJson: _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.backupAccount(_subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address), password)
    };
  }
  accountsShow({
    address,
    isShowing
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to find account'));
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.saveAccountMeta(pair, {
      ...pair.meta,
      isHidden: !isShowing
    });
    return true;
  }
  accountsValidate({
    address,
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.backupAccount(_subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address), password);
      return true;
    } catch (e) {
      return false;
    }
  }

  // FIXME This looks very much like what we have in Tabs
  accountsSubscribe(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const accountSubject = this.#koniState.keyringService.accountSubject;
    const subscription = accountSubject.subscribe(accounts => cb(transformAccounts(accounts)));
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
      subscription.unsubscribe();
    });
    return true;
  }
  metadataApprove({
    id
  }) {
    const queued = this.#koniState.getMetaRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      request,
      resolve
    } = queued;
    this.#koniState.saveMetadata(request);
    resolve(true);
    return true;
  }
  metadataGet(genesisHash) {
    return this.#koniState.knownMetadata.find(result => result.genesisHash === genesisHash) || null;
  }
  metadataList() {
    return this.#koniState.knownMetadata;
  }
  metadataReject({
    id
  }) {
    const queued = this.#koniState.getMetaRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      reject
    } = queued;
    reject(new Error('Rejected'));
    return true;
  }
  metadataSubscribe(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.metaSubject.subscribe(requests => cb(requests));
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
      subscription.unsubscribe();
    });
    return this.#koniState.metaSubject.value;
  }
  jsonRestore({
    file,
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.restoreAccount(file, password, true);
    } catch (error) {
      throw new Error(error.message);
    }
  }
  batchRestore({
    file,
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.restoreAccounts(file, password);
    } catch (error) {
      throw new Error(error.message);
    }
  }
  jsonGetAccountInfo(json) {
    try {
      const {
        address,
        meta: {
          genesisHash,
          name
        },
        type
      } = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.createFromJson(json);
      return {
        address,
        genesisHash,
        name,
        type
      };
    } catch (e) {
      console.error(e);
      throw new Error(e.message);
    }
  }
  seedCreate({
    length = _subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__.SEED_DEFAULT_LENGTH,
    seed: _seed,
    type
  }) {
    const seed = _seed || (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_11__.mnemonicGenerate)(length);
    return {
      address: _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.createFromUri(getSuri(seed, type), {}, type).address,
      seed
    };
  }
  seedValidate({
    suri,
    type
  }) {
    const {
      phrase
    } = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_12__.keyExtractSuri)(suri);
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase)) {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase, 256), (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Invalid seed phrase. Please try again.'));
    } else {
      // sadly isHex detects as string, so we need a cast here
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(_subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__.SEED_LENGTHS.includes(phrase.split(' ').length), (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Seed phrase needs to contain {{x}} words', {
        replace: {
          x: _subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__.SEED_LENGTHS.join(', ')
        }
      }));
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_14__.mnemonicValidate)(phrase), (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Invalid seed phrase. Please try again.'));
    }
    return {
      address: _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.createFromUri(getSuri(suri, type), {}, type).address,
      suri
    };
  }

  // TODO: move to request service
  signingApproveSignature({
    id,
    signature
  }) {
    const queued = this.#koniState.getSignRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      resolve
    } = queued;
    resolve({
      id,
      signature
    });
    return true;
  }

  // TODO: move to request service
  signingCancel({
    id
  }) {
    const queued = this.#koniState.getSignRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      reject
    } = queued;
    reject(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.USER_REJECT_REQUEST));
    return true;
  }

  // FIXME This looks very much like what we have in authorization
  signingSubscribe(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.signSubject.subscribe(requests => cb(requests));
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
      subscription.unsubscribe();
    });
    return this.#koniState.signSubject.value;
  }
  windowOpen({
    allowedPath: path,
    params,
    subPath
  }) {
    let paramString = '';
    if (params) {
      paramString += '?';
      for (let i = 0; i < Object.keys(params).length; i++) {
        const [key, value] = Object.entries(params)[i];
        paramString += `${key}=${value}`;
        if (i !== Object.keys(params).length - 1) {
          paramString += '&';
        }
      }
    }
    const url = `${chrome.extension.getURL('index.html')}#${path}${subPath || ''}${paramString}`;
    if (!_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_17__.ALLOWED_PATH.includes(path)) {
      console.error('Not allowed to open the url:', url);
      return false;
    }
    (0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_18__.withErrorLog)(() => chrome.tabs.create({
      url
    }));
    return true;
  }
  derive(parentAddress, suri, password, metadata) {
    const parentPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(parentAddress);
    try {
      parentPair.decodePkcs8(password);
    } catch (e) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Wrong password'));
    }
    try {
      return parentPair.derive(suri, metadata);
    } catch (err) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('"{{suri}}" is not a valid derivation path', {
        replace: {
          suri
        }
      }));
    }
  }
  derivationValidate({
    parentAddress,
    parentPassword,
    suri
  }) {
    const childPair = this.derive(parentAddress, suri, parentPassword, {});
    return {
      address: childPair.address,
      suri
    };
  }
  derivationCreate({
    genesisHash,
    name,
    parentAddress,
    parentPassword,
    suri
  }) {
    const childPair = this.derive(parentAddress, suri, parentPassword, {
      genesisHash,
      name,
      parentAddress,
      suri
    });
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addPair(childPair, true);
    return true;
  }

  ///

  cancelSubscription(id) {
    return this.#koniState.cancelSubscription(id);
  }
  createUnsubscriptionHandle(id, unsubscribe) {
    this.#koniState.createUnsubscriptionHandle(id, unsubscribe);
  }
  decodeAddress = (key, ignoreChecksum, ss58Format) => {
    return _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.decodeAddress(key, ignoreChecksum, ss58Format);
  };
  encodeAddress = (key, ss58Format) => {
    return _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.encodeAddress(key, ss58Format);
  };
  accountExportPrivateKey({
    address,
    password
  }) {
    return this.#koniState.accountExportPrivateKey({
      address,
      password
    });
  }
  checkPublicAndSecretKey(request) {
    return this.#koniState.checkPublicAndSecretKey(request);
  }
  async accountsGetAllWithCurrentAddress(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const keyringService = this.#koniState.keyringService;
    await this.#koniState.eventService.waitAccountReady;
    const currentAccount = keyringService.currentAccount;
    const transformedAccounts = transformAccounts(keyringService.accounts);
    const responseData = {
      accounts: transformedAccounts !== null && transformedAccounts !== void 0 && transformedAccounts.length ? [{
        ...ACCOUNT_ALL_JSON
      }, ...transformedAccounts] : [],
      currentAddress: currentAccount === null || currentAccount === void 0 ? void 0 : currentAccount.address,
      currentGenesisHash: currentAccount === null || currentAccount === void 0 ? void 0 : currentAccount.currentGenesisHash
    };
    const subscriptionAccounts = keyringService.accountSubject.subscribe(storedAccounts => {
      const transformedAccounts = transformAccounts(storedAccounts);
      responseData.accounts = transformedAccounts !== null && transformedAccounts !== void 0 && transformedAccounts.length ? [{
        ...ACCOUNT_ALL_JSON
      }, ...transformedAccounts] : [];
      cb(responseData);
    });
    const subscriptionCurrentAccount = keyringService.currentAccountSubject.subscribe(currentAccountData => {
      responseData.currentAddress = currentAccountData.address;
      responseData.currentGenesisHash = currentAccountData.currentGenesisHash;
      cb(responseData);
    });
    this.createUnsubscriptionHandle(id, () => {
      subscriptionAccounts.unsubscribe();
      subscriptionCurrentAccount.unsubscribe();
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return responseData;
  }
  accountsGetAll(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.keyringOption.optionsSubject.subscribe(options => {
      const optionsInputAddress = {
        options
      };
      cb(optionsInputAddress);
    });
    this.createUnsubscriptionHandle(id, subscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return id;
  }
  subscribeAddresses(id, port) {
    const _cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.keyringService.addressesSubject.subscribe(subjectInfo => {
      const addresses = (0,_subwallet_extension_base_utils_address__WEBPACK_IMPORTED_MODULE_19__.convertSubjectInfoToAddresses)(subjectInfo);
      _cb({
        addresses: addresses
      });
    });
    this.createUnsubscriptionHandle(id, subscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    const subjectInfo = this.#koniState.keyringService.addresses;
    return {
      addresses: (0,_subwallet_extension_base_utils_address__WEBPACK_IMPORTED_MODULE_19__.convertSubjectInfoToAddresses)(subjectInfo)
    };
  }
  saveRecentAccount({
    accountId
  }) {
    if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_20__.isAddress)(accountId)) {
      const address = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_21__.reformatAddress)(accountId);
      const account = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getAccount(address);
      const contact = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getAddress(address);
      return account || contact || {
        ..._subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.saveRecent(address).json,
        publicKey: (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_22__.decodeAddress)(address)
      };
    } else {
      throw Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('This is not an address'));
    }
  }
  editContactAccount({
    address,
    meta
  }) {
    if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_20__.isAddress)(address)) {
      const _address = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_21__.reformatAddress)(address);
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.saveAddress(_address, meta);
      return true;
    } else {
      throw Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('This is not an address'));
    }
  }
  deleteContactAccount({
    address
  }) {
    if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_20__.isAddress)(address)) {
      const _address = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_21__.reformatAddress)(address);
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.forgetAddress(_address);
      return true;
    } else {
      throw Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('This is not an address'));
    }
  }
  _getAuthListV2() {
    const keyringService = this.#koniState.keyringService;
    return new Promise((resolve, reject) => {
      this.#koniState.getAuthorize(rs => {
        const addressList = Object.keys(keyringService.accounts);
        const urlList = Object.keys(rs);
        if (Object.keys(rs[urlList[0]].isAllowedMap).toString() !== addressList.toString()) {
          urlList.forEach(url => {
            addressList.forEach(address => {
              if (!Object.keys(rs[url].isAllowedMap).includes(address)) {
                rs[url].isAllowedMap[address] = false;
              }
            });
            Object.keys(rs[url].isAllowedMap).forEach(address => {
              if (!addressList.includes(address)) {
                delete rs[url].isAllowedMap[address];
              }
            });
          });
          this.#koniState.setAuthorize(rs);
        }
        resolve(rs);
      });
    });
  }
  authorizeSubscribeV2(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.authSubjectV2.subscribe(requests => cb(requests));
    this.createUnsubscriptionHandle(id, subscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.authSubjectV2.value;
  }
  async getAuthListV2() {
    const authList = await this._getAuthListV2();
    return {
      list: authList
    };
  }
  authorizeApproveV2({
    accounts,
    id
  }) {
    const queued = this.#koniState.getAuthRequestV2(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      resolve
    } = queued;
    resolve({
      accounts,
      result: true
    });
    return true;
  }
  authorizeRejectV2({
    id
  }) {
    const queued = this.#koniState.getAuthRequestV2(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      reject
    } = queued;
    reject(new Error('Rejected'));
    return true;
  }
  authorizeCancelV2({
    id
  }) {
    const queued = this.#koniState.getAuthRequestV2(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      reject
    } = queued;

    // Reject without error meaning cancel
    reject(new Error('Cancelled'));
    return true;
  }
  _forgetSite(url, callBack) {
    this.#koniState.getAuthorize(value => {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value, 'The source is not known');
      delete value[url];
      this.#koniState.setAuthorize(value, () => {
        callBack && callBack(value);
      });
    });
  }
  forgetSite(data, id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    this._forgetSite(data.url, items => {
      cb(items);
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  _forgetAllSite(callBack) {
    this.#koniState.getAuthorize(value => {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value, 'The source is not known');
      value = {};
      this.#koniState.setAuthorize(value, () => {
        callBack && callBack(value);
      });
    });
  }
  forgetAllSite(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    this._forgetAllSite(items => {
      cb(items);
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  getAccounts() {
    const storedAccounts = this.#koniState.keyringService.accounts;
    const transformedAccounts = transformAccounts(storedAccounts);
    return transformedAccounts.map(a => a.address);
  }
  isAddressValidWithAuthType(address, accountAuthType) {
    if (accountAuthType === 'substrate') {
      return !(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(address);
    } else if (accountAuthType === 'evm') {
      return (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(address);
    }
    return true;
  }
  filterAccountsByAccountAuthType(accounts, accountAuthType) {
    if (accountAuthType === 'substrate') {
      return accounts.filter(address => !(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(address));
    } else if (accountAuthType === 'evm') {
      return accounts.filter(address => (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(address));
    } else {
      return accounts;
    }
  }
  _changeAuthorizationAll(connectValue, callBack) {
    this.#koniState.getAuthorize(value => {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value, 'The source is not known');
      const accounts = this.getAccounts();
      Object.keys(value).forEach(url => {
        if (!value[url].isAllowed) {
          return;
        }
        const targetAccounts = this.filterAccountsByAccountAuthType(accounts, value[url].accountAuthType);
        targetAccounts.forEach(address => {
          value[url].isAllowedMap[address] = connectValue;
        });
      });
      this.#koniState.setAuthorize(value, () => {
        callBack && callBack(value);
      });
    });
  }
  changeAuthorizationAll(data, id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    this._changeAuthorizationAll(data.connectValue, items => {
      cb(items);
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  _changeAuthorization(url, connectValue, callBack) {
    this.#koniState.getAuthorize(value => {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value[url], 'The source is not known');
      const accounts = this.getAccounts();
      const targetAccounts = this.filterAccountsByAccountAuthType(accounts, value[url].accountAuthType);
      targetAccounts.forEach(address => {
        value[url].isAllowedMap[address] = connectValue;
      });
      this.#koniState.setAuthorize(value, () => {
        callBack && callBack(value);
      });
    });
  }
  toggleAuthorization2(url) {
    return new Promise(resolve => {
      this.#koniState.getAuthorize(value => {
        (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value[url], 'The source is not known');
        value[url].isAllowed = !value[url].isAllowed;
        this.#koniState.setAuthorize(value, () => {
          resolve({
            list: value
          });
        });
      });
    });
  }
  changeAuthorization(data, id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    this._changeAuthorization(data.url, data.connectValue, items => {
      cb(items);
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  _changeAuthorizationPerAcc(address, connectValue, url, callBack) {
    this.#koniState.getAuthorize(value => {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value, 'The source is not known');
      if (this.isAddressValidWithAuthType(address, value[url].accountAuthType)) {
        value[url].isAllowedMap[address] = connectValue;
        this.#koniState.setAuthorize(value, () => {
          callBack && callBack(value);
        });
      } else {
        callBack && callBack(value);
      }
    });
  }
  _changeAuthorizationBlock(connectValue, id) {
    this.#koniState.getAuthorize(value => {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value, 'The source is not known');
      value[id].isAllowed = connectValue;
      this.#koniState.setAuthorize(value);
    });
  }
  _changeAuthorizationPerSite(values, id) {
    this.#koniState.getAuthorize(value => {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(value, 'The source is not known');
      value[id].isAllowedMap = values;
      this.#koniState.setAuthorize(value);
    });
  }
  changeAuthorizationPerAcc(data, id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    this._changeAuthorizationPerAcc(data.address, data.connectValue, data.url, items => {
      cb(items);
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  changeAuthorizationPerSite(data) {
    this._changeAuthorizationPerSite(data.values, data.id);
    return true;
  }
  changeAuthorizationBlock(data) {
    this._changeAuthorizationBlock(data.connectedValue, data.id);
    return true;
  }
  async getSettings() {
    return await new Promise(resolve => {
      this.#koniState.getSettings(value => {
        resolve(value);
      });
    });
  }
  async toggleBalancesVisibility() {
    return new Promise(resolve => {
      this.#koniState.getSettings(value => {
        const updateValue = {
          ...value,
          isShowBalance: !value.isShowBalance
        };
        this.#koniState.setSettings(updateValue, () => {
          resolve(!value.isShowBalance);
        });
      });
    });
  }
  saveAccountAllLogo(data, id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    this.#koniState.getSettings(value => {
      const updateValue = {
        ...value,
        accountAllLogo: data
      };
      this.#koniState.setSettings(updateValue, () => {
        // eslint-disable-next-line node/no-callback-literal
        cb(updateValue);
      });
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  saveTheme(data) {
    this.#koniState.updateSetting('theme', data);
    return true;
  }
  setCamera({
    camera
  }) {
    this.#koniState.updateSetting('camera', camera);
    return true;
  }
  saveBrowserConfirmationType(data) {
    this.#koniState.updateSetting('browserConfirmationType', data);
    return true;
  }
  setAutoLockTime({
    autoLockTime
  }) {
    this.#koniState.updateSetting('timeAutoLock', autoLockTime);
    return true;
  }
  setUnlockType({
    unlockType
  }) {
    this.#koniState.updateSetting('unlockType', unlockType);
    return true;
  }
  async subscribeSettings(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const balancesVisibilitySubscription = this.#koniState.subscribeSettingsSubject().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, balancesVisibilitySubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return await this.getSettings();
  }
  setEnableChainPatrol({
    enable
  }) {
    this.#koniState.updateSetting('enableChainPatrol', enable);
    return true;
  }
  setShowZeroBalance({
    show
  }) {
    this.#koniState.updateSetting('isShowZeroBalance', show);
    return true;
  }
  setLanguage({
    language
  }) {
    this.#koniState.updateSetting('language', language);
    return true;
  }
  setShowBalance({
    enable
  }) {
    this.#koniState.updateSetting('isShowBalance', enable);
    return true;
  }
  async subscribeAuthUrls(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const authorizeUrlSubscription = this.#koniState.subscribeAuthorizeUrlSubject().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, authorizeUrlSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return await this.#koniState.getAuthList();
  }
  _saveCurrentAccountAddress(address, callback) {
    let accountInfo = this.#koniState.keyringService.currentAccount;
    if (!accountInfo) {
      accountInfo = {
        address,
        currentGenesisHash: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_GENESIS_HASH,
        allGenesisHash: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_GENESIS_HASH || undefined
      };
    } else {
      accountInfo.address = address;
      if (address !== _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY) {
        try {
          const currentKeyPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
          accountInfo.currentGenesisHash = (currentKeyPair === null || currentKeyPair === void 0 ? void 0 : currentKeyPair.meta.genesisHash) || _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_GENESIS_HASH;
        } catch {
          accountInfo.currentGenesisHash = _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_GENESIS_HASH;
        }
      } else {
        accountInfo.currentGenesisHash = accountInfo.allGenesisHash || _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_GENESIS_HASH;
      }
    }
    this.#koniState.setCurrentAccount(accountInfo, () => {
      callback && callback(accountInfo);
    });
  }
  updateCurrentAccountAddress(address) {
    this._saveCurrentAccountAddress(address);
    return true;
  }
  async saveCurrentAccountAddress(data) {
    return new Promise(resolve => {
      this._saveCurrentAccountAddress(data.address, currentInfo => {
        resolve(currentInfo);
      });
    });
  }
  async getAssetSetting() {
    return this.#koniState.chainService.getAssetSettings();
  }
  subscribeAssetSetting(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const assetSettingSubscription = this.#koniState.chainService.subscribeAssetSettings().subscribe(cb);
    this.createUnsubscriptionHandle(id, assetSettingSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.getAssetSetting();
  }
  async updateAssetSetting(params) {
    try {
      await this.#koniState.chainService.updateAssetSetting(params.tokenSlug, params.assetSetting, params.autoEnableNativeToken);
      this.#koniState.eventService.emit('asset.updateState', params.tokenSlug);
      return true;
    } catch (e) {
      console.error(e);
      return false;
    }
  }
  async getPrice() {
    return this.#koniState.priceService.getPrice();
  }
  subscribePrice(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const priceSubscription = this.#koniState.priceService.getPriceSubject().subscribe(rs => {
      cb(rs);
    });
    this.createUnsubscriptionHandle(id, priceSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.getPrice();
  }
  getBalance(reset) {
    return this.#koniState.getBalance(reset);
  }
  subscribeBalance(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const balanceSubscription = this.#koniState.subscribeBalance().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, balanceSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.getBalance(true);
  }
  getCrowdloan(reset) {
    return this.#koniState.getCrowdloan(reset);
  }
  subscribeCrowdloan(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const crowdloanSubscription = this.#koniState.subscribeCrowdloan().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, crowdloanSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.getCrowdloan(true);
  }
  validatePassword(json, password) {
    const cryptoType = Array.isArray(json.encoding.content) ? json.encoding.content[1] : 'ed25519';
    const encType = Array.isArray(json.encoding.type) ? json.encoding.type : [json.encoding.type];
    const pair = (0,_subwallet_keyring__WEBPACK_IMPORTED_MODULE_24__.createPair)({
      toSS58: this.encodeAddress,
      type: cryptoType
    }, {
      publicKey: this.decodeAddress(json.address, true)
    }, json.meta, (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(json.encoded) ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.hexToU8a)(json.encoded) : (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_26__.base64Decode)(json.encoded), encType);

    // unlock then lock (locking cleans secretKey, so needs to be last)
    try {
      pair.decodePkcs8(password);
      pair.lock();
      return true;
    } catch (e) {
      console.error(e);
      return false;
    }
  }
  validatedAccountsPassword(json, password) {
    try {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_27__.u8aToString)((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_28__.jsonDecrypt)(json, password));
      return true;
    } catch (e) {
      return false;
    }
  }
  _addAddressToAuthList(address, isAllowed) {
    this.#koniState.getAuthorize(value => {
      if (value && Object.keys(value).length) {
        Object.keys(value).forEach(url => {
          if (this.isAddressValidWithAuthType(address, value[url].accountAuthType)) {
            value[url].isAllowedMap[address] = isAllowed;
          }
        });
        this.#koniState.setAuthorize(value);
      }
    });
  }
  _addAddressesToAuthList(addresses, isAllowed) {
    this.#koniState.getAuthorize(value => {
      if (value && Object.keys(value).length) {
        Object.keys(value).forEach(url => {
          addresses.forEach(address => {
            if (this.isAddressValidWithAuthType(address, value[url].accountAuthType)) {
              value[url].isAllowedMap[address] = isAllowed;
            }
          });
        }); /**/

        this.#koniState.setAuthorize(value);
      }
    });
  }
  async accountsCreateSuriV2({
    genesisHash,
    isAllowed,
    name,
    password,
    suri: _suri,
    types
  }) {
    const addressDict = {};
    let changedAccount = false;
    const hasMasterPassword = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.keyring.hasMasterPassword;
    if (!hasMasterPassword) {
      if (!password) {
        throw Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('The password of each account is needed to set up master password'));
      } else {
        _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.changeMasterPassword(password);
        this.#koniState.updateKeyringState();
      }
    }
    const currentAccount = this.#koniState.keyringService.currentAccount;
    const allGenesisHash = (currentAccount === null || currentAccount === void 0 ? void 0 : currentAccount.allGenesisHash) || undefined;
    types === null || types === void 0 ? void 0 : types.forEach(type => {
      const suri = getSuri(_suri, type);
      const address = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.createFromUri(suri, {}, type).address;
      addressDict[type] = address;
      const newAccountName = type === 'ethereum' ? `${name} - EVM` : name;
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addUri(suri, {
        genesisHash,
        name: newAccountName
      }, type);
      this._addAddressToAuthList(address, isAllowed);
      if (!changedAccount) {
        if (types.length === 1) {
          this.#koniState.setCurrentAccount({
            address,
            currentGenesisHash: genesisHash || null,
            allGenesisHash
          });
        } else {
          this.#koniState.setCurrentAccount({
            address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY,
            currentGenesisHash: allGenesisHash || null,
            allGenesisHash
          }, undefined, true);
        }
        changedAccount = true;
      }
    });
    await new Promise(resolve => {
      this.#koniState.addAccountRef(Object.values(addressDict), () => {
        resolve();
      });
    });
    if (this.#alwaysLock) {
      this.keyringLock();
    }
    return addressDict;
  }
  async accountsForgetOverride({
    address,
    lockAfter
  }) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.forgetAccount(address);
    await new Promise(resolve => {
      this.#koniState.removeAccountRef(address, () => {
        resolve();
      });
    });

    // Remove from auth list
    await new Promise(resolve => {
      this.#koniState.getAuthorize(value => {
        if (value && Object.keys(value).length) {
          Object.keys(value).forEach(url => {
            delete value[url].isAllowedMap[address];
          });
          this.#koniState.setAuthorize(value, resolve);
        } else {
          resolve();
        }
      });
    });

    // Set current account to all account
    await new Promise(resolve => {
      const currentAccountInfo = this.#koniState.keyringService.currentAccount;
      this.#koniState.setCurrentAccount({
        currentGenesisHash: (currentAccountInfo === null || currentAccountInfo === void 0 ? void 0 : currentAccountInfo.allGenesisHash) || null,
        address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY
      }, resolve);
    });
    await this.#koniState.disableMantaPay(address);
    if (lockAfter) {
      this.checkLockAfterMigrate();
    }
    return true;
  }
  seedCreateV2({
    length = _subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__.SEED_DEFAULT_LENGTH,
    seed: _seed,
    types
  }) {
    const seed = _seed || (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_11__.mnemonicGenerate)(length);
    const rs = {
      seed: seed,
      addressMap: {}
    };
    types === null || types === void 0 ? void 0 : types.forEach(type => {
      rs.addressMap[type] = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.createFromUri(getSuri(seed, type), {}, type).address;
    });
    return rs;
  }
  seedValidateV2({
    suri,
    types
  }) {
    const {
      phrase
    } = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_12__.keyExtractSuri)(suri);
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase)) {
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase, 256), (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Invalid seed phrase. Please try again.'));
    } else {
      // sadly isHex detects as string, so we need a cast here
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(_subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__.SEED_LENGTHS.includes(phrase.split(' ').length), (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Seed phrase needs to contain {{x}} words', {
        replace: {
          x: _subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__.SEED_LENGTHS.join(', ')
        }
      }));
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_14__.mnemonicValidate)(phrase), (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Invalid seed phrase. Please try again.'));
    }
    const rs = {
      seed: suri,
      addressMap: {}
    };
    types && types.forEach(type => {
      rs.addressMap[type] = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.createFromUri(getSuri(suri, type), {}, type).address;
    });
    return rs;
  }
  _checkValidatePrivateKey({
    suri,
    types
  }, autoAddPrefix = false) {
    const {
      phrase
    } = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_12__.keyExtractSuri)(suri);
    const rs = {
      autoAddPrefix: autoAddPrefix,
      addressMap: {}
    };
    types && types.forEach(type => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      rs.addressMap[type] = '';
    });
    if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase) && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase, 256)) {
      types && types.forEach(type => {
        rs.addressMap[type] = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.createFromUri(getSuri(suri, type), {}, type).address;
      });
    } else {
      rs.autoAddPrefix = false;
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(false, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Invalid private key. Please try again.'));
    }
    return rs;
  }
  metamaskPrivateKeyValidateV2({
    suri,
    types
  }) {
    const isValidSuri = suri.startsWith('0x');
    if (isValidSuri) {
      return this._checkValidatePrivateKey({
        suri,
        types
      });
    } else {
      return this._checkValidatePrivateKey({
        suri: `0x${suri}`,
        types
      }, true);
    }
  }
  deriveV2(parentAddress, suri, metadata) {
    const parentPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(parentAddress);
    if (parentPair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(parentPair.address);
    }
    try {
      return parentPair.derive(suri, metadata);
    } catch (err) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('"{{suri}}" is not a valid derivation path', {
        replace: {
          suri
        }
      }));
    }
  }
  derivationCreateV2({
    genesisHash,
    isAllowed,
    name,
    parentAddress,
    suri
  }) {
    const childPair = this.deriveV2(parentAddress, suri, {
      genesisHash,
      name,
      parentAddress,
      suri
    });
    const address = childPair.address;
    this._saveCurrentAccountAddress(address, () => {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addPair(childPair, true);
      this._addAddressToAuthList(address, isAllowed);
    });
    return true;
  }
  jsonRestoreV2({
    address,
    file,
    isAllowed,
    password,
    withMasterPassword
  }) {
    const isPasswordValidated = this.validatePassword(file, password);
    if (isPasswordValidated) {
      try {
        this._saveCurrentAccountAddress(address, () => {
          _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.restoreAccount(file, password, withMasterPassword);
          this._addAddressToAuthList(address, isAllowed);
        });
        if (this.#alwaysLock) {
          this.keyringLock();
        }
      } catch (error) {
        throw new Error(error.message);
      }
    } else {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Wrong password'));
    }
  }
  batchRestoreV2({
    accountsInfo,
    file,
    isAllowed,
    password
  }) {
    const addressList = accountsInfo.map(acc => acc.address);
    const isPasswordValidated = this.validatedAccountsPassword(file, password);
    if (isPasswordValidated) {
      try {
        this._saveCurrentAccountAddress(_subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY, () => {
          _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.restoreAccounts(file, password);
          this._addAddressesToAuthList(addressList, isAllowed);
        });

        // if (this.#alwaysLock) {
        //   this.keyringLock();
        // }
      } catch (error) {
        throw new Error(error.message);
      }
    } else {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Wrong password'));
    }
  }
  getNftCollection() {
    return this.#koniState.getNftCollection();
  }
  subscribeNftCollection(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const nftCollectionSubscription = this.#koniState.subscribeNftCollection().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, nftCollectionSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.getNftCollection();
  }
  getNft() {
    return this.#koniState.getNft();
  }
  async subscribeNft(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const nftSubscription = this.#koniState.subscribeNft().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, nftSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.getNft();
  }
  getStakingReward() {
    return new Promise((resolve, reject) => {
      this.#koniState.getStakingReward(rs => {
        resolve(rs);
      });
    });
  }
  subscribeStakingReward(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const stakingRewardSubscription = this.#koniState.subscribeStakingReward().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, stakingRewardSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.getStakingReward();
  }
  async getStaking() {
    return this.#koniState.getStaking();
  }
  async subscribeStaking(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const stakingSubscription = this.#koniState.subscribeStaking().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, stakingSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return await this.getStaking();
  }
  async subscribeHistory(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const historySubject = await this.#koniState.historyService.getHistorySubject();
    const subscription = historySubject.subscribe(histories => {
      const addresses = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getAccounts().map(a => a.address);

      // Re-filter
      cb(histories.filter(item => addresses.some(address => (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_21__.isSameAddress)(item.address, address))));
    });
    this.createUnsubscriptionHandle(id, subscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    const addresses = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getAccounts().map(a => a.address);

    // Re-filter
    return historySubject.getValue().filter(item => addresses.some(address => (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_21__.isSameAddress)(item.address, address)));
  }

  // Save address to contact
  // private addContact (to: string) {
  //   const toAddress = reformatAddress(to);
  //   const account = keyring.getAccount(toAddress);
  //   const contact = keyring.getAddress(toAddress);
  //
  //   if (!account && (!contact || contact.meta.isRecent)) {
  //     keyring.saveAddress(toAddress, {});
  //   }
  // }

  validateTransfer(tokenSlug, from, to, value, transferAll) {
    const errors = [];
    const keypair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(from);
    let transferValue;
    if (!transferAll) {
      if (value === undefined) {
        errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Transfer amount is required')));
      }
      if (value) {
        transferValue = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_29___default())(value);
      }
    }
    const tokenInfo = this.#koniState.getAssetBySlug(tokenSlug);
    if (!tokenInfo) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Not found token from registry')));
    }
    if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(from) && (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(to) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isTokenEvmSmartContract)(tokenInfo) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getContractAddressOfToken)(tokenInfo).length === 0) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Not found ERC20 address for this token')));
    }
    return [errors, keypair, transferValue, tokenInfo];
  }
  async makeTransfer(inputData) {
    const {
      from,
      networkKey,
      to,
      tokenSlug,
      transferAll,
      value
    } = inputData;
    const [errors,,, tokenInfo] = this.validateTransfer(tokenSlug, from, to, value, transferAll);
    const warnings = [];
    const evmApiMap = this.#koniState.getEvmApiMap();
    const chainInfo = this.#koniState.getChainInfo(networkKey);
    const nativeTokenInfo = this.#koniState.getNativeTokenInfo(networkKey);
    const nativeTokenSlug = nativeTokenInfo.slug;
    const isTransferNativeToken = nativeTokenSlug === tokenSlug;
    let chainType = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE;
    const tokenBaseAmount = {
      value: '0',
      symbol: tokenInfo.symbol,
      decimals: tokenInfo.decimals || 0
    };
    const transferAmount = {
      ...tokenBaseAmount
    };
    let transaction;

    // Get native token amount
    const freeBalance = await this.getAddressFreeBalance({
      address: from,
      networkKey,
      token: tokenSlug
    });
    try {
      if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(from) && (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(to) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isTokenTransferredByEvm)(tokenInfo)) {
        // TODO: review this
        chainType = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.EVM;
        const txVal = transferAll ? freeBalance.value : value || '0';

        // Estimate with EVM API
        if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isTokenEvmSmartContract)(tokenInfo) || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isLocalToken)(tokenInfo)) {
          [transaction, transferAmount.value] = await (0,_subwallet_extension_base_koni_api_tokens_evm_transfer__WEBPACK_IMPORTED_MODULE_31__.getERC20TransactionObject)((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getContractAddressOfToken)(tokenInfo), chainInfo, from, to, txVal, !!transferAll, evmApiMap);
        } else {
          [transaction, transferAmount.value] = await (0,_subwallet_extension_base_koni_api_tokens_evm_transfer__WEBPACK_IMPORTED_MODULE_31__.getEVMTransactionObject)(chainInfo, from, to, txVal, !!transferAll, evmApiMap);
        }
      } else if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isMantaZkAsset)(tokenInfo)) {
        // TODO
        transaction = undefined;
        transferAmount.value = '0';
      } else {
        const substrateApi = this.#koniState.getSubstrateApi(networkKey);
        [transaction, transferAmount.value] = await (0,_subwallet_extension_base_koni_api_dotsama_transfer__WEBPACK_IMPORTED_MODULE_32__.createTransferExtrinsic)({
          transferAll: !!transferAll,
          value: value || '0',
          from: from,
          networkKey,
          tokenInfo,
          to: to,
          substrateApi
        });
      }
    } catch (e) {
      const error = e;
      if (error.message.includes('transfer amount exceeds balance')) {
        error.message = (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Insufficient balance');
      }
      throw error;
    }
    const transferNativeAmount = isTransferNativeToken ? transferAmount.value : '0';

    // this.addContact(to);

    const additionalValidator = async inputTransaction => {
      const minAmount = tokenInfo.minAmount || '0';

      // Check ed for sender
      if (!isTransferNativeToken) {
        const {
          value: balance
        } = await this.getAddressFreeBalance({
          address: from,
          networkKey,
          token: tokenSlug
        });
        if (new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](balance).minus(transferAmount.value).lt(minAmount)) {
          inputTransaction.warnings.push(new _subwallet_extension_base_background_warnings_TransactionWarning__WEBPACK_IMPORTED_MODULE_33__.TransactionWarning(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxWarningCode.NOT_ENOUGH_EXISTENTIAL_DEPOSIT));
        }
      }
      const {
        value: receiverBalance
      } = await this.getAddressFreeBalance({
        address: to,
        networkKey,
        token: tokenSlug
      });

      // Check ed for receiver
      if (new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](receiverBalance).plus(transferAmount.value).lt(minAmount)) {
        const atLeast = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](minAmount).minus(receiverBalance).plus((tokenInfo.decimals || 0) === 0 ? 0 : 1);
        const atLeastStr = (0,_subwallet_extension_base_utils_number__WEBPACK_IMPORTED_MODULE_34__.formatNumber)(atLeast, tokenInfo.decimals || 0, _subwallet_extension_base_utils_number__WEBPACK_IMPORTED_MODULE_34__.balanceFormatter);
        inputTransaction.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.TransferTxErrorType.RECEIVER_NOT_ENOUGH_EXISTENTIAL_DEPOSIT, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('You must transfer at least {{amount}}{{symbol}} to keep the destination account alive', {
          replace: {
            amount: atLeastStr,
            symbol: tokenInfo.symbol
          }
        })));
      }
    };
    return this.#koniState.transactionService.handleTransaction({
      errors,
      warnings,
      address: from,
      chain: networkKey,
      chainType,
      transferNativeAmount,
      transaction,
      data: inputData,
      extrinsicType: isTransferNativeToken ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.TRANSFER_BALANCE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.TRANSFER_TOKEN,
      ignoreWarnings: transferAll,
      isTransferAll: isTransferNativeToken ? transferAll : false,
      edAsWarning: isTransferNativeToken,
      additionalValidator: additionalValidator
    });
  }
  validateCrossChainTransfer(destinationNetworkKey, sendingTokenSlug, sender, sendingValue) {
    const errors = [];
    const keypair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(sender);
    const transferValue = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_29___default())(sendingValue);
    const originTokenInfo = this.#koniState.getAssetBySlug(sendingTokenSlug);
    const destinationTokenInfo = this.#koniState.getXcmEqualAssetByChain(destinationNetworkKey, sendingTokenSlug);
    if (!destinationTokenInfo) {
      errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.TransferTxErrorType.INVALID_TOKEN, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Not found token from registry')));
    }
    return [errors, keypair, transferValue, originTokenInfo, destinationTokenInfo];
  }
  async makeCrossChainTransfer(inputData) {
    const {
      destinationNetworkKey,
      from,
      originNetworkKey,
      to,
      tokenSlug,
      value
    } = inputData;
    const [errors, fromKeyPair,, originTokenInfo, destinationTokenInfo] = this.validateCrossChainTransfer(destinationNetworkKey, tokenSlug, from, value);
    let extrinsic = null;
    if (errors.length > 0) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors(errors);
    }
    let additionalValidator;
    let eventsHandler;
    if (fromKeyPair && destinationTokenInfo) {
      const substrateApi = this.#koniState.getSubstrateApi(originNetworkKey);
      const chainInfoMap = this.#koniState.getChainInfoMap();
      extrinsic = await (0,_subwallet_extension_base_koni_api_xcm__WEBPACK_IMPORTED_MODULE_35__.createXcmExtrinsic)({
        destinationTokenInfo,
        originTokenInfo,
        sendingValue: value,
        recipient: to,
        chainInfoMap,
        substrateApi
      });
      additionalValidator = async inputTransaction => {
        const destMinAmount = destinationTokenInfo.minAmount || '0';
        const atLeast = new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](destMinAmount).multipliedBy(_subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.XCM_MIN_AMOUNT_RATIO);

        // Check ed for receiver
        if (new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](value).lt(atLeast)) {
          const atLeastStr = (0,_subwallet_extension_base_utils_number__WEBPACK_IMPORTED_MODULE_34__.formatNumber)(atLeast, destinationTokenInfo.decimals || 0, _subwallet_extension_base_utils_number__WEBPACK_IMPORTED_MODULE_34__.balanceFormatter);
          inputTransaction.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.TransferTxErrorType.RECEIVER_NOT_ENOUGH_EXISTENTIAL_DEPOSIT, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('You must transfer at least {{amount}}{{symbol}} to keep the destination account alive', {
            replace: {
              amount: atLeastStr,
              symbol: originTokenInfo.symbol
            }
          })));
        }
        const srcMinAmount = originTokenInfo.minAmount || '0';
        const isTransferNativeToken = originTokenInfo.assetType === _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_36__._AssetType.NATIVE;

        // Check ed for sender
        if (!isTransferNativeToken) {
          const {
            value: balance
          } = await this.getAddressFreeBalance({
            address: from,
            networkKey: originNetworkKey,
            token: originTokenInfo.slug
          });
          if (new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](balance).minus(value).lt(srcMinAmount)) {
            inputTransaction.warnings.push(new _subwallet_extension_base_background_warnings_TransactionWarning__WEBPACK_IMPORTED_MODULE_33__.TransactionWarning(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxWarningCode.NOT_ENOUGH_EXISTENTIAL_DEPOSIT));
          }
        }
      };
      eventsHandler = eventEmitter => {
        eventEmitter.on('send', () => {
          try {
            const dest = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(to);
            if (dest) {
              this.updateAssetSetting({
                autoEnableNativeToken: false,
                tokenSlug: destinationTokenInfo.slug,
                assetSetting: {
                  visible: true
                }
              }).catch(console.error);
            }
          } catch (e) {}
        });
      };
    }

    // this.addContact(to);

    return await this.#koniState.transactionService.handleTransaction({
      url: _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_37__.EXTENSION_REQUEST_URL,
      address: from,
      chain: originNetworkKey,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.TRANSFER_XCM,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE,
      transferNativeAmount: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isNativeToken)(originTokenInfo) ? value : '0',
      ignoreWarnings: inputData.transferAll,
      isTransferAll: inputData.transferAll,
      errors,
      additionalValidator: additionalValidator,
      eventsHandler: eventsHandler
    });
  }
  async evmNftSubmitTransaction(inputData) {
    const {
      networkKey,
      params,
      recipientAddress,
      senderAddress
    } = inputData;
    const contractAddress = params.contractAddress;
    const tokenId = params.tokenId;
    const transaction = await (0,_subwallet_extension_base_koni_api_tokens_evm_transfer__WEBPACK_IMPORTED_MODULE_31__.getERC721Transaction)(this.#koniState.getEvmApi(networkKey), contractAddress, senderAddress, recipientAddress, tokenId);

    // this.addContact(recipientAddress);

    return await this.#koniState.transactionService.handleTransaction({
      address: senderAddress,
      chain: networkKey,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.EVM,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.SEND_NFT,
      transaction,
      url: _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_37__.EXTENSION_REQUEST_URL
    });
  }
  async upsertChain(data) {
    try {
      return await this.#koniState.upsertChainInfo(data);
    } catch (e) {
      console.error(e);
      return false;
    }
  }
  removeCustomChain(networkKey) {
    return this.#koniState.removeCustomChain(networkKey);
  }
  disableChain(networkKey) {
    return this.#koniState.disableChain(networkKey);
  }
  async enableChain({
    chainSlug,
    enableTokens
  }) {
    return await this.#koniState.enableChain(chainSlug, enableTokens);
  }
  async reconnectChain(chainSlug) {
    return this.#koniState.chainService.reconnectChain(chainSlug);
  }
  async validateNetwork({
    existedChainSlug,
    provider
  }) {
    return await this.#koniState.validateCustomChain(provider, existedChainSlug);
  }
  resetDefaultNetwork() {
    return this.#koniState.resetDefaultChains();
  }
  recoverDotSamaApi(networkKey) {
    try {
      return this.#koniState.refreshSubstrateApi(networkKey);
    } catch (e) {
      console.error(e);
      return false;
    }
  }
  async upsertCustomToken(data) {
    try {
      await this.#koniState.upsertCustomToken(data);
      return true;
    } catch (e) {
      console.error(e);
      return false;
    }
  }
  async deleteCustomAsset(assetSlug) {
    const assetInfo = this.#koniState.getAssetBySlug(assetSlug);
    if (assetInfo && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isCustomAsset)(assetSlug)) {
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isAssetSmartContractNft)(assetInfo)) {
        // check if deleting a smart contract NFT
        await this.#koniState.deleteNftCollection(assetInfo.originChain, (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getContractAddressOfToken)(assetInfo));
      }
      this.#koniState.deleteCustomAssets([assetSlug]);
      return true;
    }
    return false;
  }
  async validateCustomAsset(data) {
    return await this.#koniState.validateCustomAsset(data);
  }
  async getAddressFreeBalance({
    address,
    networkKey,
    token
  }) {
    if (token && _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_38__._MANTA_ZK_CHAIN_GROUP.includes(networkKey)) {
      const tokenInfo = this.#koniState.chainService.getAssetBySlug(token);
      if (tokenInfo.symbol.startsWith(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_38__._ZK_ASSET_PREFIX)) {
        return await this.#koniState.getMantaPayZkBalance(address, tokenInfo);
      }
    }
    return await this.#koniState.balanceService.getTokenFreeBalance(address, networkKey, token);
  }
  async transferGetMaxTransferable({
    address,
    destChain,
    isXcmTransfer,
    networkKey,
    token
  }) {
    const freeBalance = await this.getAddressFreeBalance({
      address,
      networkKey,
      token
    });
    const tokenInfo = token ? this.#koniState.chainService.getAssetBySlug(token) : this.#koniState.chainService.getNativeTokenInfo(networkKey);
    if (!(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isNativeToken)(tokenInfo)) {
      return freeBalance;
    } else {
      const substrateApi = this.#koniState.chainService.getSubstrateApi(networkKey);
      let estimatedFee;
      let maxTransferable = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_29___default())(freeBalance.value);
      try {
        if (isXcmTransfer) {
          const chainInfoMap = this.#koniState.chainService.getChainInfoMap();
          const destinationTokenInfo = this.#koniState.getXcmEqualAssetByChain(destChain, tokenInfo.slug);
          if (!destinationTokenInfo) {
            estimatedFee = '0';
          } else {
            var _paymentInfo$partialF;
            maxTransferable = maxTransferable.sub(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_29___default())(tokenInfo.minAmount || '0'));
            const desChainInfo = chainInfoMap[destChain];
            const orgChainInfo = chainInfoMap[networkKey];
            const recipient = !(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(address) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isChainEvmCompatible)(desChainInfo) && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isChainEvmCompatible)(orgChainInfo) ? (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_39__.u8aToHex)((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_40__.addressToEvm)(address)) : address;
            const mockTx = await (0,_subwallet_extension_base_koni_api_xcm__WEBPACK_IMPORTED_MODULE_35__.createXcmExtrinsic)({
              chainInfoMap,
              destinationTokenInfo,
              originTokenInfo: tokenInfo,
              recipient: recipient,
              sendingValue: '0',
              substrateApi
            });
            const paymentInfo = await mockTx.paymentInfo(address);
            estimatedFee = (paymentInfo === null || paymentInfo === void 0 ? void 0 : (_paymentInfo$partialF = paymentInfo.partialFee) === null || _paymentInfo$partialF === void 0 ? void 0 : _paymentInfo$partialF.toString()) || '0';
          }
        } else {
          const chainInfo = this.#koniState.chainService.getChainInfoByKey(networkKey);
          if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isChainEvmCompatible)(chainInfo) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isTokenTransferredByEvm)(tokenInfo)) {
            const web3 = this.#koniState.chainService.getEvmApi(networkKey);
            const transaction = {
              value: 0,
              to: '0x0000000000000000000000000000000000000000',
              // null address
              from: address
            };
            const gasPrice = await web3.api.eth.getGasPrice();
            const gasLimit = await web3.api.eth.estimateGas(transaction);
            estimatedFee = (gasLimit * parseInt(gasPrice)).toString();
          } else {
            var _paymentInfo$partialF2;
            const [mockTx] = await (0,_subwallet_extension_base_koni_api_dotsama_transfer__WEBPACK_IMPORTED_MODULE_32__.createTransferExtrinsic)({
              from: address,
              networkKey,
              substrateApi,
              to: address,
              tokenInfo,
              transferAll: true,
              value: '0'
            });
            const paymentInfo = await (mockTx === null || mockTx === void 0 ? void 0 : mockTx.paymentInfo(address));
            estimatedFee = (paymentInfo === null || paymentInfo === void 0 ? void 0 : (_paymentInfo$partialF2 = paymentInfo.partialFee) === null || _paymentInfo$partialF2 === void 0 ? void 0 : _paymentInfo$partialF2.toString()) || '0';
          }
        }
      } catch (e) {
        estimatedFee = '0';
        console.warn('Unable to estimate fee', e);
      }
      maxTransferable = maxTransferable.sub(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_29___default())(estimatedFee));
      return {
        ...freeBalance,
        value: maxTransferable.gt(_polkadot_util__WEBPACK_IMPORTED_MODULE_41__.BN_ZERO) ? maxTransferable.toString() || '0' : '0'
      };
    }
  }
  async subscribeAddressFreeBalance({
    address,
    networkKey,
    token
  }, id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const [unsub, currentFreeBalance] = await this.#koniState.balanceService.subscribeTokenFreeBalance(address, networkKey, token, cb);
    this.createUnsubscriptionHandle(id, unsub);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return currentFreeBalance;
  }
  async transferCheckReferenceCount({
    address,
    networkKey
  }) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return
    return await (0,_subwallet_extension_base_koni_api_dotsama_transfer__WEBPACK_IMPORTED_MODULE_32__.checkReferenceCount)(networkKey, address, this.#koniState.getSubstrateApiMap(), this.#koniState.getChainInfo(networkKey));
  }
  async transferCheckSupporting({
    networkKey,
    tokenSlug
  }) {
    const tokenInfo = this.#koniState.getAssetBySlug(tokenSlug);
    return await (0,_subwallet_extension_base_koni_api_dotsama_transfer__WEBPACK_IMPORTED_MODULE_32__.checkSupportTransfer)(networkKey, tokenInfo, this.#koniState.getSubstrateApiMap(), this.#koniState.getChainInfo(networkKey));
  }
  transferGetExistentialDeposit({
    tokenSlug
  }) {
    const tokenInfo = this.#koniState.getAssetBySlug(tokenSlug);
    return (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getTokenMinAmount)(tokenInfo);
  }
  async substrateNftSubmitTransaction(inputData) {
    const {
      params,
      recipientAddress,
      senderAddress
    } = inputData;
    const isSendingSelf = (0,_subwallet_extension_base_koni_api_nft_transfer__WEBPACK_IMPORTED_MODULE_42__.isRecipientSelf)(senderAddress, recipientAddress);

    // TODO: do better to detect tokenType
    const isPSP34 = params === null || params === void 0 ? void 0 : params.isPsp34;
    const networkKey = params === null || params === void 0 ? void 0 : params.networkKey;
    const apiProps = this.#koniState.getSubstrateApi(networkKey);
    const extrinsic = !isPSP34 ? (0,_subwallet_extension_base_koni_api_nft_transfer__WEBPACK_IMPORTED_MODULE_42__.getNftTransferExtrinsic)(networkKey, apiProps, senderAddress, recipientAddress, params || {}) : await (0,_subwallet_extension_base_koni_api_tokens_wasm__WEBPACK_IMPORTED_MODULE_43__.getPSP34TransferExtrinsic)(networkKey, apiProps, senderAddress, recipientAddress, params || {});

    // this.addContact(recipientAddress);

    const rs = await this.#koniState.transactionService.handleTransaction({
      address: senderAddress,
      chain: networkKey,
      transaction: extrinsic,
      data: {
        ...inputData,
        isSendingSelf
      },
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.SEND_NFT,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
    return {
      ...rs,
      isSendingSelf
    };
  }
  async enableChains({
    chainSlugs,
    enableTokens
  }) {
    try {
      await Promise.all(chainSlugs.map(chainSlug => this.enableChain({
        chainSlug,
        enableTokens
      })));
    } catch (e) {
      return false;
    }
    return true;
  }
  getAccountMeta({
    address
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to find account'));
    return {
      meta: pair.meta
    };
  }
  accountsTie2({
    address,
    genesisHash
  }) {
    return this.#koniState.setAccountTie(address, genesisHash);
  }
  async accountsCreateExternalV2({
    address,
    genesisHash,
    isAllowed,
    isEthereum,
    isReadOnly,
    name
  }) {
    try {
      let result;
      try {
        const exists = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
        if (exists) {
          if (exists.type === (isEthereum ? 'ethereum' : 'sr25519')) {
            return [{
              code: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.AccountExternalErrorCode.INVALID_ADDRESS,
              message: (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Account exists')
            }];
          }
        }
      } catch (e) {}
      if (isEthereum) {
        const chainInfoMap = this.#koniState.getChainInfoMap();
        let _gen = '';
        if (genesisHash) {
          for (const network of Object.values(chainInfoMap)) {
            if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getEvmChainId)(network) === parseInt(genesisHash)) {
              // TODO: pure EVM chains do not have genesisHash
              _gen = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getSubstrateGenesisHash)(network);
            }
          }
        }
        result = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.keyring.addFromAddress(address, {
          name,
          isExternal: true,
          isReadOnly,
          genesisHash: _gen
        }, null, 'ethereum');
        _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.saveAccount(result);
      } else {
        result = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addExternal(address, {
          genesisHash,
          name,
          isReadOnly
        }).pair;
      }
      const _address = result.address;
      await new Promise(resolve => {
        this.#koniState.addAccountRef([_address], () => {
          resolve();
        });
      });
      await new Promise(resolve => {
        this._saveCurrentAccountAddress(_address, () => {
          this._addAddressToAuthList(_address, isAllowed);
          resolve();
        });
      });
      return [];
    } catch (e) {
      return [{
        code: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.AccountExternalErrorCode.KEYRING_ERROR,
        message: e.message
      }];
    }
  }
  async accountsCreateHardwareV2({
    accountIndex,
    address,
    addressOffset,
    genesisHash,
    hardwareType,
    isAllowed,
    name
  }) {
    const key = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addHardware(address, hardwareType, {
      accountIndex,
      addressOffset,
      genesisHash,
      name,
      originGenesisHash: genesisHash
    });
    const result = key.pair;
    const _address = result.address;
    await new Promise(resolve => {
      this.#koniState.addAccountRef([_address], () => {
        resolve();
      });
    });
    await new Promise(resolve => {
      this._saveCurrentAccountAddress(_address, () => {
        this._addAddressToAuthList(_address, isAllowed || false);
        resolve();
      });
    });
    return true;
  }
  async accountsCreateHardwareMultiple({
    accounts
  }) {
    const addresses = [];
    if (!accounts.length) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)("Can't find an account. Please try again"));
    }
    const slugMap = {};
    for (const account of accounts) {
      const {
        accountIndex,
        address,
        addressOffset,
        genesisHash,
        hardwareType,
        isEthereum,
        name
      } = account;
      let result;
      const baseMeta = {
        name,
        hardwareType,
        accountIndex,
        addressOffset,
        genesisHash,
        originGenesisHash: genesisHash
      };
      if (isEthereum) {
        result = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.keyring.addFromAddress(address, {
          ...baseMeta,
          isExternal: true,
          isHardware: true
        }, null, 'ethereum');
        _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.saveAccount(result);
        slugMap.ethereum = 'ethereum';
      } else {
        result = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addHardware(address, hardwareType, {
          ...baseMeta,
          availableGenesisHashes: [genesisHash]
        }).pair;
        const [slug] = this.#koniState.findNetworkKeyByGenesisHash(genesisHash);
        if (slug) {
          slugMap[slug] = slug;
        }
      }
      const _address = result.address;
      addresses.push(_address);
      await new Promise(resolve => {
        this._addAddressToAuthList(_address, true);
        resolve();
      });
    }
    const currentAccount = this.#koniState.keyringService.currentAccount;
    const allGenesisHash = (currentAccount === null || currentAccount === void 0 ? void 0 : currentAccount.allGenesisHash) || undefined;
    if (addresses.length <= 1) {
      this.#koniState.setCurrentAccount({
        address: addresses[0],
        currentGenesisHash: null,
        allGenesisHash
      });
    } else {
      this.#koniState.setCurrentAccount({
        address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY,
        currentGenesisHash: allGenesisHash || null,
        allGenesisHash
      });
    }
    await new Promise(resolve => {
      this.#koniState.addAccountRef(addresses, () => {
        resolve();
      });
    });
    if (Object.keys(slugMap).length) {
      this.enableChains({
        chainSlugs: Object.keys(slugMap),
        enableTokens: true
      }).catch(console.error);
    }
    return true;
  }
  async accountsCreateWithSecret({
    isAllow,
    isEthereum,
    name,
    publicKey,
    secretKey
  }) {
    try {
      let keyringPair = null;
      if (isEthereum) {
        const _secret = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_44__.hexStripPrefix)(secretKey);
        if (_secret.length === 64) {
          const suri = `0x${_secret}`;
          const {
            phrase
          } = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_12__.keyExtractSuri)(suri);
          if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase) && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(phrase, 256)) {
            const type = 'ethereum';
            keyringPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addUri(getSuri(suri, type), {
              name: name
            }, type).pair;
          }
        }
      } else {
        keyringPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.keyring.addFromPair({
          publicKey: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.hexToU8a)(publicKey),
          secretKey: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.hexToU8a)(secretKey)
        }, {
          name
        });
        _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addPair(keyringPair, true);
      }
      if (!keyringPair) {
        return {
          success: false,
          errors: [{
            code: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.AccountExternalErrorCode.KEYRING_ERROR,
            message: (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Cannot create account')
          }]
        };
      }
      const _address = keyringPair.address;
      await new Promise(resolve => {
        this.#koniState.addAccountRef([_address], () => {
          resolve();
        });
      });
      await new Promise(resolve => {
        this._saveCurrentAccountAddress(_address, () => {
          this._addAddressToAuthList(_address, isAllow);
          resolve();
        });
      });
      if (this.#alwaysLock) {
        this.keyringLock();
      }
      return {
        errors: [],
        success: true
      };
    } catch (e) {
      return {
        success: false,
        errors: [{
          code: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.AccountExternalErrorCode.KEYRING_ERROR,
          message: e.message
        }]
      };
    }
  }

  /// External account

  rejectExternalRequest(request) {
    const {
      id,
      message,
      throwError
    } = request;
    const promise = this.#koniState.getExternalRequest(id);
    if (promise.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExternalRequestPromiseStatus.PENDING && promise.reject) {
      if (throwError) {
        promise.reject(new Error(message));
      } else {
        promise.reject();
      }
      this.#koniState.updateExternalRequest(id, {
        status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExternalRequestPromiseStatus.REJECTED,
        message: message,
        reject: undefined,
        resolve: undefined
      });
    }
  }
  resolveQrTransfer(request) {
    const {
      data,
      id
    } = request;
    const promise = this.#koniState.getExternalRequest(id);
    if (promise.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExternalRequestPromiseStatus.PENDING) {
      promise.resolve && promise.resolve(data);
      this.#koniState.updateExternalRequest(id, {
        status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExternalRequestPromiseStatus.COMPLETED,
        reject: undefined,
        resolve: undefined
      });
    }
  }
  subscribeConfirmations(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.getConfirmationsQueueSubject().subscribe(cb);
    this.createUnsubscriptionHandle(id, subscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.getConfirmationsQueueSubject().getValue();
  }
  async completeConfirmation(request) {
    return await this.#koniState.completeConfirmation(request);
  }

  /// Sign Qr

  getNetworkJsonByChainId(chainId) {
    const chainInfoMap = this.#koniState.getChainInfoMap();
    if (!chainId) {
      for (const n in chainInfoMap) {
        if (!Object.prototype.hasOwnProperty.call(chainInfoMap, n)) {
          continue;
        }
        const networkInfo = chainInfoMap[n];
        if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isChainEvmCompatible)(networkInfo)) {
          return networkInfo;
        }
      }
      return null;
    }
    for (const n in chainInfoMap) {
      if (!Object.prototype.hasOwnProperty.call(chainInfoMap, n)) {
        continue;
      }
      const networkInfo = chainInfoMap[n];
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getEvmChainId)(networkInfo) === chainId) {
        return networkInfo;
      }
    }
    return null;
  }

  // Parse transaction

  parseSubstrateTransaction({
    data,
    networkKey
  }) {
    const apiProps = this.#koniState.getSubstrateApi(networkKey);
    const apiPromise = apiProps.api;
    return (0,_subwallet_extension_base_koni_api_dotsama_parseTransaction__WEBPACK_IMPORTED_MODULE_45__.parseSubstrateTransaction)(data, apiPromise);
  }
  async parseEVMRLP({
    data
  }) {
    return await (0,_subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_46__.parseEvmRlp)(data, this.#koniState.getChainInfoMap(), this.#koniState.getEvmApiMap());
  }

  // Sign

  qrSignSubstrate({
    address,
    data,
    networkKey
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to find account'));
    if (pair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(pair.address);
    }
    let signed = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_44__.hexStripPrefix)((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_39__.u8aToHex)(pair.sign(data, {
      withType: true
    })));
    const network = this.#koniState.getChainInfo(networkKey);
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isChainEvmCompatible)(network)) {
      signed = signed.substring(2);
    }
    return {
      signature: signed
    };
  }
  async qrSignEVM({
    address,
    chainId,
    message,
    type
  }) {
    let signed;
    const network = this.getNetworkJsonByChainId(chainId);
    if (!network) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Cannot find network'));
    }
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
    if (!pair) {
      throw Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to find account'));
    }
    if (pair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(pair.address);
    }
    if (type === 'message') {
      let data = message;
      if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.isHex)(message)) {
        data = message;
      } else if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_47__.isAscii)(message)) {
        data = `0x${message}`;
      }
      signed = await pair.evmSigner.signMessage(data, 'personal_sign');
    } else {
      const tx = (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_48__.createTransactionFromRLP)(message);
      if (!tx) {
        throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Failed to decode data. Please use a valid QR code'));
      }
      const txObject = {
        gasPrice: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](tx.gasPrice).toNumber(),
        to: tx.to,
        value: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](tx.value).toNumber(),
        data: tx.data,
        nonce: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](tx.nonce).toNumber(),
        gas: new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](tx.gas).toNumber()
      };
      const common = _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0___default().forCustomChain('mainnet', {
        name: network.name,
        networkId: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getEvmChainId)(network),
        chainId: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getEvmChainId)(network)
      }, 'petersburg');

      // @ts-ignore
      const transaction = new ethereumjs_tx__WEBPACK_IMPORTED_MODULE_3__.Transaction(txObject, {
        common
      });
      pair.evmSigner.signTransaction(transaction);
      signed = (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_48__.signatureToHex)({
        r: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_39__.u8aToHex)(transaction.r),
        s: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_39__.u8aToHex)(transaction.s),
        v: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_39__.u8aToHex)(transaction.v)
      });
    }
    return {
      signature: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_44__.hexStripPrefix)(signed)
    };
  }
  async subscribeChainStakingMetadata(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const chainStakingMetadata = this.#koniState.subscribeChainStakingMetadata().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, chainStakingMetadata.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.getChainStakingMetadata();
  }
  async subscribeStakingNominatorMetadata(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const nominatorMetadata = this.#koniState.subscribeNominatorMetadata().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, nominatorMetadata.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.getNominatorMetadata();
  }
  async getBondingOptions({
    chain,
    type
  }) {
    const apiProps = this.#koniState.getSubstrateApi(chain);
    const chainInfo = this.#koniState.getChainInfo(chain);
    const chainStakingMetadata = await this.#koniState.getStakingMetadataByChain(chain, type);
    if (!chainStakingMetadata) {
      return;
    }
    const {
      decimals
    } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getChainNativeTokenBasicInfo)(chainInfo);
    return await (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.getValidatorsInfo)(chain, apiProps, decimals, chainStakingMetadata);
  }
  async getNominationPoolOptions(chain) {
    const substrateApi = this.#koniState.getSubstrateApi(chain);
    return await (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.getNominationPoolsInfo)(chain, substrateApi);
  }
  async submitBonding(inputData) {
    const {
      address,
      amount,
      chain,
      nominatorMetadata,
      selectedValidators
    } = inputData;
    const chainInfo = this.#koniState.getChainInfo(chain);
    const chainStakingMetadata = await this.#koniState.getStakingMetadataByChain(chain, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.StakingType.NOMINATED);
    if (!chainStakingMetadata) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INTERNAL_ERROR)]);
    }
    const bondingValidation = (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.validateBondingCondition)(chainInfo, amount, selectedValidators, address, chainStakingMetadata, nominatorMetadata);
    if (!amount || !selectedValidators || bondingValidation.length > 0) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors(bondingValidation);
    }
    const substrateApi = this.#koniState.getSubstrateApi(chain);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.getBondingExtrinsic)(chainInfo, amount, selectedValidators, substrateApi, address, nominatorMetadata);
    return await this.#koniState.transactionService.handleTransaction({
      address,
      chain: chain,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_BOND,
      transaction: extrinsic,
      url: _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_37__.EXTENSION_REQUEST_URL,
      transferNativeAmount: amount
    });
  }
  async submitUnbonding(inputData) {
    const {
      amount,
      chain,
      nominatorMetadata,
      validatorAddress
    } = inputData;
    const chainStakingMetadata = await this.#koniState.getStakingMetadataByChain(chain, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.StakingType.NOMINATED);
    if (!chainStakingMetadata || !nominatorMetadata) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INTERNAL_ERROR)]);
    }
    const unbondingValidation = (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.validateUnbondingCondition)(nominatorMetadata, amount, chain, chainStakingMetadata, validatorAddress);
    if (!amount || unbondingValidation.length > 0) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors(unbondingValidation);
    }
    const substrateApi = this.#koniState.getSubstrateApi(chain);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.getUnbondingExtrinsic)(nominatorMetadata, amount, chain, substrateApi, validatorAddress);
    return await this.#koniState.transactionService.handleTransaction({
      address: nominatorMetadata.address,
      chain: chain,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_UNBOND,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
  }
  async submitStakeWithdrawal(inputData) {
    const {
      chain,
      nominatorMetadata,
      validatorAddress
    } = inputData;
    if (!nominatorMetadata) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INVALID_PARAMS)]);
    }
    const dotSamaApi = this.#koniState.getSubstrateApi(chain);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.getWithdrawalExtrinsic)(dotSamaApi, chain, nominatorMetadata, validatorAddress);
    return await this.#koniState.transactionService.handleTransaction({
      address: nominatorMetadata.address,
      chain: chain,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_WITHDRAW,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
  }
  async submitStakeClaimReward(inputData) {
    const {
      address,
      bondReward,
      chain,
      stakingType
    } = inputData;
    if (!address) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INVALID_PARAMS)]);
    }
    const substrateApi = this.#koniState.getSubstrateApi(chain);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.getClaimRewardExtrinsic)(substrateApi, chain, address, stakingType, bondReward);
    return await this.#koniState.transactionService.handleTransaction({
      address,
      chain: chain,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_CLAIM_REWARD,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
  }
  async submitCancelStakeWithdrawal(inputData) {
    const {
      address,
      chain,
      selectedUnstaking
    } = inputData;
    if (!chain || !selectedUnstaking) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INVALID_PARAMS)]);
    }
    const substrateApi = this.#koniState.getSubstrateApi(chain);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_49__.getCancelWithdrawalExtrinsic)(substrateApi, chain, selectedUnstaking);
    return await this.#koniState.transactionService.handleTransaction({
      address,
      chain,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_CANCEL_UNSTAKE,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
  }
  async submitPoolBonding(inputData) {
    const {
      address,
      amount,
      chain,
      nominatorMetadata,
      selectedPool
    } = inputData;
    const chainInfo = this.#koniState.getChainInfo(chain);
    const chainStakingMetadata = await this.#koniState.getStakingMetadataByChain(chain, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.StakingType.NOMINATED);
    if (!chainStakingMetadata) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INTERNAL_ERROR)]);
    }
    const bondingValidation = (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_50__.validatePoolBondingCondition)(chainInfo, amount, selectedPool, address, chainStakingMetadata, nominatorMetadata);
    if (!amount || bondingValidation.length > 0) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors(bondingValidation);
    }
    const substrateApi = this.#koniState.getSubstrateApi(chain);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_50__.getPoolingBondingExtrinsic)(substrateApi, amount, selectedPool.id, nominatorMetadata);
    return await this.#koniState.transactionService.handleTransaction({
      address,
      chain,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_JOIN_POOL,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE,
      transferNativeAmount: amount
    });
  }
  async submitPoolingUnbonding(inputData) {
    const {
      amount,
      chain,
      nominatorMetadata
    } = inputData;
    const chainStakingMetadata = await this.#koniState.getStakingMetadataByChain(chain, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.StakingType.NOMINATED);
    if (!chainStakingMetadata || !nominatorMetadata) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INTERNAL_ERROR)]);
    }
    const unbondingValidation = (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_50__.validateRelayUnbondingCondition)(amount, chainStakingMetadata, nominatorMetadata);
    if (!amount || unbondingValidation.length > 0) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors(unbondingValidation);
    }
    const substrateApi = this.#koniState.getSubstrateApi(chain);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding_relayChain__WEBPACK_IMPORTED_MODULE_50__.getPoolingUnbondingExtrinsic)(substrateApi, amount, nominatorMetadata);
    return await this.#koniState.transactionService.handleTransaction({
      address: nominatorMetadata.address,
      chain,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_LEAVE_POOL,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
  }

  // EVM Transaction
  async parseContractInput({
    chainId,
    contract,
    data
  }) {
    const network = this.getNetworkJsonByChainId(chainId);
    return await (0,_subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_46__.parseContractInput)(data, contract, network);
  }
  async submitTuringStakeCompounding(inputData) {
    const {
      accountMinimum,
      address,
      bondedAmount,
      collatorAddress,
      networkKey
    } = inputData;
    if (!address) {
      return this.#koniState.transactionService.generateBeforeHandleResponseErrors([new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_15__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.BasicTxErrorType.INVALID_PARAMS)]);
    }
    const dotSamaApi = this.#koniState.getSubstrateApi(networkKey);
    const chainInfo = this.#koniState.getChainInfo(networkKey);
    const {
      decimals
    } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._getChainNativeTokenBasicInfo)(chainInfo);
    const parsedAccountMinimum = parseFloat(accountMinimum) * 10 ** decimals;
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_51__.getTuringCompoundExtrinsic)(dotSamaApi, address, collatorAddress, parsedAccountMinimum.toString(), bondedAmount);
    return await this.#koniState.transactionService.handleTransaction({
      address,
      chain: networkKey,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_COMPOUNDING,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
  }
  async submitTuringCancelStakeCompound(inputData) {
    const {
      address,
      networkKey,
      taskId
    } = inputData;
    const txState = {};
    if (!address) {
      txState.txError = true;
      return txState;
    }
    const dotSamaApi = this.#koniState.getSubstrateApi(networkKey);
    const extrinsic = await (0,_subwallet_extension_base_koni_api_staking_bonding_paraChain__WEBPACK_IMPORTED_MODULE_51__.getTuringCancelCompoundingExtrinsic)(dotSamaApi, taskId);
    return await this.#koniState.transactionService.handleTransaction({
      address,
      chain: networkKey,
      transaction: extrinsic,
      data: inputData,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ExtrinsicType.STAKING_CANCEL_COMPOUNDING,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.ChainType.SUBSTRATE
    });
  }

  /// Keyring state

  // Subscribe keyring state

  keyringStateSubscribe(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const keyringStateSubject = this.#koniState.keyringService.keyringStateSubject;
    const subscription = keyringStateSubject.subscribe(value => cb(value));
    this.createUnsubscriptionHandle(id, subscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.keyringService.keyringState;
  }

  // Change master password

  keyringChangeMasterPassword({
    createNew,
    newPassword,
    oldPassword
  }) {
    try {
      // Remove isMasterPassword meta if createNew
      if (createNew) {
        const pairs = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPairs();
        for (const pair of pairs) {
          if (pair.meta.isInjected) {
            // Empty
          } else {
            const meta = {
              ...pair.meta,
              isMasterPassword: false
            };
            if (!meta.originGenesisHash) {
              meta.genesisHash = '';
            }
            pair.setMeta(meta);
            _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.saveAccountMeta(pair, pair.meta);
          }
        }
      }
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.changeMasterPassword(newPassword, oldPassword);
    } catch (e) {
      console.error(e);
      return {
        errors: [(0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)(e.message)],
        status: false
      };
    }
    this.#koniState.updateKeyringState();
    if (this.#alwaysLock && !createNew) {
      this.keyringLock();
    }
    return {
      status: true,
      errors: []
    };
  }

  // Migrate password

  checkLockAfterMigrate() {
    const pairs = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPairs();
    const needMigrate = !!pairs.filter(acc => acc.address !== _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY && !acc.meta.isExternal && !acc.meta.isInjected).filter(acc => !acc.meta.isMasterPassword).length;
    if (!needMigrate) {
      if (this.#alwaysLock) {
        this.keyringLock();
      }
    }
  }
  keyringMigrateMasterPassword({
    address,
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.migrateWithMasterPassword(address, password);
      this.checkLockAfterMigrate();
    } catch (e) {
      console.error(e);
      return {
        errors: [e.message],
        status: false
      };
    }
    return {
      status: true,
      errors: []
    };
  }

  // Unlock wallet

  keyringUnlock({
    password
  }) {
    try {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockKeyring(password);
      this.#koniState.initMantaPay(password).catch(console.error);
    } catch (e) {
      return {
        errors: [e.message],
        status: false
      };
    }
    this.#koniState.updateKeyringState();
    return {
      status: true,
      errors: []
    };
  }

  // Lock wallet

  keyringLock() {
    this.#koniState.keyringService.lock();
    clearTimeout(this.#lockTimeOut);
  }

  // Export mnemonic

  keyringExportMnemonic({
    address,
    password
  }) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(address);
    const result = pair.exportMnemonic(password);
    return {
      result
    };
  }

  // Reset wallet

  async resetWallet({
    resetAll
  }) {
    try {
      await this.#koniState.resetWallet(resetAll);
      return {
        errors: [],
        status: true
      };
    } catch (e) {
      return {
        errors: [e.message],
        status: false
      };
    }
  }

  /// Signing substrate request
  signingApprovePasswordV2({
    id
  }) {
    const queued = this.#koniState.getSignRequest(id);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.assert)(queued, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
    const {
      reject,
      request,
      resolve
    } = queued;
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(queued.account.address);

    // unlike queued.account.address the following
    // address is encoded with the default prefix
    // which what is used for password caching mapping
    const {
      address
    } = pair;
    if (!pair) {
      reject(new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to find account')));
      return false;
    }
    if (pair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(address);
    }
    const {
      payload
    } = request;
    let registry = new _polkadot_types__WEBPACK_IMPORTED_MODULE_52__.TypeRegistry();
    let isEvm = false;
    if ((0,_subwallet_extension_base_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_10__.isJsonPayload)(payload)) {
      // Get the metadata for the genesisHash
      const currentMetadata = this.#koniState.knownMetadata.find(meta => meta.genesisHash === payload.genesisHash);

      // set the registry before calling the sign function
      registry.setSignedExtensions(payload.signedExtensions, currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.userExtensions);
      if (currentMetadata) {
        registry.register(currentMetadata === null || currentMetadata === void 0 ? void 0 : currentMetadata.types);
      }
      const [, chainInfo] = this.#koniState.findNetworkKeyByGenesisHash(payload.genesisHash);
      if (chainInfo && _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_38__._API_OPTIONS_CHAIN_GROUP.avail.includes(chainInfo.slug)) {
        const isChainActive = this.#koniState.getChainStateByKey(chainInfo.slug).active;
        if (!isChainActive) {
          reject(new Error('Unable to sign'));
          return false;
        } else {
          registry = this.#koniState.getSubstrateApi(chainInfo.slug).api.registry;
        }
      }
      if (chainInfo) {
        isEvm = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_30__._isChainEvmCompatible)(chainInfo);
      }
    }
    const result = request.sign(registry, pair);
    resolve({
      id,
      // In case evm chain, must be cut 2 character after 0x
      signature: isEvm ? `0x${result.signature.slice(4)}` : result.signature
    });
    if (this.#alwaysLock) {
      this.keyringLock();
    }
    return true;
  }

  /// Derive account

  derivationCreateMultiple({
    isAllowed,
    items,
    parentAddress
  }) {
    const parentPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(parentAddress);
    const isEvm = parentPair.type === 'ethereum';
    if (parentPair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(parentPair.address);
    }
    const createChild = ({
      name,
      suri
    }) => {
      const meta = {
        name: name,
        parentAddress
      };
      if (isEvm) {
        let index = 0;
        try {
          const reg = /^\d+$/;
          const path = suri.split('//')[1];
          if (reg.test(path)) {
            index = parseInt(path);
          }
        } catch (e) {}
        if (!index) {
          throw Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Invalid derive path'));
        }
        meta.suri = `//${index}`;
        return parentPair.deriveEvm(index, meta);
      } else {
        meta.suri = suri;
        return parentPair.derive(suri, meta);
      }
    };
    const result = [];
    for (const item of items) {
      try {
        const childPair = createChild(item);
        const address = childPair.address;
        _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addPair(childPair, true);
        this._addAddressToAuthList(address, isAllowed);
        result.push(childPair);
      } catch (e) {
        console.log(e);
      }
    }
    if (result.length === 1) {
      this._saveCurrentAccountAddress(result[0].address);
    } else {
      this.#koniState.setCurrentAccount({
        address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_5__.ALL_ACCOUNT_KEY,
        currentGenesisHash: null
      });
    }
    return true;
  }
  derivationCreateV3({
    address: parentAddress
  }) {
    const parentPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(parentAddress);
    const isEvm = parentPair.type === 'ethereum';
    if (parentPair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(parentPair.address);
    }
    const pairs = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPairs();
    const children = pairs.filter(p => p.meta.parentAddress === parentAddress);
    const name = `Account ${pairs.length}`;
    let index = isEvm ? 1 : 0;
    let valid = false;
    do {
      const exist = children.find(p => p.meta.suri === `//${index}`);
      if (exist) {
        index++;
      } else {
        valid = true;
      }
    } while (!valid);
    const meta = {
      name,
      parentAddress,
      suri: `//${index}`
    };
    const childPair = isEvm ? parentPair.deriveEvm(index, meta) : parentPair.derive(meta.suri, meta);
    const address = childPair.address;
    this._saveCurrentAccountAddress(address, () => {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.addPair(childPair, true);
      this._addAddressToAuthList(address, true);
    });
    if (this.#alwaysLock) {
      this.keyringLock();
    }
    return true;
  }
  validateDerivePath({
    parentAddress,
    suri
  }) {
    const parentPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(parentAddress);
    const isEvm = parentPair.type === 'ethereum';
    if (parentPair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(parentPair.address);
    }
    const meta = {
      parentAddress
    };
    let childPair;
    if (isEvm) {
      let index = 0;
      try {
        const reg = /^\d+$/;
        const path = suri.split('//')[1];
        if (reg.test(path)) {
          index = parseInt(path);
        }
      } catch (e) {}
      if (!index) {
        throw Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Invalid derive path'));
      }
      meta.suri = `//${index}`;
      childPair = parentPair.deriveEvm(index, meta);
    } else {
      meta.suri = suri;
      childPair = parentPair.derive(suri, meta);
    }
    return {
      address: childPair.address,
      suri: meta.suri
    };
  }
  getListDeriveAccounts({
    limit,
    page,
    parentAddress
  }) {
    const parentPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.getPair(parentAddress);
    const isEvm = parentPair.type === 'ethereum';
    if (parentPair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_7__.keyring.unlockPair(parentPair.address);
    }
    const start = (page - 1) * limit + (isEvm ? 1 : 0);
    const end = start + limit;
    const result = [];
    for (let i = start; i < end; i++) {
      const suri = `//${i}`;
      const pair = isEvm ? parentPair.deriveEvm(i, {}) : parentPair.derive(suri, {});
      result.push({
        address: pair.address,
        suri: suri
      });
    }
    return {
      result: result
    };
  }

  // ChainService -------------------------------------------------
  async subscribeChainInfoMap(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    let ready = false;
    const chainInfoMapSubscription = this.#koniState.subscribeChainInfoMap().subscribe({
      next: rs => {
        if (ready) {
          cb(rs);
        }
      }
    });
    this.createUnsubscriptionHandle(id, chainInfoMapSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    await this.#koniState.eventService.waitChainReady;
    ready = true;
    return this.#koniState.getChainInfoMap();
  }
  subscribeChainStateMap(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const chainStateMapSubscription = this.#koniState.subscribeChainStateMap().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, chainStateMapSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.getChainStateMap();
  }
  async subscribeAssetRegistry(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    let ready = false;
    const assetRegistrySubscription = this.#koniState.subscribeAssetRegistry().subscribe({
      next: rs => {
        if (ready) {
          cb(rs);
        }
      }
    });
    this.createUnsubscriptionHandle(id, assetRegistrySubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    await this.#koniState.eventService.waitAssetReady;
    ready = true;
    return this.#koniState.getAssetRegistry();
  }
  subscribeMultiChainAssetMap(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const multiChainAssetSubscription = this.#koniState.subscribeMultiChainAssetMap().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, multiChainAssetSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.getMultiChainAssetMap();
  }
  subscribeXcmRefMap(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const xcmRefSubscription = this.#koniState.subscribeXcmRefMap().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, xcmRefSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.getXcmRefMap();
  }
  getSupportedSmartContractTypes() {
    return this.#koniState.getSupportedSmartContractTypes();
  }
  getTransaction({
    id
  }) {
    const {
      transaction,
      ...transactionResult
    } = this.#koniState.transactionService.getTransaction(id);
    return transactionResult;
  }
  subscribeTransactions(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    function convertRs(rs) {
      return Object.fromEntries(Object.entries(rs).map(([key, value]) => {
        const {
          additionalValidator,
          eventsHandler,
          transaction,
          ...transactionResult
        } = value;
        return [key, transactionResult];
      }));
    }
    const transactionsSubject = this.#koniState.transactionService.getTransactionSubject();
    const transactionsSubscription = transactionsSubject.subscribe(rs => {
      cb(convertRs(rs));
    });
    port.onDisconnect.addListener(() => {
      transactionsSubscription.unsubscribe();
      this.cancelSubscription(id);
    });
    return convertRs(transactionsSubject.getValue());
  }
  subscribeNotifications(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const notificationSubject = this.#koniState.notificationService.getNotificationSubject();
    const notificationSubscription = notificationSubject.subscribe(rs => {
      cb(rs);
    });
    port.onDisconnect.addListener(() => {
      notificationSubscription.unsubscribe();
      this.cancelSubscription(id);
    });
    return notificationSubject.value;
  }
  async reloadCron({
    data
  }) {
    if (data === 'nft') {
      return await this.#koniState.reloadNft();
    } else if (data === 'staking') {
      return await this.#koniState.reloadStaking();
    }
    return Promise.resolve(false);
  }
  async getLogoMap() {
    const [chainLogoMap, assetLogoMap] = await Promise.all([this.#koniState.chainService.getChainLogoMap(), this.#koniState.chainService.getAssetLogoMap()]);
    return {
      chainLogoMap,
      assetLogoMap
    };
  }

  // Phishing detect

  async passPhishingPage({
    url
  }) {
    return await this.#koniState.approvePassPhishingPage(url);
  }

  /// Wallet connect

  // Connect
  async connectWalletConnect({
    uri
  }) {
    await this.#koniState.walletConnectService.connect(uri);
    return true;
  }
  connectWCSubscribe(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.requestService.connectWCSubject.subscribe(requests => cb(requests));
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
      subscription.unsubscribe();
    });
    return this.#koniState.requestService.allConnectWCRequests;
  }
  async approveWalletConnectSession({
    accounts: selectedAccounts,
    id
  }) {
    const request = this.#koniState.requestService.getConnectWCRequest(id);
    if ((0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_53__.isProposalExpired)(request.request.params)) {
      throw new Error('The proposal has been expired');
    }
    const wcId = request.request.id;
    const params = request.request.params;
    const requiredNamespaces = params.requiredNamespaces;
    const optionalNamespaces = params.optionalNamespaces || {};
    const availableNamespaces = {};
    const namespaces = {};
    const chainInfoMap = this.#koniState.getChainInfoMap();
    Object.entries(requiredNamespaces).forEach(([key, namespace]) => {
      if ((0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_53__.isSupportWalletConnectNamespace)(key)) {
        if (namespace.chains) {
          const unSupportChains = namespace.chains.filter(chain => !(0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_53__.isSupportWalletConnectChain)(chain, chainInfoMap));
          if (unSupportChains.length) {
            throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_1__.getSdkError)('UNSUPPORTED_CHAINS').message + ' ' + unSupportChains.toString());
          }
          availableNamespaces[key] = namespace;
        }
      } else {
        throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_1__.getSdkError)('UNSUPPORTED_NAMESPACE_KEY').message + ' ' + key);
      }
    });
    Object.entries(optionalNamespaces).forEach(([key, namespace]) => {
      if ((0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_53__.isSupportWalletConnectNamespace)(key)) {
        if (namespace.chains) {
          const supportChains = namespace.chains.filter(chain => (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_53__.isSupportWalletConnectChain)(chain, chainInfoMap)) || [];
          const requiredNameSpace = availableNamespaces[key];
          const defaultChains = [];
          if (requiredNameSpace) {
            availableNamespaces[key] = {
              chains: [...(requiredNameSpace.chains || defaultChains), ...(supportChains || defaultChains)],
              events: requiredNameSpace.events,
              methods: requiredNameSpace.methods
            };
          } else {
            if (supportChains.length) {
              availableNamespaces[key] = {
                chains: supportChains,
                events: namespace.events,
                methods: namespace.methods
              };
            }
          }
        }
      }
    });
    Object.entries(availableNamespaces).forEach(([key, namespace]) => {
      if (namespace.chains) {
        const accounts = [];
        const chains = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_54__.uniqueStringArray)(namespace.chains);
        chains.forEach(chain => {
          accounts.push(...selectedAccounts.filter(address => (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_23__.isEthereumAddress)(address) === (key === _subwallet_extension_base_services_wallet_connect_service_constants__WEBPACK_IMPORTED_MODULE_55__.WALLET_CONNECT_EIP155_NAMESPACE)).map(address => `${chain}:${address}`));
        });
        namespaces[key] = {
          accounts,
          methods: namespace.methods,
          events: namespace.events,
          chains: chains
        };
      }
    });
    const result = {
      id: wcId,
      namespaces: namespaces,
      relayProtocol: params.relays[0].protocol
    };
    await this.#koniState.walletConnectService.approveSession(result);
    request.resolve();
    return true;
  }
  async rejectWalletConnectSession({
    id
  }) {
    const request = this.#koniState.requestService.getConnectWCRequest(id);
    const wcId = request.request.id;
    if ((0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_53__.isProposalExpired)(request.request.params)) {
      request.reject(new Error('The proposal has been expired'));
      return true;
    }
    await this.#koniState.walletConnectService.rejectSession(wcId);
    request.reject(new Error('USER_REJECTED'));
    return true;
  }
  subscribeWalletConnectSessions(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.walletConnectService.sessionSubject.subscribe(rs => {
      cb(rs);
    });
    port.onDisconnect.addListener(() => {
      subscription.unsubscribe();
      this.cancelSubscription(id);
    });
    return this.#koniState.walletConnectService.sessions;
  }
  async disconnectWalletConnectSession({
    topic
  }) {
    await this.#koniState.walletConnectService.disconnect(topic);
    return true;
  }
  WCNotSupportSubscribe(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const subscription = this.#koniState.requestService.notSupportWCSubject.subscribe(requests => cb(requests));
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
      subscription.unsubscribe();
    });
    return this.#koniState.requestService.allNotSupportWCRequests;
  }
  approveWalletConnectNotSupport({
    id
  }) {
    const request = this.#koniState.requestService.getNotSupportWCRequest(id);
    request.resolve();
    return true;
  }
  rejectWalletConnectNotSupport({
    id
  }) {
    const request = this.#koniState.requestService.getNotSupportWCRequest(id);
    request.reject(new Error('USER_REJECTED'));
    return true;
  }

  /// Manta

  async enableMantaPay({
    address,
    password
  }) {
    // always takes the current account
    function timeout() {
      return new Promise(resolve => setTimeout(resolve, 1500));
    }
    try {
      var _this$koniState$chain, _this$koniState$chain2;
      await this.#koniState.chainService.enableChain(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_38__._DEFAULT_MANTA_ZK_CHAIN);
      this.#koniState.chainService.setMantaZkAssetSettings(true);
      const mnemonic = this.keyringExportMnemonic({
        address,
        password
      });
      const {
        connectionStatus
      } = this.#koniState.chainService.getChainStateByKey(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_38__._DEFAULT_MANTA_ZK_CHAIN);
      if (connectionStatus !== _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_56__._ChainConnectionStatus.CONNECTED) {
        // TODO: do better
        await timeout();
      }
      const result = await this.#koniState.enableMantaPay(true, address, password, mnemonic.result);
      this.#skipAutoLock = true;
      await this.saveCurrentAccountAddress({
        address
      });
      const unsubSyncProgress = await ((_this$koniState$chain = this.#koniState.chainService) === null || _this$koniState$chain === void 0 ? void 0 : (_this$koniState$chain2 = _this$koniState$chain.mantaPay) === null || _this$koniState$chain2 === void 0 ? void 0 : _this$koniState$chain2.subscribeSyncProgress());
      console.debug('Start initial sync for MantaPay');
      this.#koniState.initialSyncMantaPay(address).then(() => {
        console.debug('Finished initial sync for MantaPay');
        this.#skipAutoLock = false;
        unsubSyncProgress && unsubSyncProgress();
      }).catch(e => {
        console.error('Error syncing MantaPay', e);
        this.#skipAutoLock = false;
        unsubSyncProgress && unsubSyncProgress();
      });
      return {
        success: !!result,
        message: result ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.MantaPayEnableMessage.SUCCESS : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.MantaPayEnableMessage.UNKNOWN_ERROR
      };
    } catch (e) {
      // @ts-ignore
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      if (e.toString() === 'Error: Unable to decode using the supplied passphrase') {
        return {
          success: false,
          message: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.MantaPayEnableMessage.WRONG_PASSWORD
        };
      }
      return {
        success: false,
        message: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.MantaPayEnableMessage.UNKNOWN_ERROR
      };
    }
  }
  async initSyncMantaPay(address) {
    var _this$koniState$chain3, _this$koniState$chain4, _this$koniState$chain5, _this$koniState$chain6;
    if ((_this$koniState$chain3 = this.#koniState.chainService) !== null && _this$koniState$chain3 !== void 0 && (_this$koniState$chain4 = _this$koniState$chain3.mantaPay) !== null && _this$koniState$chain4 !== void 0 && _this$koniState$chain4.getSyncState().isSyncing) {
      return;
    }
    this.#skipAutoLock = true;
    await this.saveCurrentAccountAddress({
      address
    });
    const unsubSyncProgress = await ((_this$koniState$chain5 = this.#koniState.chainService) === null || _this$koniState$chain5 === void 0 ? void 0 : (_this$koniState$chain6 = _this$koniState$chain5.mantaPay) === null || _this$koniState$chain6 === void 0 ? void 0 : _this$koniState$chain6.subscribeSyncProgress());
    console.debug('Start initial sync for MantaPay');
    this.#koniState.initialSyncMantaPay(address).then(() => {
      var _this$koniState$chain7, _this$koniState$chain8;
      console.debug('Finished initial sync for MantaPay');
      this.#skipAutoLock = false;
      unsubSyncProgress && unsubSyncProgress();
      // make sure the sync state is set, just in case it gets unsubscribed
      (_this$koniState$chain7 = this.#koniState.chainService) === null || _this$koniState$chain7 === void 0 ? void 0 : (_this$koniState$chain8 = _this$koniState$chain7.mantaPay) === null || _this$koniState$chain8 === void 0 ? void 0 : _this$koniState$chain8.setSyncState({
        progress: 100,
        isSyncing: false
      });
    }).catch(e => {
      var _this$koniState$chain9, _this$koniState$chain10;
      console.error('Error syncing MantaPay', e);
      this.#skipAutoLock = false;
      unsubSyncProgress && unsubSyncProgress();
      (_this$koniState$chain9 = this.#koniState.chainService) === null || _this$koniState$chain9 === void 0 ? void 0 : (_this$koniState$chain10 = _this$koniState$chain9.mantaPay) === null || _this$koniState$chain10 === void 0 ? void 0 : _this$koniState$chain10.setSyncState({
        progress: 0,
        isSyncing: false
      });
    });
  }
  async disableMantaPay(address) {
    return this.#koniState.disableMantaPay(address);
  }
  subscribeMantaPayConfig(id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const mantaPayConfigSubscription = this.#koniState.subscribeMantaPayConfig().subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, mantaPayConfigSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return this.#koniState.getMantaPayConfig('calamari');
  }
  subscribeMantaPaySyncState(id, port) {
    var _this$koniState$subsc, _this$koniState$chain11, _this$koniState$chain12;
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_9__.createSubscription)(id, port);
    const syncingStateSubscription = (_this$koniState$subsc = this.#koniState.subscribeMantaPaySyncState()) === null || _this$koniState$subsc === void 0 ? void 0 : _this$koniState$subsc.subscribe({
      next: rs => {
        cb(rs);
      }
    });
    this.createUnsubscriptionHandle(id, syncingStateSubscription.unsubscribe);
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return ((_this$koniState$chain11 = this.#koniState.chainService) === null || _this$koniState$chain11 === void 0 ? void 0 : (_this$koniState$chain12 = _this$koniState$chain11.mantaPay) === null || _this$koniState$chain12 === void 0 ? void 0 : _this$koniState$chain12.getSyncState()) || {
      isSyncing: false,
      progress: 0,
      needManualSync: false
    };
  }

  /// Metadata

  async findRawMetadata({
    genesisHash
  }) {
    const {
      metadata,
      specVersion
    } = await this.#koniState.findMetadata(genesisHash);
    return {
      rawMetadata: metadata,
      specVersion
    };
  }
  async resolveDomainByAddress(request) {
    const chainApi = this.#koniState.getSubstrateApi(request.chain);
    return await (0,_subwallet_extension_base_koni_api_dotsama_domain__WEBPACK_IMPORTED_MODULE_57__.resolveAzeroDomainToAddress)(request.domain, request.chain, chainApi.api);
  }
  async resolveAddressByDomain(request) {
    const chainApi = this.#koniState.getSubstrateApi(request.chain);
    return await (0,_subwallet_extension_base_koni_api_dotsama_domain__WEBPACK_IMPORTED_MODULE_57__.resolveAzeroAddressToDomain)(request.address, request.chain, chainApi.api);
  }

  /// Inject account
  addInjects(request) {
    this.#koniState.keyringService.addInjectAccounts(request.accounts);
    return true;
  }
  removeInjects(request) {
    this.#koniState.keyringService.removeInjectAccounts(request.addresses);
    return true;
  }

  // --------------------------------------------------------------
  // eslint-disable-next-line @typescript-eslint/require-await
  async handle(id, type, request, port) {
    clearTimeout(this.#lockTimeOut);
    if (this.#timeAutoLock > 0) {
      this.#lockTimeOut = setTimeout(() => {
        if (!this.#skipAutoLock) {
          this.keyringLock();
        }
      }, this.#timeAutoLock * 60 * 1000);
    }
    switch (type) {
      /// Clone from PolkadotJs
      case 'pri(accounts.create.external)':
        return this.accountsCreateExternal(request);
      case 'pri(accounts.create.hardware)':
        return this.accountsCreateHardware(request);
      case 'pri(accounts.create.suri)':
        return this.accountsCreateSuri(request);
      case 'pri(accounts.changePassword)':
        return this.accountsChangePassword(request);
      case 'pri(accounts.export)':
        return this.accountsExport(request);
      case 'pri(accounts.show)':
        return this.accountsShow(request);
      case 'pri(accounts.subscribe)':
        return this.accountsSubscribe(id, port);
      case 'pri(accounts.validate)':
        return this.accountsValidate(request);
      case 'pri(metadata.approve)':
        return this.metadataApprove(request);
      case 'pri(metadata.get)':
        return this.metadataGet(request);
      case 'pri(metadata.list)':
        return this.metadataList();
      case 'pri(metadata.reject)':
        return this.metadataReject(request);
      case 'pri(metadata.requests)':
        return this.metadataSubscribe(id, port);
      case 'pri(derivation.create)':
        return this.derivationCreate(request);
      case 'pri(derivation.validate)':
        return this.derivationValidate(request);
      case 'pri(json.restore)':
        return this.jsonRestore(request);
      case 'pri(json.batchRestore)':
        return this.batchRestore(request);
      case 'pri(json.account.info)':
        return this.jsonGetAccountInfo(request);
      case 'pri(seed.create)':
        return this.seedCreate(request);
      case 'pri(seed.validate)':
        return this.seedValidate(request);
      case 'pri(signing.approve.signature)':
        return this.signingApproveSignature(request);
      case 'pri(signing.cancel)':
        return this.signingCancel(request);
      case 'pri(signing.requests)':
        return this.signingSubscribe(id, port);
      case 'pri(window.open)':
        return this.windowOpen(request);

      ///
      case 'pri(authorize.changeSiteAll)':
        return this.changeAuthorizationAll(request, id, port);
      case 'pri(authorize.changeSite)':
        return this.changeAuthorization(request, id, port);
      case 'pri(authorize.changeSitePerAccount)':
        return this.changeAuthorizationPerAcc(request, id, port);
      case 'pri(authorize.changeSitePerSite)':
        return this.changeAuthorizationPerSite(request);
      case 'pri(authorize.changeSiteBlock)':
        return this.changeAuthorizationBlock(request);
      case 'pri(authorize.forgetSite)':
        return this.forgetSite(request, id, port);
      case 'pri(authorize.forgetAllSite)':
        return this.forgetAllSite(id, port);
      case 'pri(authorize.approveV2)':
        return this.authorizeApproveV2(request);
      case 'pri(authorize.rejectV2)':
        return this.authorizeRejectV2(request);
      case 'pri(authorize.cancelV2)':
        return this.authorizeCancelV2(request);
      case 'pri(authorize.requestsV2)':
        return this.authorizeSubscribeV2(id, port);
      case 'pri(authorize.listV2)':
        return this.getAuthListV2();
      case 'pri(authorize.toggle)':
        return this.toggleAuthorization2(request);
      case 'pri(settings.changeBalancesVisibility)':
        return await this.toggleBalancesVisibility();

      // Settings
      case 'pri(settings.subscribe)':
        return await this.subscribeSettings(id, port);
      case 'pri(settings.saveAccountAllLogo)':
        return this.saveAccountAllLogo(request, id, port);
      case 'pri(settings.saveCamera)':
        return this.setCamera(request);
      case 'pri(settings.saveTheme)':
        return this.saveTheme(request);
      case 'pri(settings.saveBrowserConfirmationType)':
        return this.saveBrowserConfirmationType(request);
      case 'pri(settings.saveAutoLockTime)':
        return this.setAutoLockTime(request);
      case 'pri(settings.saveUnlockType)':
        return this.setUnlockType(request);
      case 'pri(settings.saveEnableChainPatrol)':
        return this.setEnableChainPatrol(request);
      case 'pri(settings.saveShowZeroBalance)':
        return this.setShowZeroBalance(request);
      case 'pri(settings.saveLanguage)':
        return this.setLanguage(request);
      case 'pri(settings.saveShowBalance)':
        return this.setShowBalance(request);
      case 'pri(price.getPrice)':
        return await this.getPrice();
      case 'pri(price.getSubscription)':
        return await this.subscribePrice(id, port);
      case 'pri(balance.getBalance)':
        return this.getBalance();
      case 'pri(balance.getSubscription)':
        return this.subscribeBalance(id, port);
      case 'pri(crowdloan.getCrowdloan)':
        return this.getCrowdloan();
      case 'pri(crowdloan.getSubscription)':
        return this.subscribeCrowdloan(id, port);
      case 'pri(derivation.createV2)':
        return this.derivationCreateV2(request);
      case 'pri(json.restoreV2)':
        return this.jsonRestoreV2(request);
      case 'pri(json.batchRestoreV2)':
        return this.batchRestoreV2(request);
      case 'pri(nft.getNft)':
        return await this.getNft();
      case 'pri(nft.getSubscription)':
        return await this.subscribeNft(id, port);
      case 'pri(nftCollection.getNftCollection)':
        return await this.getNftCollection();
      case 'pri(nftCollection.getSubscription)':
        return await this.subscribeNftCollection(id, port);
      case 'pri(staking.getStaking)':
        return this.getStaking();
      case 'pri(staking.getSubscription)':
        return await this.subscribeStaking(id, port);
      case 'pri(stakingReward.getStakingReward)':
        return this.getStakingReward();
      case 'pri(stakingReward.getSubscription)':
        return this.subscribeStakingReward(id, port);
      case 'pri(transaction.history.getSubscription)':
        return await this.subscribeHistory(id, port);

      /* Account management */
      // Add account
      case 'pri(accounts.create.suriV2)':
        return await this.accountsCreateSuriV2(request);
      case 'pri(accounts.create.externalV2)':
        return await this.accountsCreateExternalV2(request);
      case 'pri(accounts.create.hardwareV2)':
        return await this.accountsCreateHardwareV2(request);
      case 'pri(accounts.create.hardwareMultiple)':
        return await this.accountsCreateHardwareMultiple(request);
      case 'pri(accounts.create.withSecret)':
        return await this.accountsCreateWithSecret(request);
      case 'pri(seed.createV2)':
        return this.seedCreateV2(request);

      // Remove account
      case 'pri(accounts.forget)':
        return await this.accountsForgetOverride(request);

      // Validate account
      case 'pri(seed.validateV2)':
        return this.seedValidateV2(request);
      case 'pri(privateKey.validateV2)':
        return this.metamaskPrivateKeyValidateV2(request);
      case 'pri(accounts.checkPublicAndSecretKey)':
        return this.checkPublicAndSecretKey(request);

      // Export account
      case 'pri(accounts.exportPrivateKey)':
        return this.accountExportPrivateKey(request);

      // Subscribe account
      case 'pri(accounts.subscribeWithCurrentAddress)':
        return await this.accountsGetAllWithCurrentAddress(id, port);
      case 'pri(accounts.subscribeAccountsInputAddress)':
        return this.accountsGetAll(id, port);

      // Save current account
      case 'pri(currentAccount.saveAddress)':
        return await this.saveCurrentAccountAddress(request);
      case 'pri(accounts.updateCurrentAddress)':
        return this.updateCurrentAccountAddress(request);

      // Edit account
      case 'pri(accounts.edit)':
        return this.accountsEdit(request);

      // Save contact address
      case 'pri(accounts.saveRecent)':
        return this.saveRecentAccount(request);
      case 'pri(accounts.editContact)':
        return this.editContactAccount(request);
      case 'pri(accounts.deleteContact)':
        return this.deleteContactAccount(request);

      // Subscribe address
      case 'pri(accounts.subscribeAddresses)':
        return this.subscribeAddresses(id, port);
      case 'pri(accounts.resolveDomainToAddress)':
        return await this.resolveDomainByAddress(request);
      case 'pri(accounts.resolveAddressToDomain)':
        return await this.resolveAddressByDomain(request);

      // Inject account
      case 'pri(accounts.inject.add)':
        return this.addInjects(request);
      case 'pri(accounts.inject.remove)':
        return this.removeInjects(request);

      /* Account management */

      // ChainService
      case 'pri(chainService.subscribeChainInfoMap)':
        return this.subscribeChainInfoMap(id, port);
      case 'pri(chainService.subscribeChainStateMap)':
        return this.subscribeChainStateMap(id, port);
      case 'pri(chainService.subscribeXcmRefMap)':
        return this.subscribeXcmRefMap(id, port);
      case 'pri(chainService.getSupportedContractTypes)':
        return this.getSupportedSmartContractTypes();
      case 'pri(chainService.enableChain)':
        return await this.enableChain(request);
      case 'pri(chainService.reconnectChain)':
        return await this.reconnectChain(request);
      case 'pri(chainService.disableChain)':
        return await this.disableChain(request);
      case 'pri(chainService.removeChain)':
        return this.removeCustomChain(request);
      case 'pri(chainService.validateCustomChain)':
        return await this.validateNetwork(request);
      case 'pri(chainService.upsertChain)':
        return await this.upsertChain(request);
      case 'pri(chainService.resetDefaultChains)':
        return this.resetDefaultNetwork();
      case 'pri(chainService.enableChains)':
        return await this.enableChains(request);
      case 'pri(chainService.subscribeAssetRegistry)':
        return this.subscribeAssetRegistry(id, port);
      case 'pri(chainService.subscribeMultiChainAssetMap)':
        return this.subscribeMultiChainAssetMap(id, port);
      case 'pri(chainService.upsertCustomAsset)':
        return await this.upsertCustomToken(request);
      case 'pri(chainService.deleteCustomAsset)':
        return this.deleteCustomAsset(request);
      case 'pri(chainService.validateCustomAsset)':
        return await this.validateCustomAsset(request);
      case 'pri(assetSetting.getSubscription)':
        return this.subscribeAssetSetting(id, port);
      case 'pri(assetSetting.update)':
        return await this.updateAssetSetting(request);
      case 'pri(transfer.checkReferenceCount)':
        return await this.transferCheckReferenceCount(request);
      case 'pri(transfer.checkSupporting)':
        return await this.transferCheckSupporting(request);
      case 'pri(transfer.getExistentialDeposit)':
        return this.transferGetExistentialDeposit(request);
      case 'pri(transfer.getMaxTransferable)':
        return this.transferGetMaxTransferable(request);
      case 'pri(freeBalance.get)':
        return this.getAddressFreeBalance(request);
      case 'pri(freeBalance.subscribe)':
        return this.subscribeAddressFreeBalance(request, id, port);
      case 'pri(subscription.cancel)':
        return this.cancelSubscription(request);
      case 'pri(chainService.recoverSubstrateApi)':
        return this.recoverDotSamaApi(request);
      case 'pri(accounts.get.meta)':
        return this.getAccountMeta(request);

      /// Send NFT
      case 'pri(evmNft.submitTransaction)':
        return this.evmNftSubmitTransaction(request);
      case 'pri(substrateNft.submitTransaction)':
        return this.substrateNftSubmitTransaction(request);

      /// Transfer
      case 'pri(accounts.transfer)':
        return await this.makeTransfer(request);
      case 'pri(accounts.crossChainTransfer)':
        return await this.makeCrossChainTransfer(request);

      /// Sign QR
      case 'pri(qr.transaction.parse.substrate)':
        return this.parseSubstrateTransaction(request);
      case 'pri(qr.transaction.parse.evm)':
        return await this.parseEVMRLP(request);
      case 'pri(qr.sign.substrate)':
        return this.qrSignSubstrate(request);
      case 'pri(qr.sign.evm)':
        return await this.qrSignEVM(request);

      /// External account request
      case 'pri(account.external.reject)':
        return this.rejectExternalRequest(request);
      case 'pri(account.external.resolve)':
        return this.resolveQrTransfer(request);
      case 'pri(accounts.tie)':
        return this.accountsTie2(request);
      case 'pri(confirmations.subscribe)':
        return this.subscribeConfirmations(id, port);
      case 'pri(confirmations.complete)':
        return await this.completeConfirmation(request);

      /// Stake
      case 'pri(bonding.getBondingOptions)':
        return await this.getBondingOptions(request);
      case 'pri(bonding.getNominationPoolOptions)':
        return await this.getNominationPoolOptions(request);
      case 'pri(bonding.subscribeChainStakingMetadata)':
        return await this.subscribeChainStakingMetadata(id, port);
      case 'pri(bonding.subscribeNominatorMetadata)':
        return await this.subscribeStakingNominatorMetadata(id, port);
      case 'pri(bonding.submitBondingTransaction)':
        return await this.submitBonding(request);
      case 'pri(unbonding.submitTransaction)':
        return await this.submitUnbonding(request);
      case 'pri(unbonding.submitWithdrawal)':
        return await this.submitStakeWithdrawal(request);
      case 'pri(staking.submitClaimReward)':
        return await this.submitStakeClaimReward(request);
      case 'pri(staking.submitCancelWithdrawal)':
        return await this.submitCancelStakeWithdrawal(request);
      case 'pri(staking.submitTuringCompound)':
        return await this.submitTuringStakeCompounding(request);
      case 'pri(staking.submitTuringCancelCompound)':
        return await this.submitTuringCancelStakeCompound(request);
      case 'pri(bonding.nominationPool.submitBonding)':
        return await this.submitPoolBonding(request);
      case 'pri(bonding.nominationPool.submitUnbonding)':
        return await this.submitPoolingUnbonding(request);

      // EVM Transaction
      case 'pri(evm.transaction.parse.input)':
        return await this.parseContractInput(request);

      // Auth Url subscribe
      case 'pri(authorize.subscribe)':
        return await this.subscribeAuthUrls(id, port);

      // Phishing page
      case 'pri(phishing.pass)':
        return await this.passPhishingPage(request);

      /// Keyring state
      case 'pri(keyring.subscribe)':
        return this.keyringStateSubscribe(id, port);
      case 'pri(keyring.change)':
        return this.keyringChangeMasterPassword(request);
      case 'pri(keyring.migrate)':
        return this.keyringMigrateMasterPassword(request);
      case 'pri(keyring.unlock)':
        return this.keyringUnlock(request);
      case 'pri(keyring.lock)':
        return this.keyringLock();
      case 'pri(keyring.export.mnemonic)':
        return this.keyringExportMnemonic(request);
      case 'pri(keyring.reset)':
        return await this.resetWallet(request);

      /// Signing external
      case 'pri(signing.approve.passwordV2)':
        return this.signingApprovePasswordV2(request);

      /// Derive account
      case 'pri(derivation.validateV2)':
        return this.validateDerivePath(request);
      case 'pri(derivation.getList)':
        return this.getListDeriveAccounts(request);
      case 'pri(derivation.create.multiple)':
        return this.derivationCreateMultiple(request);
      case 'pri(derivation.createV3)':
        return this.derivationCreateV3(request);

      // Transaction
      case 'pri(transactions.getOne)':
        return this.getTransaction(request);
      case 'pri(transactions.subscribe)':
        return this.subscribeTransactions(id, port);

      // Notification
      case 'pri(notifications.subscribe)':
        return this.subscribeNotifications(id, port);
      case 'pri(cron.reload)':
        return await this.reloadCron(request);
      case 'pri(settings.getLogoMaps)':
        return await this.getLogoMap();

      /// Wallet Connect
      case 'pri(walletConnect.connect)':
        return this.connectWalletConnect(request);
      case 'pri(walletConnect.requests.connect.subscribe)':
        return this.connectWCSubscribe(id, port);
      case 'pri(walletConnect.session.approve)':
        return this.approveWalletConnectSession(request);
      case 'pri(walletConnect.session.reject)':
        return this.rejectWalletConnectSession(request);
      case 'pri(walletConnect.session.subscribe)':
        return this.subscribeWalletConnectSessions(id, port);
      case 'pri(walletConnect.session.disconnect)':
        return this.disconnectWalletConnectSession(request);

      // Not support
      case 'pri(walletConnect.requests.notSupport.subscribe)':
        return this.WCNotSupportSubscribe(id, port);
      case 'pri(walletConnect.notSupport.approve)':
        return this.approveWalletConnectNotSupport(request);
      case 'pri(walletConnect.notSupport.reject)':
        return this.rejectWalletConnectNotSupport(request);

      // Manta
      case 'pri(mantaPay.enable)':
        return await this.enableMantaPay(request);
      case 'pri(mantaPay.initSyncMantaPay)':
        return await this.initSyncMantaPay(request);
      case 'pri(mantaPay.subscribeConfig)':
        return await this.subscribeMantaPayConfig(id, port);
      case 'pri(mantaPay.disable)':
        return await this.disableMantaPay(request);
      case 'pri(mantaPay.subscribeSyncingState)':
        return this.subscribeMantaPaySyncState(id, port);

      // Metadata
      case 'pri(metadata.find)':
        return this.findRawMetadata(request);
      // Default
      default:
        throw new Error(`Unable to handle message of type ${type}`);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/koni/background/handlers/Mobile.ts":
/*!****************************************************************!*\
  !*** ../extension-base/src/koni/background/handlers/Mobile.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Mobile)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0

const DEFAULT_SERVICE_MAP = {
  subscription: {
    chainRegistry: true,
    balance: true,
    crowdloan: true,
    staking: true
  },
  cron: {
    price: true,
    nft: true,
    staking: true,
    history: true,
    recoverApi: true,
    checkApiStatus: true
  }
};
class Mobile {
  // @ts-ignore

  constructor(state) {
    this.state = state;
  }
  ping() {
    return 'mobile:ping';
  }
  initCronAndSubscription({
    cron: {
      activeServices: activeCronServices,
      intervalMap: cronIntervalMap
    },
    subscription: {
      activeServices: activeSubscriptionServices
    }
  }) {
    console.log('initCronAndSubscription');
    return {
      subscription: {
        chainRegistry: true,
        balance: true,
        crowdloan: true,
        staking: true
      },
      cron: {
        price: true,
        nft: true,
        staking: true,
        history: true,
        recoverApi: true,
        checkApiStatus: true
      }
    };
  }
  subscribeActiveCronAndSubscriptionServiceMap(id, port) {
    return DEFAULT_SERVICE_MAP;
  }
  startCronAndSubscriptionServices({
    cronServices,
    subscriptionServices
  }) {
    console.log('startCronAndSubscriptionServices');
  }
  stopCronAndSubscriptionServices({
    cronServices,
    subscriptionServices
  }) {
    console.log('stopCronAndSubscriptionServices');
  }
  restartCronAndSubscriptionServices({
    cronServices,
    subscriptionServices
  }) {
    console.log('restartCronAndSubscriptionServices');
  }
  startCronServices(services) {
    console.log('startCronServices');
  }
  stopCronServices(services) {
    console.log('stopCronServices');
  }
  restartCronServices(services) {
    console.log('stopCronServices');
  }
  startSubscriptionServices(services) {
    console.log('startSubscriptionServices');
  }
  stopSubscriptionServices(services) {
    console.log('stopSubscriptionServices');
  }
  restartSubscriptionServices(services) {
    console.log('restartSubscriptionServices');
  }

  // eslint-disable-next-line @typescript-eslint/require-await
  async handle(id, type, request, port) {
    switch (type) {
      case 'mobile(ping)':
        return this.ping();
      case 'mobile(cronAndSubscription.init)':
        return this.initCronAndSubscription(request);
      case 'mobile(cronAndSubscription.activeService.subscribe)':
        return this.subscribeActiveCronAndSubscriptionServiceMap(id, port);
      case 'mobile(cronAndSubscription.start)':
        return this.startCronAndSubscriptionServices(request);
      case 'mobile(cronAndSubscription.stop)':
        return this.stopCronAndSubscriptionServices(request);
      case 'mobile(cronAndSubscription.restart)':
        return this.restartCronAndSubscriptionServices(request);
      case 'mobile(cron.start)':
        return this.startCronServices(request);
      case 'mobile(cron.stop)':
        return this.stopCronServices(request);
      case 'mobile(cron.restart)':
        return this.restartCronServices(request);
      case 'mobile(subscription.start)':
        return this.startSubscriptionServices(request);
      case 'mobile(subscription.stop)':
        return this.stopSubscriptionServices(request);
      case 'mobile(subscription.restart)':
        return this.restartSubscriptionServices(request);
      default:
        throw new Error(`Unable to handle message of type ${type}`);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/koni/background/handlers/State.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/koni/background/handlers/State.ts ***!
  \***************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KoniState)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/chain-list */ "../../node_modules/@subwallet/chain-list/index.js");
/* harmony import */ var _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/EvmProviderError */ "../extension-base/src/background/errors/EvmProviderError.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/helpers */ "../extension-base/src/background/handlers/helpers.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/subscriptions */ "../extension-base/src/background/handlers/subscriptions.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_services_balance_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @subwallet/extension-base/services/balance-service */ "../extension-base/src/services/balance-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/base/types */ "../extension-base/src/services/base/types.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service */ "../extension-base/src/services/chain-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_event_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/services/event-service */ "../extension-base/src/services/event-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_history_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @subwallet/extension-base/services/history-service */ "../extension-base/src/services/history-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_keyring_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/services/keyring-service */ "../extension-base/src/services/keyring-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_migration_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service */ "../extension-base/src/services/migration-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_notification_service_NotificationService__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @subwallet/extension-base/services/notification-service/NotificationService */ "../extension-base/src/services/notification-service/NotificationService.ts");
/* harmony import */ var _subwallet_extension_base_services_price_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @subwallet/extension-base/services/price-service */ "../extension-base/src/services/price-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_request_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @subwallet/extension-base/services/request-service */ "../extension-base/src/services/request-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_setting_service_SettingService__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @subwallet/extension-base/services/setting-service/SettingService */ "../extension-base/src/services/setting-service/SettingService.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_DatabaseService__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/DatabaseService */ "../extension-base/src/services/storage-service/DatabaseService.ts");
/* harmony import */ var _subwallet_extension_base_services_subscan_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/services/subscan-service */ "../extension-base/src/services/subscan-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_subscan_service_subscan_chain_map__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! @subwallet/extension-base/services/subscan-service/subscan-chain-map */ "../extension-base/src/services/subscan-service/subscan-chain-map.ts");
/* harmony import */ var _subwallet_extension_base_services_transaction_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @subwallet/extension-base/services/transaction-service */ "../extension-base/src/services/transaction-service/index.ts");
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service */ "../extension-base/src/services/wallet-connect-service/index.ts");
/* harmony import */ var _subwallet_extension_base_stores_AccountRef__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/stores/AccountRef */ "../extension-base/src/stores/AccountRef.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth/parseTransaction */ "../extension-base/src/utils/eth/parseTransaction/index.ts");
/* harmony import */ var _subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! @subwallet/extension-base/utils/promise */ "../extension-base/src/utils/promise.ts");
/* harmony import */ var _subwallet_keyring_pair_decode__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! @subwallet/keyring/pair/decode */ "../../node_modules/@subwallet/keyring/pair/decode.js");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/bundle.js");
/* harmony import */ var eth_simple_keyring__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eth-simple-keyring */ "../../node_modules/eth-simple-keyring/index.js");
/* harmony import */ var eth_simple_keyring__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eth_simple_keyring__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/Subject.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/assert.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/u8a/toHex.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/stripPrefix.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/hex.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/hex/toU8a.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_39__);
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/base64/bs64.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/key/extractSuri.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
/* harmony import */ var _cron__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../cron */ "../extension-base/src/koni/background/cron.ts");
/* harmony import */ var _subscription__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../subscription */ "../extension-base/src/koni/background/subscription.ts");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_subwallet_extension_base_services_chain_service__WEBPACK_IMPORTED_MODULE_13__, _subwallet_extension_base_services_balance_service__WEBPACK_IMPORTED_MODULE_17__, _subscription__WEBPACK_IMPORTED_MODULE_22__]);
([_subwallet_extension_base_services_chain_service__WEBPACK_IMPORTED_MODULE_13__, _subwallet_extension_base_services_balance_service__WEBPACK_IMPORTED_MODULE_17__, _subscription__WEBPACK_IMPORTED_MODULE_22__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0







































// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const passworder = __webpack_require__(/*! browser-passworder */ "../../node_modules/browser-passworder/index.js");
const ETH_DERIVE_DEFAULT = '/m/44\'/60\'/0\'/0/0';

// List of providers passed into constructor. This is the list of providers
// exposed by the extension.

const getSuri = (seed, type) => {
  return type === 'ethereum' ? `${seed}${ETH_DERIVE_DEFAULT}` : seed;
};
const generateDefaultCrowdloanMap = () => {
  const crowdloanMap = {};
  Object.entries(_subwallet_chain_list__WEBPACK_IMPORTED_MODULE_2__.ChainInfoMap).forEach(([networkKey, chainInfo]) => {
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isSubstrateParaChain)(chainInfo)) {
      crowdloanMap[networkKey] = {
        state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.APIItemState.PENDING,
        contribute: '0'
      };
    }
  });
  return crowdloanMap;
};
class KoniState {
  injectedProviders = new Map();
  unsubscriptionMap = {};
  accountRefStore = new _subwallet_extension_base_stores_AccountRef__WEBPACK_IMPORTED_MODULE_5__["default"]();
  externalRequest = {};
  balanceMap = {};
  balanceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  crowdloanMap = generateDefaultCrowdloanMap();
  crowdloanSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  nftSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  mantaPayConfigSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  isMantaPayEnabled = false;
  stakingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  chainStakingMetadataSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  stakingNominatorMetadataSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  stakingRewardSubject = new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
  stakingRewardState = {
    ready: false,
    data: {}
  };
  lazyMap = {};
  // Handle the general status of the extension
  generalStatus = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.INITIALIZING;
  waitSleeping = null;
  waitStarting = null;
  constructor(providers = {}) {
    this.providers = providers;
    this.eventService = new _subwallet_extension_base_services_event_service__WEBPACK_IMPORTED_MODULE_8__.EventService();
    this.dbService = new _subwallet_extension_base_services_storage_service_DatabaseService__WEBPACK_IMPORTED_MODULE_9__["default"](this.eventService);
    this.keyringService = new _subwallet_extension_base_services_keyring_service__WEBPACK_IMPORTED_MODULE_10__.KeyringService(this.eventService);
    this.subscanService = new _subwallet_extension_base_services_subscan_service__WEBPACK_IMPORTED_MODULE_11__.SubscanService();
    this.notificationService = new _subwallet_extension_base_services_notification_service_NotificationService__WEBPACK_IMPORTED_MODULE_12__["default"]();
    this.chainService = new _subwallet_extension_base_services_chain_service__WEBPACK_IMPORTED_MODULE_13__.ChainService(this.dbService, this.eventService);
    this.settingService = new _subwallet_extension_base_services_setting_service_SettingService__WEBPACK_IMPORTED_MODULE_14__["default"]();
    this.requestService = new _subwallet_extension_base_services_request_service__WEBPACK_IMPORTED_MODULE_15__["default"](this.chainService, this.settingService, this.keyringService);
    this.priceService = new _subwallet_extension_base_services_price_service__WEBPACK_IMPORTED_MODULE_16__.PriceService(this.dbService, this.eventService, this.chainService);
    this.balanceService = new _subwallet_extension_base_services_balance_service__WEBPACK_IMPORTED_MODULE_17__.BalanceService(this.chainService);
    this.historyService = new _subwallet_extension_base_services_history_service__WEBPACK_IMPORTED_MODULE_18__.HistoryService(this.dbService, this.chainService, this.eventService, this.keyringService);
    this.transactionService = new _subwallet_extension_base_services_transaction_service__WEBPACK_IMPORTED_MODULE_19__["default"](this.chainService, this.eventService, this.requestService, this.balanceService, this.historyService, this.notificationService, this.dbService);
    this.walletConnectService = new _subwallet_extension_base_services_wallet_connect_service__WEBPACK_IMPORTED_MODULE_20__["default"](this, this.requestService);
    this.migrationService = new _subwallet_extension_base_services_migration_service__WEBPACK_IMPORTED_MODULE_21__["default"](this);
    this.subscription = new _subscription__WEBPACK_IMPORTED_MODULE_22__.KoniSubscription(this, this.dbService);
    this.cron = new _cron__WEBPACK_IMPORTED_MODULE_23__.KoniCron(this, this.subscription, this.dbService);
    this.logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_24__.logger)('State');

    // Init state
    this.init().catch(console.error);
  }

  // Clone from polkadot.js
  get knownMetadata() {
    return this.requestService.knownMetadata;
  }
  injectMetadata(url, request) {
    return this.requestService.injectMetadata(url, request);
  }
  getMetaRequest(id) {
    return this.requestService.getMetaRequest(id);
  }
  getSignRequest(id) {
    return this.requestService.getSignRequest(id);
  }

  // List all providers the extension is exposing
  rpcListProviders() {
    return Promise.resolve(Object.keys(this.providers).reduce((acc, key) => {
      acc[key] = this.providers[key].meta;
      return acc;
    }, {}));
  }
  rpcSend(request, port) {
    const provider = this.injectedProviders.get(port);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.assert)(provider, 'Cannot call pub(rpc.subscribe) before provider is set');
    return provider.send(request.method, request.params);
  }

  // Start a provider, return its meta
  rpcStartProvider(key, port) {
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.assert)(Object.keys(this.providers).includes(key), 'Provider cannot be found.');
    if (this.injectedProviders.get(port)) {
      return Promise.resolve(this.providers[key].meta);
    }

    // Instantiate the provider
    this.injectedProviders.set(port, this.providers[key].start());

    // Close provider connection when page is closed
    port.onDisconnect.addListener(() => {
      const provider = this.injectedProviders.get(port);
      if (provider) {
        (0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_26__.withErrorLog)(() => provider.disconnect());
      }
      this.injectedProviders.delete(port);
    });
    return Promise.resolve(this.providers[key].meta);
  }
  rpcSubscribe({
    method,
    params,
    type
  }, cb, port) {
    const provider = this.injectedProviders.get(port);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.assert)(provider, 'Cannot call pub(rpc.subscribe) before provider is set');
    return provider.subscribe(type, method, params, cb);
  }
  rpcSubscribeConnected(_request, cb, port) {
    const provider = this.injectedProviders.get(port);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.assert)(provider, 'Cannot call pub(rpc.subscribeConnected) before provider is set');
    cb(null, provider.isConnected); // Immediately send back current isConnected
    provider.on('connected', () => cb(null, true));
    provider.on('disconnected', () => cb(null, false));
  }
  rpcUnsubscribe(request, port) {
    const provider = this.injectedProviders.get(port);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.assert)(provider, 'Cannot call pub(rpc.unsubscribe) before provider is set');
    return provider.unsubscribe(request.type, request.method, request.subscriptionId);
  }
  saveMetadata(meta) {
    this.requestService.saveMetadata(meta);
  }
  sign(url, request, account) {
    return this.requestService.sign(url, request, account);
  }
  get authSubjectV2() {
    return this.requestService.authSubjectV2;
  }
  generateDefaultBalanceMap() {
    const balanceMap = {};
    const activeChains = this.chainService.getActiveChainInfoMap();
    Object.values(activeChains).forEach(chainInfo => {
      const chainAssetMap = this.chainService.getFungibleTokensByChain(chainInfo.slug);
      Object.keys(chainAssetMap).forEach(assetSlug => {
        balanceMap[assetSlug] = {
          tokenSlug: assetSlug,
          free: '',
          locked: '',
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.APIItemState.PENDING
        };
      });
    });
    return balanceMap;
  }
  async init() {
    await this.eventService.waitCryptoReady;
    await this.chainService.init();
    await this.migrationService.run();
    this.eventService.emit('chain.ready', true);
    this.onReady();
    this.onAccountAdd();
    this.onAccountRemove();
    await this.startSubscription();
  }
  async initMantaPay(password) {
    var _this$chainService, _this$chainService$ma;
    const mantaPayConfig = await ((_this$chainService = this.chainService) === null || _this$chainService === void 0 ? void 0 : (_this$chainService$ma = _this$chainService.mantaPay) === null || _this$chainService$ma === void 0 ? void 0 : _this$chainService$ma.getMantaPayFirstConfig(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN));
    if (mantaPayConfig && mantaPayConfig.enabled && !this.isMantaPayEnabled) {
      // only init the first login
      console.debug('Initiating MantaPay for', mantaPayConfig.address);
      await this.enableMantaPay(false, mantaPayConfig.address, password);
      console.debug('Initiated MantaPay for', mantaPayConfig.address);
      this.isMantaPayEnabled = true;
      this.eventService.emit('mantaPay.enable', mantaPayConfig.address);
    }
  }
  async startSubscription() {
    await this.eventService.waitKeyringReady;
    this.dbService.subscribeChainStakingMetadata([], data => {
      this.chainStakingMetadataSubject.next(data);
    });
    this.dbService.subscribeMantaPayConfig(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN, data => {
      this.mantaPayConfigSubject.next(data);
    });
    let unsub;
    this.keyringService.accountSubject.subscribe(accounts => {
      // TODO: improve this
      unsub && unsub.unsubscribe();
      unsub = this.dbService.subscribeNominatorMetadata(Object.keys(accounts), data => {
        this.stakingNominatorMetadataSubject.next(data);
      });
    });
  }
  onReady() {
    // Todo: Need optimize in the future to, only run important services onetime to save resources
    // Todo: If optimize must check activity of web-runner of mobile
    this._start().catch(console.error);
  }
  updateKeyringState(isReady = true, callback) {
    this.keyringService.updateKeyringState(isReady);
    callback && callback();
  }
  lazyNext = (key, callback) => {
    if (this.lazyMap[key]) {
      // @ts-ignore
      clearTimeout(this.lazyMap[key]);
    }
    const lazy = setTimeout(() => {
      callback();
      clearTimeout(lazy);
    }, 300);
    this.lazyMap[key] = lazy;
  };
  getAuthRequestV2(id) {
    return this.requestService.getAuthRequestV2(id);
  }
  setAuthorize(data, callback) {
    this.requestService.setAuthorize(data, callback);
  }
  getAuthorize(update) {
    this.requestService.getAuthorize(update);
  }
  subscribeEvmChainChange() {
    return this.requestService.subscribeEvmChainChange;
  }
  subscribeAuthorizeUrlSubject() {
    return this.requestService.subscribeAuthorizeUrlSubject;
  }
  getAuthList() {
    return this.requestService.getAuthList();
  }
  getAddressList(value = false) {
    const addressList = Object.keys(this.keyringService.accounts);
    return addressList.reduce((addressList, v) => ({
      ...addressList,
      [v]: value
    }), {});
  }
  async authorizeUrlV2(url, request) {
    return this.requestService.authorizeUrlV2(url, request);
  }
  getNativeTokenInfo(networkKey) {
    return this.chainService.getNativeTokenInfo(networkKey);
  }
  getChainInfo(networkKey) {
    return this.chainService.getChainInfoByKey(networkKey);
  }
  async getChainStakingMetadata() {
    return this.dbService.getChainStakingMetadata();
  }
  async getStakingMetadataByChain(chain, type) {
    return this.dbService.getStakingMetadataByChain(chain, type);
  }
  async getNominatorMetadata() {
    return this.dbService.getNominatorMetadata();
  }
  async getMantaPayConfig(chain) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return this.dbService.getMantaPayConfig(chain);
  }
  async getStaking() {
    const addresses = this.getDecodedAddresses();
    const stakings = await this.dbService.getStakings(addresses, this.activeChainSlugs);
    return {
      ready: true,
      details: stakings
    };
  }
  async getStakingOwnersByChains(chains) {
    const stakings = await this.dbService.getStakingsByChains(chains);
    const addresses = [];
    stakings.forEach(staking => {
      if (!addresses.includes(staking.address)) {
        addresses.push(staking.address);
      }
    });
    return addresses;
  }
  async getPooledStakingRecordsByAddress(addresses) {
    return this.dbService.getPooledStakings(addresses, this.activeChainSlugs);
  }
  subscribeMantaPayConfig() {
    return this.mantaPayConfigSubject;
  }
  subscribeStaking() {
    return this.stakingSubject;
  }
  subscribeChainStakingMetadata() {
    return this.chainStakingMetadataSubject;
  }
  subscribeNominatorMetadata() {
    return this.stakingNominatorMetadataSubject;
  }
  ensureUrlAuthorizedV2(url) {
    return this.requestService.ensureUrlAuthorizedV2(url);
  }
  setStakingItem(networkKey, item) {
    this.dbService.updateStaking(networkKey, item.address, item).catch(e => this.logger.warn(e));
  }
  updateChainStakingMetadata(item, changes) {
    this.dbService.updateChainStakingMetadata(item, changes).catch(e => this.logger.warn(e));
  }
  updateStakingNominatorMetadata(item) {
    this.dbService.updateNominatorMetadata(item).catch(e => this.logger.warn(e));
  }
  setNftCollection(network, data, callback) {
    this.dbService.addNftCollection(data).catch(e => this.logger.warn(e));
    callback && callback(data);
  }
  getNftCollection() {
    return this.dbService.getAllNftCollection(this.activeChainSlugs);
  }
  subscribeNftCollection() {
    return this.dbService.stores.nftCollection.subscribeNftCollection(this.activeChainSlugs);
  }
  resetNft(newAddress) {
    this.getNft().then(data => this.nftSubject.next(data || {
      nftList: [],
      total: 0
    })).catch(e => this.logger.warn(e));
    const addresses = this.getDecodedAddresses(newAddress);
    this.dbService.subscribeNft(addresses, this.activeChainSlugs, nfts => {
      this.nftSubject.next({
        nftList: nfts,
        total: nfts.length
      });
    });
  }
  updateNftData(network, nftData, address, callback) {
    this.dbService.addNft(address, nftData).catch(e => this.logger.warn(e));
    callback && callback(nftData);
  }
  deleteNftCollection(chain, collectionId) {
    return this.dbService.deleteNftCollection(chain, collectionId);
  }
  cleanUpNfts(chain, owner, collectionId, nftIds, ownNothing) {
    this.dbService.cleanUpNft(chain, owner, collectionId, nftIds, ownNothing).catch(e => this.logger.warn(e));
  }
  async getNft() {
    const addresses = this.getDecodedAddresses();
    if (!addresses.length) {
      return;
    }
    const nfts = await this.dbService.getNft(addresses, this.activeChainSlugs);
    return {
      nftList: nfts,
      total: nfts.length
    };
  }
  subscribeNft() {
    return this.nftSubject;
  }
  resetStakingReward() {
    this.stakingRewardState.data = {};
    this.stakingRewardSubject.next(this.stakingRewardState);
  }
  updateStakingReward(stakingRewardData, callback) {
    this.stakingRewardState.ready = true;
    const key = `${stakingRewardData.chain}___${stakingRewardData.address}___${stakingRewardData.type}`;
    this.stakingRewardState.data[key] = stakingRewardData;
    if (callback) {
      callback(this.stakingRewardState);
    }
    this.stakingRewardSubject.next(this.stakingRewardState);
  }
  updateStakingRewardReady(ready) {
    this.stakingRewardState.ready = ready;
    this.stakingRewardSubject.next(this.stakingRewardState);
  }
  getAccountRefMap(callback) {
    const refMap = {};
    this.accountRefStore.get('refList', refList => {
      if (refList) {
        refList.forEach(accRef => {
          accRef.forEach(acc => {
            refMap[acc] = [...accRef].filter(r => !(r === acc));
          });
        });
      }
      callback(refMap);
    });
  }
  addAccountRef(addresses, callback) {
    this.accountRefStore.get('refList', refList => {
      const newList = refList ? [...refList] : [];
      newList.push(addresses);
      this.accountRefStore.set('refList', newList, callback);
    });
  }
  removeAccountRef(address, callback) {
    this.accountRefStore.get('refList', refList => {
      if (refList) {
        refList.forEach(accRef => {
          if (accRef.indexOf(address) > -1) {
            accRef.splice(accRef.indexOf(address), 1);
          }
          if (accRef.length < 2) {
            refList.splice(refList.indexOf(accRef), 1);
          }
        });
        this.accountRefStore.set('refList', refList, () => {
          callback();
        });
      } else {
        callback();
      }
    });
  }
  getStakingReward(update) {
    update(this.stakingRewardState);
  }
  subscribeStakingReward() {
    return this.stakingRewardSubject;
  }
  setCurrentAccount(data, callback, preventOneAccount) {
    const {
      address,
      currentGenesisHash
    } = data;
    const result = {
      ...data
    };
    if (address === _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__.ALL_ACCOUNT_KEY) {
      const pairs = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getAccounts();
      const pair = pairs[0];
      const pairGenesisHash = (pair === null || pair === void 0 ? void 0 : pair.meta.genesisHash) || '';
      if (pairs.length > 1 || !pair) {
        result.allGenesisHash = currentGenesisHash || undefined;
      } else {
        if (!preventOneAccount) {
          result.address = pair.address;
          result.currentGenesisHash = pairGenesisHash || '';
          result.allGenesisHash = pairGenesisHash || undefined;
        } else {
          result.allGenesisHash = currentGenesisHash || undefined;
        }
      }
    }
    this.keyringService.setCurrentAccount(result);
    callback && callback();
  }
  setAccountTie(address, genesisHash) {
    if (address !== _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__.ALL_ACCOUNT_KEY) {
      const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getPair(address);
      (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Unable to find account'));
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.saveAccountMeta(pair, {
        ...pair.meta,
        genesisHash
      });
    }
    const accountInfo = this.keyringService.currentAccount;
    if (address === accountInfo.address) {
      accountInfo.currentGenesisHash = genesisHash || _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__.ALL_GENESIS_HASH;
      this.setCurrentAccount(accountInfo);
    }
    return true;
  }
  async switchEvmNetworkByUrl(shortenUrl, networkKey) {
    const authUrls = await this.getAuthList();
    const chainInfo = this.chainService.getChainInfoByKey(networkKey);
    const chainState = this.chainService.getChainStateByKey(networkKey);
    if (authUrls[shortenUrl]) {
      if (chainInfo && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isChainEnabled)(chainState)) {
        await this.enableChain(networkKey);
      }
      authUrls[shortenUrl].currentEvmNetworkKey = networkKey;
      this.setAuthorize(authUrls);
    } else {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INTERNAL_ERROR, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Not found {{shortenUrl}} in auth list', {
        replace: {
          shortenUrl
        }
      }));
    }
  }
  async switchNetworkAccount(id, url, networkKey, changeAddress) {
    const chainInfo = this.chainService.getChainInfoByKey(networkKey);
    const chainState = this.chainService.getChainStateByKey(networkKey);
    const {
      address,
      currentGenesisHash
    } = this.keyringService.currentAccount;
    return this.requestService.addConfirmation(id, url, 'switchNetworkRequest', {
      networkKey,
      address: changeAddress
    }, {
      address: changeAddress
    }).then(({
      isApproved
    }) => {
      if (isApproved) {
        const useAddress = changeAddress || address;
        if (chainInfo && !(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isChainEnabled)(chainState)) {
          this.enableChain(networkKey).catch(console.error);
        }
        if (useAddress !== _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__.ALL_ACCOUNT_KEY) {
          const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getPair(useAddress);
          (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_25__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Unable to find account'));
          _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.saveAccountMeta(pair, {
            ...pair.meta,
            genesisHash: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getSubstrateGenesisHash)(chainInfo)
          });
        }
        if (address !== changeAddress || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getSubstrateGenesisHash)(chainInfo) !== currentGenesisHash || isApproved) {
          this.setCurrentAccount({
            address: useAddress,
            currentGenesisHash: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getSubstrateGenesisHash)(chainInfo)
          });
        }
      }
      return isApproved;
    });
  }
  async addNetworkConfirm(id, url, networkData) {
    return this.requestService.addConfirmation(id, url, 'addNetworkRequest', networkData).then(async ({
      isApproved
    }) => {
      if (isApproved) {
        if (networkData.mode === 'insert') {
          await this.upsertChainInfo(networkData);
        } else {
          // TODO: update existed network (need more discussion)
        }
        return null;
      } else {
        throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.USER_REJECTED_REQUEST);
      }
    });
  }
  async addTokenConfirm(id, url, tokenInfo) {
    return this.requestService.addConfirmation(id, url, 'addTokenRequest', tokenInfo).then(async ({
      isApproved
    }) => {
      if (isApproved) {
        await this.upsertCustomToken({
          originChain: tokenInfo.originChain,
          slug: '',
          name: tokenInfo.name,
          symbol: tokenInfo.symbol,
          decimals: tokenInfo.decimals,
          priceId: null,
          minAmount: null,
          assetType: tokenInfo.type,
          metadata: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._parseMetadataForSmartContractAsset)(tokenInfo.contractAddress),
          multiChainAsset: null,
          hasValue: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isChainTestNet)(this.chainService.getChainInfoByKey(tokenInfo.originChain)),
          icon: ''
        });
        return isApproved;
      } else {
        throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.USER_REJECTED_REQUEST);
      }
    });
  }
  get metaSubject() {
    return this.requestService.metaSubject;
  }
  get signSubject() {
    return this.requestService.signSubject;
  }
  getSettings(callback) {
    this.settingService.getSettings(callback);
  }
  setSettings(settings, callback) {
    this.settingService.setSettings(settings, callback);
  }
  updateSetting(key, value) {
    this.settingService.getSettings(settings => {
      const newSettings = {
        ...settings,
        [key]: value
      };
      this.settingService.setSettings(newSettings);
    });
  }
  setShowBalance(value) {
    this.settingService.getSettings(settings => {
      const newSettings = {
        ...settings,
        isShowBalance: value
      };
      this.settingService.setSettings(newSettings);
    });
  }
  subscribeSettingsSubject() {
    return this.settingService.getSubject();
  }
  getAccountAddress() {
    const address = this.keyringService.currentAccount.address;
    if (address === '') {
      return null;
    }
    return address;
  }
  getDecodedAddresses(address) {
    let checkingAddress = address;
    if (!address) {
      checkingAddress = this.getAccountAddress();
    }
    if (!checkingAddress) {
      return [];
    }
    if (checkingAddress === _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__.ALL_ACCOUNT_KEY) {
      return this.getAllAddresses();
    }
    return [checkingAddress];
  }
  getAllAddresses() {
    return _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getAccounts().map(account => account.address);
  }
  removeInactiveChainBalances(balanceMap) {
    const activeBalanceMap = {};
    Object.entries(balanceMap).forEach(([tokenSlug, balanceItem]) => {
      const tokenInfo = this.chainService.getAssetBySlug(tokenSlug);
      if (tokenInfo) {
        const chainInfo = this.chainService.getChainInfoByKey(tokenInfo.originChain);
        if (chainInfo && this.getChainStateByKey(chainInfo.slug).active) {
          activeBalanceMap[tokenSlug] = balanceItem;
        }
      }
    });
    return activeBalanceMap;
  }
  getBalance(reset) {
    const activeData = this.removeInactiveChainBalances(this.balanceMap);
    return {
      details: activeData,
      reset
    };
  }
  async getStoredBalance(address) {
    const items = await this.dbService.stores.balance.getBalanceMapByAddress(address);
    return items || {};
  }
  async handleSwitchAccount(newAddress) {
    await Promise.all([this.resetBalanceMap(newAddress), this.resetCrowdloanMap(newAddress)]);
  }
  async resetBalanceMap(newAddress) {
    const defaultData = this.generateDefaultBalanceMap();
    let storedData = await this.getStoredBalance(newAddress);
    storedData = this.removeInactiveChainBalances(storedData);
    this.balanceMap = {
      ...defaultData,
      ...storedData
    };
    this.publishBalance(true);
  }
  async resetCrowdloanMap(newAddress) {
    const defaultData = generateDefaultCrowdloanMap();
    const storedData = await this.getStoredCrowdloan(newAddress);
    this.crowdloanMap = {
      ...defaultData,
      ...storedData
    };
    this.publishCrowdloan(true);
  }
  resetStaking(newAddress) {
    this.getStaking().then(data => {
      this.stakingSubject.next(data);
    }).catch(e => this.logger.warn(e));
    const addresses = this.getDecodedAddresses(newAddress);
    this.dbService.subscribeStaking(addresses, this.activeChainSlugs, stakings => {
      this.stakingSubject.next({
        ready: true,
        details: stakings
      });
    });
  }
  setBalanceItem(tokenSlug, item) {
    this.balanceMap[tokenSlug] = {
      timestamp: +new Date(),
      ...item
    };
    this.updateBalanceStore(item);
    this.lazyNext('setBalanceItem', () => {
      this.publishBalance();
    });
  }
  updateBalanceStore(item) {
    const currentAccountInfo = this.keyringService.currentAccount;
    this.dbService.updateBalanceStore(currentAccountInfo.address, item).catch(e => this.logger.warn(e));
  }
  subscribeBalance() {
    return this.balanceSubject;
  }
  getCrowdloan(reset) {
    return {
      details: this.crowdloanMap,
      reset
    };
  }
  async getStoredCrowdloan(address) {
    const items = await this.dbService.stores.crowdloan.getDataByAddressAsObject(address);
    return items || {};
  }
  setCrowdloanItem(networkKey, item) {
    const itemData = {
      ...item,
      timestamp: +new Date()
    };

    // Update crowdloan map
    this.crowdloanMap[networkKey] = itemData;
    this.updateCrowdloanStore(networkKey, itemData);
    this.lazyNext('setCrowdloanItem', () => {
      this.publishCrowdloan();
    });
  }
  updateCrowdloanStore(networkKey, item) {
    const currentAccountInfo = this.keyringService.currentAccount;
    this.dbService.updateCrowdloanStore(networkKey, currentAccountInfo.address, item).catch(e => this.logger.warn(e));
  }
  subscribeCrowdloan() {
    return this.crowdloanSubject;
  }
  getSmartContractNfts() {
    return this.chainService.getSmartContractNfts();
  }

  // ChainService ------------------------------------------------

  getChainInfoMap() {
    return this.chainService.getChainInfoMap();
  }
  getChainStateMap() {
    return this.chainService.getChainStateMap();
  }
  getAssetRefMap() {
    return this.chainService.getAssetRefMap();
  }
  getChainStateByKey(key) {
    return this.chainService.getChainStateByKey(key);
  }
  getAssetRegistry() {
    return this.chainService.getAssetRegistry();
  }
  getMultiChainAssetMap() {
    return this.chainService.getMultiChainAssetMap();
  }
  getXcmRefMap() {
    return this.chainService.getXcmRefMap();
  }
  getAssetByChainAndAsset(chain, assetTypes) {
    return this.chainService.getAssetByChainAndType(chain, assetTypes);
  }
  getAssetBySlug(slug) {
    return this.chainService.getAssetBySlug(slug);
  }
  getXcmEqualAssetByChain(destinationChain, originTokenSlug) {
    return this.chainService.getXcmEqualAssetByChain(destinationChain, originTokenSlug);
  }
  subscribeChainInfoMap() {
    return this.chainService.subscribeChainInfoMap();
  }
  subscribeChainStateMap() {
    return this.chainService.subscribeChainStateMap();
  }
  subscribeAssetRegistry() {
    return this.chainService.subscribeAssetRegistry();
  }
  subscribeMultiChainAssetMap() {
    return this.chainService.subscribeMultiChainAssetMap();
  }
  subscribeXcmRefMap() {
    return this.chainService.subscribeXcmRefMap();
  }
  async upsertCustomToken(data) {
    const tokenSlug = this.chainService.upsertCustomToken(data);
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isAssetFungibleToken)(data)) {
      await this.chainService.updateAssetSetting(tokenSlug, {
        visible: true
      });
      this.eventService.emit('asset.updateState', tokenSlug);
    } else {
      this.eventService.emit('asset.updateState', tokenSlug);
    }
  }
  deleteCustomAssets(targetTokens) {
    this.chainService.deleteCustomAssets(targetTokens);
  }
  async validateCustomChain(provider, existedChainSlug) {
    return await this.chainService.validateCustomChain(provider, existedChainSlug);
  }
  getSupportedSmartContractTypes() {
    return this.chainService.getSupportedSmartContractTypes();
  }
  async validateCustomAsset(data) {
    return await this.chainService.validateCustomToken(data);
  }

  // ------------------------------------------------

  getActiveChainInfoMap() {
    return this.chainService.getActiveChainInfoMap();
  }
  async upsertChainInfo(data) {
    const newNativeTokenSlug = await this.chainService.upsertChain(data);
    if (newNativeTokenSlug) {
      await this.chainService.updateAssetSetting(newNativeTokenSlug, {
        visible: true
      });
      this.eventService.emit('asset.updateState', newNativeTokenSlug);
    }
    return true;
  }
  removeCustomChain(networkKey) {
    return this.chainService.removeCustomChain(networkKey);
  }
  forceRemoveChain(networkKey) {
    this.chainService.forceRemoveChain(networkKey);
  }

  // TODO: avoids turning off chains related to ledger account
  getDefaultNetworkKeys = () => {
    const genesisHashes = {};
    const pairs = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getPairs();
    pairs.forEach(pair => {
      const originGenesisHash = pair.meta.originGenesisHash;
      if (originGenesisHash && typeof originGenesisHash === 'string') {
        genesisHashes[originGenesisHash] = originGenesisHash;
      }
    });
    const hashes = Object.keys(genesisHashes);
    const result = [];
    for (const [key, network] of Object.entries(this.chainService.getChainInfoMap())) {
      const condition = hashes.includes((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getSubstrateGenesisHash)(network) || '');
      if (condition) {
        result.push(key);
      }
    }
    return result;
  };
  async disableChain(chainSlug) {
    await this.chainService.updateAssetSettingByChain(chainSlug, false);
    if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._MANTA_ZK_CHAIN_GROUP.includes(chainSlug)) {
      var _this$chainService2, _this$chainService2$m;
      const mantaPayConfig = await ((_this$chainService2 = this.chainService) === null || _this$chainService2 === void 0 ? void 0 : (_this$chainService2$m = _this$chainService2.mantaPay) === null || _this$chainService2$m === void 0 ? void 0 : _this$chainService2$m.getMantaPayFirstConfig(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN));
      if (mantaPayConfig && mantaPayConfig.enabled && this.isMantaPayEnabled) {
        await this.disableMantaPay(mantaPayConfig.address);
      }
    }
    return this.chainService.disableChain(chainSlug);
  }
  async enableChain(chainSlug, enableTokens = true) {
    if (enableTokens) {
      await this.chainService.updateAssetSettingByChain(chainSlug, true);
    }
    return this.chainService.enableChain(chainSlug);
  }
  resetDefaultChains() {
    const defaultChains = this.getDefaultNetworkKeys();
    return this.chainService.resetChainInfoMap(defaultChains);
  }
  getSubstrateApiMap() {
    return this.chainService.getSubstrateApiMap();
  }
  getSubstrateApi(networkKey) {
    return this.chainService.getSubstrateApi(networkKey);
  }
  getEvmApiMap() {
    return this.chainService.getEvmApiMap();
  }
  getEvmApi(networkKey) {
    return this.chainService.getEvmApi(networkKey);
  }
  getApiMap() {
    return {
      substrate: this.chainService.getSubstrateApiMap(),
      evm: this.chainService.getEvmApiMap()
    };
  }
  refreshSubstrateApi(key) {
    this.chainService.refreshSubstrateApi(key);
    return true;
  }
  refreshWeb3Api(key) {
    this.chainService.refreshEvmApi(key);
  }
  getServiceInfo() {
    return {
      chainInfoMap: this.chainService.getChainInfoMap(),
      chainApiMap: this.getApiMap(),
      currentAccountInfo: this.keyringService.currentAccount,
      assetRegistry: this.chainService.getAssetRegistry(),
      chainStateMap: this.chainService.getChainStateMap()
    };
  }
  getExternalRequestMap() {
    return this.externalRequest;
  }
  setExternalRequestMap(id, value) {
    this.externalRequest[id] = value;
  }
  getExternalRequest(id) {
    return this.externalRequest[id];
  }
  updateExternalRequest(id, value) {
    const rs = this.externalRequest[id];
    if (rs) {
      for (const [_key, _value] of Object.entries(value)) {
        // @ts-ignore
        rs[_key] = _value;
      }
    }
  }
  cleanExternalRequest() {
    const now = new Date().getTime();
    const map = this.externalRequest;
    const arr = [];
    const handlerPushToDelete = (key, value) => {
      arr.push(key);
      value.resolve = undefined;
      value.reject = undefined;
    };
    for (const [key, value] of Object.entries(map)) {
      if (value.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.ExternalRequestPromiseStatus.COMPLETED || value.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.ExternalRequestPromiseStatus.REJECTED) {
        handlerPushToDelete(key, value);
      } else {
        if (now - value.createdAt > 15 * 60 * 60) {
          handlerPushToDelete(key, value);
        }
      }
    }
    for (const key of arr) {
      delete map[key];
    }
  }
  pauseAllNetworks(code, reason) {
    return this.chainService.stopAllChainApis();
  }
  async resumeAllNetworks() {
    return this.chainService.resumeAllChainApis();
  }
  publishBalance(reset) {
    this.balanceSubject.next(this.getBalance(reset));
  }
  publishCrowdloan(reset) {
    this.crowdloanSubject.next(this.getCrowdloan(reset));
  }

  // private publishHistory () {
  //   this.historySubject.next(this.getHistoryMap());
  // }

  // private removeInactiveDataByChain<T> (data: Record<string, T>) {
  //   const activeData: Record<string, T> = {};
  //
  //   Object.entries(data).forEach(([networkKey, items]) => {
  //     if (this.chainService.getChainStateByKey(networkKey).active) {
  //       activeData[networkKey] = items;
  //     }
  //   });
  //
  //   return activeData;
  // }

  findNetworkKeyByGenesisHash(genesisHash) {
    if (!genesisHash) {
      return [undefined, undefined];
    }
    const rs = Object.entries(this.chainService.getChainInfoMap()).find(([networkKey, chainInfo]) => (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getSubstrateGenesisHash)(chainInfo) === genesisHash);
    if (rs) {
      return rs;
    } else {
      return [undefined, undefined];
    }
  }
  findChainIdGenesisHash(genesisHash) {
    const chainInfo = this.findNetworkKeyByGenesisHash(genesisHash)[1];
    return chainInfo ? (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getEvmChainId)(chainInfo) : undefined;
  }
  findNetworkKeyByChainId(chainId) {
    if (!chainId) {
      return [undefined, undefined];
    }
    const rs = Object.entries(this.chainService.getChainInfoMap()).find(([networkKey, chainInfo]) => {
      var _chainInfo$evmInfo;
      return (chainInfo === null || chainInfo === void 0 ? void 0 : (_chainInfo$evmInfo = chainInfo.evmInfo) === null || _chainInfo$evmInfo === void 0 ? void 0 : _chainInfo$evmInfo.evmChainId) === chainId;
    });
    if (rs) {
      return rs;
    } else {
      return [undefined, undefined];
    }
  }
  findSingleMode(genesisHash) {
    const [networkKey] = this.findNetworkKeyByGenesisHash(genesisHash);
    if (!networkKey) {
      return undefined;
    }
    return Object.values(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._PREDEFINED_SINGLE_MODES).find(item => item.networkKeys.includes(networkKey));
  }
  accountExportPrivateKey({
    address,
    password
  }) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    const exportedJson = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.backupAccount(_subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getPair(address), password);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    const decoded = (0,_subwallet_keyring_pair_decode__WEBPACK_IMPORTED_MODULE_31__.decodePair)(password, (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_32__.base64Decode)(exportedJson.encoded), exportedJson.encoding.type);
    return {
      privateKey: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_33__.u8aToHex)(decoded.secretKey),
      publicKey: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_33__.u8aToHex)(decoded.publicKey)
    };
  }
  checkPublicAndSecretKey({
    publicKey,
    secretKey
  }) {
    try {
      const _secret = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_34__.hexStripPrefix)(secretKey);
      if (_secret.length === 64) {
        const suri = `0x${_secret}`;
        const {
          phrase
        } = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_35__.keyExtractSuri)(suri);
        if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_36__.isHex)(phrase) && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_36__.isHex)(phrase, 256)) {
          const type = 'ethereum';
          const address = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.createFromUri(getSuri(suri, type), {}, type).address;
          return {
            address: address,
            isValid: true,
            isEthereum: true
          };
        } else {
          return {
            address: '',
            isValid: false,
            isEthereum: true
          };
        }
      }
      const keyPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.keyring.addFromPair({
        publicKey: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_37__.hexToU8a)(publicKey),
        secretKey: (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_37__.hexToU8a)(secretKey)
      });
      return {
        address: keyPair.address,
        isValid: true,
        isEthereum: false
      };
    } catch (e) {
      console.error(e);
      return {
        address: '',
        isValid: false,
        isEthereum: false
      };
    }
  }
  getEthKeyring(address, password) {
    return new Promise(resolve => {
      const {
        privateKey
      } = this.accountExportPrivateKey({
        address,
        password: password
      });
      const ethKeyring = new (eth_simple_keyring__WEBPACK_IMPORTED_MODULE_0___default())([privateKey]);
      resolve(ethKeyring);
    });
  }
  async evmSign(id, url, method, params, allowedAccounts) {
    let address = '';
    let payload;
    const [p1, p2] = params;
    if (typeof p1 === 'string' && (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_38__.isEthereumAddress)(p1)) {
      address = p1;
      payload = p2;
    } else if (typeof p2 === 'string' && (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_38__.isEthereumAddress)(p2)) {
      address = p2;
      payload = p1;
    }
    if (address === '' || !payload) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Not found address or payload to sign'));
    }
    if (['eth_sign', 'personal_sign', 'eth_signTypedData', 'eth_signTypedData_v1', 'eth_signTypedData_v3', 'eth_signTypedData_v4'].indexOf(method) < 0) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Unsupported action'));
    }
    if (['eth_signTypedData_v3', 'eth_signTypedData_v4'].indexOf(method) > -1) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment
      payload = JSON.parse(payload);
    }

    // Check sign abiblity
    if (!allowedAccounts.find(acc => acc.toLowerCase() === address.toLowerCase())) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('You have rescinded allowance for this account in wallet'));
    }
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getPair(address);
    if (!pair) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Unable to find account'));
    }
    const account = {
      address: pair.address,
      ...pair.meta
    };
    let hashPayload = '';
    let canSign = false;
    switch (method) {
      case 'personal_sign':
        canSign = true;
        hashPayload = payload;
        break;
      case 'eth_sign':
      case 'eth_signTypedData':
      case 'eth_signTypedData_v1':
      case 'eth_signTypedData_v3':
      case 'eth_signTypedData_v4':
        if (!account.isExternal) {
          canSign = true;
        }
        break;
      default:
        throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Unsupported action'));
    }
    const signPayload = {
      account: account,
      type: method,
      payload: payload,
      hashPayload: hashPayload,
      canSign: canSign,
      id
    };
    return this.requestService.addConfirmation(id, url, 'evmSignatureRequest', signPayload, {
      requiredPassword: false,
      address
    }).then(({
      isApproved,
      payload
    }) => {
      if (isApproved) {
        if (payload) {
          return payload;
        } else {
          throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Not found signature'));
        }
      } else {
        throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.USER_REJECTED_REQUEST);
      }
    });
  }
  async evmSendTransaction(id, url, networkKey, allowedAccounts, transactionParams) {
    const evmApi = this.getEvmApi(networkKey);
    const evmNetwork = this.getChainInfo(networkKey);
    const web3 = evmApi.api;
    const autoFormatNumber = val => {
      if (typeof val === 'string' && val.startsWith('0x')) {
        return new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())(val.replace('0x', ''), 16).toString();
      } else if (typeof val === 'number') {
        return val.toString();
      }
      return val;
    };
    if (transactionParams.from === transactionParams.to) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Receiving address must be different from sending address'));
    }
    const transaction = {
      from: transactionParams.from,
      to: transactionParams.to,
      value: autoFormatNumber(transactionParams.value),
      gasPrice: autoFormatNumber(transactionParams.gasPrice),
      maxPriorityFeePerGas: autoFormatNumber(transactionParams.maxPriorityFeePerGas),
      maxFeePerGas: autoFormatNumber(transactionParams.maxFeePerGas),
      data: transactionParams.data
    };

    // Calculate transaction data
    try {
      transaction.gas = await web3.eth.estimateGas({
        ...transaction
      });
    } catch (e) {
      // @ts-ignore
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, e === null || e === void 0 ? void 0 : e.message);
    }
    const gasPrice = await web3.eth.getGasPrice();
    transaction.gasPrice = gasPrice;
    const estimateGas = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())(gasPrice.toString()).mul(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())(transaction.gas)).toString();

    // Address is validated in before step
    const fromAddress = allowedAccounts.find(account => account.toLowerCase() === transaction.from.toLowerCase());
    if (!fromAddress) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('You have rescinded allowance for this account in wallet'));
    }
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_29__.keyring.getPair(fromAddress);
    if (!pair) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Unable to find account'));
    }
    const account = {
      address: pair.address,
      ...pair.meta
    };

    // Validate balance
    const balance = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())((await web3.eth.getBalance(fromAddress)) || 0);
    if (balance.lt(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())(gasPrice.toString()).mul(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())(transaction.gas)).add(new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())(autoFormatNumber(transactionParams.value) || '0')))) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Insufficient balance'));
    }
    transaction.nonce = await web3.eth.getTransactionCount(fromAddress);
    const hashPayload = this.transactionService.generateHashPayload(networkKey, transaction);
    const isToContract = await (0,_subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_40__.isContractAddress)(transaction.to || '', evmApi);
    const parseData = isToContract ? transaction.data ? (await (0,_subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_40__.parseContractInput)(transaction.data, transaction.to || '', evmNetwork)).result : '' : transaction.data || '';
    const requestPayload = {
      ...transaction,
      estimateGas,
      hashPayload,
      isToContract,
      parseData: parseData,
      account: account,
      canSign: true
    };
    const eType = transaction.value ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.ExtrinsicType.TRANSFER_BALANCE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.ExtrinsicType.EVM_EXECUTE;
    const transactionData = {
      ...transaction
    };
    const token = this.chainService.getNativeTokenInfo(networkKey);
    if (eType === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.ExtrinsicType.TRANSFER_BALANCE) {
      // @ts-ignore
      transactionData.tokenSlug = token.slug;
    }

    // Custom handle this instead of general handler transaction
    const transactionEmitter = await this.transactionService.addTransaction({
      transaction: requestPayload,
      address: requestPayload.from,
      chain: networkKey,
      url,
      data: transactionData,
      extrinsicType: eType,
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.ChainType.EVM,
      estimateFee: {
        value: estimateGas,
        symbol: token.symbol,
        decimals: token.decimals || 18
      },
      id
    });

    // Wait extrinsic hash
    return new Promise((resolve, reject) => {
      transactionEmitter.on('extrinsicHash', rs => {
        resolve(rs.extrinsicHash);
      });

      // Mapping error for evmProvider
      transactionEmitter.on('error', rs => {
        var _rs$errors$;
        let evmProviderError = new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INTERNAL_ERROR);
        const errorType = ((_rs$errors$ = rs.errors[0]) === null || _rs$errors$ === void 0 ? void 0 : _rs$errors$.errorType) || _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.BasicTxErrorType.INTERNAL_ERROR;
        if (errorType === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.BasicTxErrorType.USER_REJECT_REQUEST || errorType === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.BasicTxErrorType.UNABLE_TO_SIGN) {
          evmProviderError = new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.USER_REJECTED_REQUEST);
        } else if (errorType === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.BasicTxErrorType.UNABLE_TO_SEND) {
          var _rs$errors$2;
          evmProviderError = new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_30__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.EvmProviderErrorType.INTERNAL_ERROR, (_rs$errors$2 = rs.errors[0]) === null || _rs$errors$2 === void 0 ? void 0 : _rs$errors$2.message);
        }
        reject(evmProviderError);
      });
    });
  }
  getConfirmationsQueueSubject() {
    return this.requestService.confirmationsQueueSubject;
  }
  async completeConfirmation(request) {
    return await this.requestService.completeConfirmation(request);
  }
  onInstall() {
    // const singleModes = Object.values(_PREDEFINED_SINGLE_MODES);

    // This logic is moved to installation.ts
    // try {
    //   // Open expand page
    //   const url = `${chrome.extension.getURL('index.html')}#/`;
    //
    //   withErrorLog(() => chrome.tabs.create({ url }));
    // } catch (e) {
    //   console.error(e);
    // }

    // const setUpSingleMode = ({ networkKeys, theme }: SingleModeJson) => {
    //   networkKeys.forEach((key) => {
    //     this.enableChain(key).catch(console.error);
    //   });
    //
    //   const chainInfo = this.chainService.getChainInfoByKey(networkKeys[0]);
    //   const genesisHash = _getSubstrateGenesisHash(chainInfo);
    //
    //   this.setCurrentAccount({
    //     address: ALL_ACCOUNT_KEY,
    //     currentGenesisHash: genesisHash.length > 0 ? genesisHash : null
    //   });
    //   this.setTheme(theme);
    // };
    //
    // chrome.tabs.query({}, function (tabs) {
    //   const openingUrls = tabs.map((t) => t.url);
    //
    //   const singleMode = singleModes.find(({ autoTriggerDomain }) => {
    //     const urlRegex = new RegExp(autoTriggerDomain);
    //
    //     return Boolean(openingUrls.find((url) => {
    //       return url && urlRegex.test(url);
    //     }));
    //   });
    //
    //   if (singleMode) {
    //     // Wait for everything is ready before enable single mode
    //     setTimeout(() => {
    //       setUpSingleMode(singleMode);
    //     }, 999);
    //   }
    // });
  }
  get activeNetworks() {
    return this.chainService.getActiveChainInfos();
  }
  get activeChainSlugs() {
    return Object.values(this.activeNetworks).map(chainInfo => {
      return chainInfo.slug;
    });
  }
  async sleep() {
    // Wait starting finish before sleep to avoid conflict
    this.generalStatus === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STARTING && this.waitStarting && (await this.waitStarting);
    this.eventService.emit('general.sleep', true);

    // Avoid sleep multiple times
    if (this.generalStatus === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STOPPED) {
      return;
    }

    // Continue wait existed stopping process
    if (this.generalStatus === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STOPPING) {
      await this.waitSleeping;
      return;
    }
    const sleeping = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_41__.createPromiseHandler)();
    this.generalStatus = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STOPPING;
    this.waitSleeping = sleeping.promise;

    // Stopping services
    await Promise.all([this.cron.stop(), this.subscription.stop()]);
    await this.pauseAllNetworks(undefined, 'IDLE mode');
    await Promise.all([this.historyService.stop(), this.priceService.stop()]);

    // Complete sleeping
    sleeping.resolve();
    this.generalStatus = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STOPPED;
    this.waitSleeping = null;
  }
  async _start(isWakeup = false) {
    // Wait sleep finish before start to avoid conflict
    this.generalStatus === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STOPPING && this.waitSleeping && (await this.waitSleeping);

    // Avoid start multiple times
    if (this.generalStatus === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STARTED) {
      return;
    }

    // Continue wait existed starting process
    if (this.generalStatus === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STARTING) {
      await this.waitStarting;
      return;
    }
    const starting = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_41__.createPromiseHandler)();
    this.generalStatus = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STARTING;
    this.waitStarting = starting.promise;

    // Resume all networks if wakeup from sleep
    if (isWakeup) {
      await this.resumeAllNetworks();
      this.eventService.emit('general.wakeup', true);
    }

    // Start services
    await Promise.all([this.cron.start(), this.subscription.start(), this.historyService.start(), this.priceService.start()]);

    // Complete starting
    starting.resolve();
    this.waitStarting = null;
    this.generalStatus = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_7__.ServiceStatus.STARTED;
  }
  async wakeup() {
    await this._start(true);
  }
  cancelSubscription(id) {
    if ((0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_42__.isSubscriptionRunning)(id)) {
      (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_42__.unsubscribe)(id);
    }
    if (this.unsubscriptionMap[id]) {
      this.unsubscriptionMap[id]();
      delete this.unsubscriptionMap[id];
    }
    return true;
  }
  createUnsubscriptionHandle(id, unsubscribe) {
    this.unsubscriptionMap[id] = unsubscribe;
  }
  async autoEnableChains(addresses) {
    const assetMap = this.chainService.getAssetRegistry();
    const promiseList = addresses.map(address => {
      return this.subscanService.getMultiChainBalance(address).catch(e => {
        console.error(e);
        return null;
      });
    });
    const needEnableChains = [];
    const needActiveTokens = [];
    const currentAssetSettings = await this.chainService.getAssetSettings();
    const chainMap = this.chainService.getChainInfoMap();
    const balanceDataList = await Promise.all(promiseList);
    balanceDataList.forEach(balanceData => {
      balanceData && balanceData.forEach(({
        balance,
        bonded,
        category,
        locked,
        network,
        symbol
      }) => {
        var _currentAssetSettings;
        const chain = _subwallet_extension_base_services_subscan_service_subscan_chain_map__WEBPACK_IMPORTED_MODULE_43__.SUBSCAN_CHAIN_MAP_REVERSE[network];
        const chainInfo = chain ? chainMap[chain] : null;
        const balanceIsEmpty = (!balance || balance === '0') && (!locked || locked === '0') && (!bonded || bonded === '0');

        // Cancel if chain is not supported or is testnet or balance is 0
        if (!chainInfo || chainInfo.isTestnet || balanceIsEmpty) {
          return;
        }
        const tokenKey = `${chain}-${category === 'native' ? 'NATIVE' : 'LOCAL'}-${symbol.toUpperCase()}`;
        if (assetMap[tokenKey] && !((_currentAssetSettings = currentAssetSettings[tokenKey]) !== null && _currentAssetSettings !== void 0 && _currentAssetSettings.visible)) {
          needEnableChains.push(chain);
          needActiveTokens.push(tokenKey);
          currentAssetSettings[tokenKey] = {
            visible: true
          };
        }
      });
    });
    if (needActiveTokens.length) {
      await this.chainService.enableChains(needEnableChains);
      this.chainService.setAssetSettings({
        ...currentAssetSettings
      });
    }
  }
  onAccountAdd() {
    this.eventService.on('account.add', address => {
      this.autoEnableChains([address]).catch(this.logger.error);
    });
  }
  onAccountRemove() {
    this.eventService.on('account.remove', address => {
      // Some separate service like historyService will listen to this event and remove inside that service

      const stores = this.dbService.stores;

      // Remove Balance
      stores.balance.removeAllByAddress(address).catch(console.error);
      stores.balance.removeAllByAddress(_subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__.ALL_ACCOUNT_KEY).catch(console.error);

      // Remove NFT
      stores.nft.deleteNftByAddress([address]).catch(console.error);

      // Remove Staking Data
      stores.staking.removeAllByAddress(address).catch(console.error);
    });
  }
  async reloadNft() {
    const currentAddress = this.keyringService.currentAccount.address;
    await this.dbService.removeNftsByAddress(currentAddress);
    return await this.cron.reloadNft();
  }
  async reloadStaking() {
    await this.subscription.reloadStaking();
    return true;
  }
  async approvePassPhishingPage(_url) {
    return new Promise(resolve => {
      this.settingService.getPassPhishingList(value => {
        const result = {
          ...value
        };
        const url = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_44__.stripUrl)(_url);
        result[url] = {
          pass: true
        };
        this.settingService.setPassPhishing(result, () => {
          resolve(true);
        });
      });
    });
  }
  async resetWallet(resetAll) {
    await this.keyringService.resetWallet(resetAll);
    this.requestService.resetWallet();
    this.transactionService.resetWallet();
    await this.dbService.resetWallet(resetAll);
    this.accountRefStore.set('refList', []);
    if (resetAll) {
      this.settingService.resetWallet();
    }
    this.chainService.resetWallet(resetAll);
    await this.walletConnectService.resetWallet(resetAll);
    await this.chainService.init();
  }
  async enableMantaPay(updateStore, address, password, seedPhrase) {
    var _this$chainService3, _this$chainService3$m, _this$chainService4, _this$chainService4$m, _this$chainService4$m2, _this$chainService11, _this$chainService11$, _this$chainService11$2;
    if (!address || (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_38__.isEthereumAddress)(address)) {
      return;
    }
    (_this$chainService3 = this.chainService) === null || _this$chainService3 === void 0 ? void 0 : (_this$chainService3$m = _this$chainService3.mantaPay) === null || _this$chainService3$m === void 0 ? void 0 : _this$chainService3$m.setCurrentAddress(address);
    await ((_this$chainService4 = this.chainService) === null || _this$chainService4 === void 0 ? void 0 : (_this$chainService4$m = _this$chainService4.mantaPay) === null || _this$chainService4$m === void 0 ? void 0 : (_this$chainService4$m2 = _this$chainService4$m.privateWallet) === null || _this$chainService4$m2 === void 0 ? void 0 : _this$chainService4$m2.initialSigner());
    if (updateStore && seedPhrase) {
      var _this$chainService5, _this$chainService5$m, _this$chainService5$m2, _this$chainService6, _this$chainService6$m, _this$chainService6$m2, _this$chainService7, _this$chainService7$m, _this$chainService7$m2, _this$chainService8, _this$chainService8$m;
      // first time initiation
      await ((_this$chainService5 = this.chainService) === null || _this$chainService5 === void 0 ? void 0 : (_this$chainService5$m = _this$chainService5.mantaPay) === null || _this$chainService5$m === void 0 ? void 0 : (_this$chainService5$m2 = _this$chainService5$m.privateWallet) === null || _this$chainService5$m2 === void 0 ? void 0 : _this$chainService5$m2.loadUserSeedPhrase(seedPhrase));
      const authContext = await ((_this$chainService6 = this.chainService) === null || _this$chainService6 === void 0 ? void 0 : (_this$chainService6$m = _this$chainService6.mantaPay) === null || _this$chainService6$m === void 0 ? void 0 : (_this$chainService6$m2 = _this$chainService6$m.privateWallet) === null || _this$chainService6$m2 === void 0 ? void 0 : _this$chainService6$m2.getAuthorizationContext());
      await ((_this$chainService7 = this.chainService) === null || _this$chainService7 === void 0 ? void 0 : (_this$chainService7$m = _this$chainService7.mantaPay) === null || _this$chainService7$m === void 0 ? void 0 : (_this$chainService7$m2 = _this$chainService7$m.privateWallet) === null || _this$chainService7$m2 === void 0 ? void 0 : _this$chainService7$m2.loadAuthorizationContext(authContext));
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
      const encryptedData = await passworder.encrypt(password, authContext);
      await ((_this$chainService8 = this.chainService) === null || _this$chainService8 === void 0 ? void 0 : (_this$chainService8$m = _this$chainService8.mantaPay) === null || _this$chainService8$m === void 0 ? void 0 : _this$chainService8$m.saveMantaAuthContext({
        chain: _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN,
        address,
        data: encryptedData
      }));
    } else {
      var _this$chainService9, _this$chainService9$m, _this$chainService10, _this$chainService10$, _this$chainService10$2;
      const authContext = await ((_this$chainService9 = this.chainService) === null || _this$chainService9 === void 0 ? void 0 : (_this$chainService9$m = _this$chainService9.mantaPay) === null || _this$chainService9$m === void 0 ? void 0 : _this$chainService9$m.getMantaAuthContext(address, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN));

      // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
      const decryptedData = await passworder.decrypt(password, authContext.data);

      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access
      const proofAuthKey = new Uint8Array(Object.values(decryptedData.proof_authorization_key));
      await ((_this$chainService10 = this.chainService) === null || _this$chainService10 === void 0 ? void 0 : (_this$chainService10$ = _this$chainService10.mantaPay) === null || _this$chainService10$ === void 0 ? void 0 : (_this$chainService10$2 = _this$chainService10$.privateWallet) === null || _this$chainService10$2 === void 0 ? void 0 : _this$chainService10$2.loadAuthorizationContext({
        proof_authorization_key: proofAuthKey
      }));
    }
    const zkAddress = await ((_this$chainService11 = this.chainService) === null || _this$chainService11 === void 0 ? void 0 : (_this$chainService11$ = _this$chainService11.mantaPay) === null || _this$chainService11$ === void 0 ? void 0 : (_this$chainService11$2 = _this$chainService11$.privateWallet) === null || _this$chainService11$2 === void 0 ? void 0 : _this$chainService11$2.getZkAddress());
    if (updateStore) {
      var _this$chainService12, _this$chainService12$, _this$chainService13, _this$chainService13$, _this$chainService13$2, _this$chainService13$3;
      await ((_this$chainService12 = this.chainService) === null || _this$chainService12 === void 0 ? void 0 : (_this$chainService12$ = _this$chainService12.mantaPay) === null || _this$chainService12$ === void 0 ? void 0 : _this$chainService12$.saveMantaPayConfig({
        address,
        zkAddress: zkAddress,
        enabled: true,
        chain: (_this$chainService13 = this.chainService) === null || _this$chainService13 === void 0 ? void 0 : (_this$chainService13$ = _this$chainService13.mantaPay) === null || _this$chainService13$ === void 0 ? void 0 : (_this$chainService13$2 = _this$chainService13$.privateWallet) === null || _this$chainService13$2 === void 0 ? void 0 : (_this$chainService13$3 = _this$chainService13$2.network) === null || _this$chainService13$3 === void 0 ? void 0 : _this$chainService13$3.toLowerCase(),
        isInitialSync: false
      }));
    }
    this.isMantaPayEnabled = true;
    return zkAddress;
  }
  async disableMantaPay(address) {
    var _this$chainService14, _this$chainService14$, _this$chainService15, _this$chainService15$, _this$chainService15$2, _this$chainService16, _this$chainService16$, _this$chainService16$2, _this$chainService17, _this$chainService17$, _this$chainService18, _this$chainService18$;
    const config = await ((_this$chainService14 = this.chainService) === null || _this$chainService14 === void 0 ? void 0 : (_this$chainService14$ = _this$chainService14.mantaPay) === null || _this$chainService14$ === void 0 ? void 0 : _this$chainService14$.getMantaPayConfig(address, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN));
    if (!config) {
      return false;
    }
    await ((_this$chainService15 = this.chainService) === null || _this$chainService15 === void 0 ? void 0 : (_this$chainService15$ = _this$chainService15.mantaPay) === null || _this$chainService15$ === void 0 ? void 0 : (_this$chainService15$2 = _this$chainService15$.privateWallet) === null || _this$chainService15$2 === void 0 ? void 0 : _this$chainService15$2.dropAuthorizationContext());
    await ((_this$chainService16 = this.chainService) === null || _this$chainService16 === void 0 ? void 0 : (_this$chainService16$ = _this$chainService16.mantaPay) === null || _this$chainService16$ === void 0 ? void 0 : (_this$chainService16$2 = _this$chainService16$.privateWallet) === null || _this$chainService16$2 === void 0 ? void 0 : _this$chainService16$2.dropUserSeedPhrase());
    // await this.chainService?.mantaPay?.privateWallet?.resetState();
    await ((_this$chainService17 = this.chainService) === null || _this$chainService17 === void 0 ? void 0 : (_this$chainService17$ = _this$chainService17.mantaPay) === null || _this$chainService17$ === void 0 ? void 0 : _this$chainService17$.deleteMantaPayConfig(address, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN));
    await ((_this$chainService18 = this.chainService) === null || _this$chainService18 === void 0 ? void 0 : (_this$chainService18$ = _this$chainService18.mantaPay) === null || _this$chainService18$ === void 0 ? void 0 : _this$chainService18$.deleteMantaAuthContext(address, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN));
    this.chainService.setMantaZkAssetSettings(false);
    this.isMantaPayEnabled = false;
    return true;
  }
  async initialSyncMantaPay(address) {
    var _this$chainService19, _this$chainService19$, _this$chainService20, _this$chainService20$, _this$chainService20$2, _this$chainService20$3, _this$chainService21, _this$chainService21$, _this$chainService21$2, _this$chainService22, _this$chainService22$;
    if (!address || (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_38__.isEthereumAddress)(address)) {
      return;
    }
    (_this$chainService19 = this.chainService) === null || _this$chainService19 === void 0 ? void 0 : (_this$chainService19$ = _this$chainService19.mantaPay) === null || _this$chainService19$ === void 0 ? void 0 : _this$chainService19$.setCurrentAddress(address);
    await ((_this$chainService20 = this.chainService) === null || _this$chainService20 === void 0 ? void 0 : (_this$chainService20$ = _this$chainService20.mantaPay) === null || _this$chainService20$ === void 0 ? void 0 : (_this$chainService20$2 = _this$chainService20$.privateWallet) === null || _this$chainService20$2 === void 0 ? void 0 : (_this$chainService20$3 = _this$chainService20$2.baseWallet) === null || _this$chainService20$3 === void 0 ? void 0 : _this$chainService20$3.isApiReady());
    const syncResult = await ((_this$chainService21 = this.chainService) === null || _this$chainService21 === void 0 ? void 0 : (_this$chainService21$ = _this$chainService21.mantaPay) === null || _this$chainService21$ === void 0 ? void 0 : (_this$chainService21$2 = _this$chainService21$.privateWallet) === null || _this$chainService21$2 === void 0 ? void 0 : _this$chainService21$2.initialWalletSync());
    await ((_this$chainService22 = this.chainService) === null || _this$chainService22 === void 0 ? void 0 : (_this$chainService22$ = _this$chainService22.mantaPay) === null || _this$chainService22$ === void 0 ? void 0 : _this$chainService22$.updateMantaPayConfig(address, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN, {
      isInitialSync: true
    }));
    this.eventService.emit('mantaPay.initSync', undefined);
    return syncResult;
  }
  getMantaZkBalance() {
    var _this$chainService23, _this$chainService24, _this$chainService24$, _this$chainService24$2, _this$chainService25, _this$chainService25$, _this$chainService26, _this$chainService26$, _this$chainService26$2;
    if (!this.chainService || !((_this$chainService23 = this.chainService) !== null && _this$chainService23 !== void 0 && _this$chainService23.mantaPay)) {
      return;
    }
    if (!((_this$chainService24 = this.chainService) !== null && _this$chainService24 !== void 0 && (_this$chainService24$ = _this$chainService24.mantaPay) !== null && _this$chainService24$ !== void 0 && (_this$chainService24$2 = _this$chainService24$.privateWallet) !== null && _this$chainService24$2 !== void 0 && _this$chainService24$2.initialSyncIsFinished)) {
      return;
    }
    const chain = (_this$chainService25 = this.chainService) === null || _this$chainService25 === void 0 ? void 0 : (_this$chainService25$ = _this$chainService25.mantaPay.privateWallet) === null || _this$chainService25$ === void 0 ? void 0 : _this$chainService25$.network;
    if (!chain) {
      return;
    }
    const assetMap = this.chainService.getMantaZkAssets(chain === null || chain === void 0 ? void 0 : chain.toLowerCase());
    (_this$chainService26 = this.chainService) === null || _this$chainService26 === void 0 ? void 0 : (_this$chainService26$ = _this$chainService26.mantaPay) === null || _this$chainService26$ === void 0 ? void 0 : (_this$chainService26$2 = _this$chainService26$.privateWallet) === null || _this$chainService26$2 === void 0 ? void 0 : _this$chainService26$2.getMultiZkBalance(Object.values(assetMap).map(tokenInfo => new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getTokenOnChainAssetId)(tokenInfo)))).then(zkBalances => {
      const assetList = Object.values(assetMap);
      for (let i = 0; i < assetList.length; i++) {
        var _zkBalances$i;
        const balanceItem = {
          tokenSlug: assetList[i].slug,
          state: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.APIItemState.PENDING,
          free: '0',
          locked: '0'
        };
        balanceItem.free = ((_zkBalances$i = zkBalances[i]) === null || _zkBalances$i === void 0 ? void 0 : _zkBalances$i.toString()) || '0';
        balanceItem.state = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_4__.APIItemState.READY;
        this.setBalanceItem(balanceItem.tokenSlug, balanceItem);
      }
    }).catch(console.warn);
  }
  subscribeMantaPayBalance() {
    var _this$chainService27, _this$chainService27$;
    let interval;
    (_this$chainService27 = this.chainService) === null || _this$chainService27 === void 0 ? void 0 : (_this$chainService27$ = _this$chainService27.mantaPay) === null || _this$chainService27$ === void 0 ? void 0 : _this$chainService27$.getMantaPayConfig(this.keyringService.currentAccount.address, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN).then(config => {
      if (config && config.enabled && config.isInitialSync) {
        this.getMantaZkBalance();
        interval = setInterval(this.getMantaZkBalance, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_28__.MANTA_PAY_BALANCE_INTERVAL);
      }
    }).catch(console.warn);
    return () => {
      interval && clearInterval(interval);
    };
  }
  async syncMantaPay() {
    var _this$chainService28, _this$chainService28$, _this$chainService29, _this$chainService29$, _this$chainService29$2;
    const config = await ((_this$chainService28 = this.chainService) === null || _this$chainService28 === void 0 ? void 0 : (_this$chainService28$ = _this$chainService28.mantaPay) === null || _this$chainService28$ === void 0 ? void 0 : _this$chainService28$.getMantaPayFirstConfig(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_27__._DEFAULT_MANTA_ZK_CHAIN));
    if (!config.isInitialSync) {
      return;
    }
    if ((_this$chainService29 = this.chainService) !== null && _this$chainService29 !== void 0 && (_this$chainService29$ = _this$chainService29.mantaPay) !== null && _this$chainService29$ !== void 0 && (_this$chainService29$2 = _this$chainService29$.privateWallet) !== null && _this$chainService29$2 !== void 0 && _this$chainService29$2.initialSyncIsFinished) {
      var _this$chainService30, _this$chainService30$, _this$chainService30$2;
      await ((_this$chainService30 = this.chainService) === null || _this$chainService30 === void 0 ? void 0 : (_this$chainService30$ = _this$chainService30.mantaPay) === null || _this$chainService30$ === void 0 ? void 0 : (_this$chainService30$2 = _this$chainService30$.privateWallet) === null || _this$chainService30$2 === void 0 ? void 0 : _this$chainService30$2.walletSync());
    } else {
      var _this$chainService31, _this$chainService31$, _this$chainService31$2;
      await ((_this$chainService31 = this.chainService) === null || _this$chainService31 === void 0 ? void 0 : (_this$chainService31$ = _this$chainService31.mantaPay) === null || _this$chainService31$ === void 0 ? void 0 : (_this$chainService31$2 = _this$chainService31$.privateWallet) === null || _this$chainService31$2 === void 0 ? void 0 : _this$chainService31$2.initialWalletSync());
    }
  }
  async getMantaPayZkBalance(address, tokenInfo) {
    var _this$chainService32, _this$chainService32$, _this$chainService32$2;
    const bnAssetId = new (_polkadot_util__WEBPACK_IMPORTED_MODULE_39___default())((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getTokenOnChainAssetId)(tokenInfo));
    const balance = await ((_this$chainService32 = this.chainService) === null || _this$chainService32 === void 0 ? void 0 : (_this$chainService32$ = _this$chainService32.mantaPay) === null || _this$chainService32$ === void 0 ? void 0 : (_this$chainService32$2 = _this$chainService32$.privateWallet) === null || _this$chainService32$2 === void 0 ? void 0 : _this$chainService32$2.getZkBalance(bnAssetId));
    return {
      decimals: tokenInfo.decimals || 0,
      symbol: tokenInfo.symbol,
      value: (balance === null || balance === void 0 ? void 0 : balance.toString()) || '0'
    };
  }
  subscribeMantaPaySyncState() {
    var _this$chainService33, _this$chainService34, _this$chainService34$;
    if (!((_this$chainService33 = this.chainService) !== null && _this$chainService33 !== void 0 && _this$chainService33.mantaPay)) {
      return new rxjs__WEBPACK_IMPORTED_MODULE_6__.Subject();
    }
    return (_this$chainService34 = this.chainService) === null || _this$chainService34 === void 0 ? void 0 : (_this$chainService34$ = _this$chainService34.mantaPay) === null || _this$chainService34$ === void 0 ? void 0 : _this$chainService34$.subscribeSyncState();
  }

  // Metadata
  async findMetadata(hash) {
    const metadata = await this.chainService.getMetadataByHash(hash);
    return {
      metadata: (metadata === null || metadata === void 0 ? void 0 : metadata.hexValue) || '',
      specVersion: parseInt((metadata === null || metadata === void 0 ? void 0 : metadata.specVersion) || '0')
    };
  }
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "../extension-base/src/koni/background/handlers/Tabs.ts":
/*!**************************************************************!*\
  !*** ../extension-base/src/koni/background/handlers/Tabs.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "chainPatrolCheckUrl": () => (/* binding */ chainPatrolCheckUrl),
/* harmony export */   "default": () => (/* binding */ KoniTabs)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/EvmProviderError */ "../extension-base/src/background/errors/EvmProviderError.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/helpers */ "../extension-base/src/background/handlers/helpers.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/subscriptions */ "../extension-base/src/background/handlers/subscriptions.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_background_RequestBytesSign__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/background/RequestBytesSign */ "../extension-base/src/background/RequestBytesSign.ts");
/* harmony import */ var _subwallet_extension_base_background_RequestExtrinsicSign__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/background/RequestExtrinsicSign */ "../extension-base/src/background/RequestExtrinsicSign.ts");
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/types */ "../extension-base/src/services/chain-service/handler/types.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/setting-service/constants */ "../extension-base/src/services/setting-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/canDerive.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/index.js");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! web3 */ "../../node_modules/web3/dist/web3.min.js");
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(web3__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _polkadot_phishing__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @polkadot/phishing */ "../../node_modules/@polkadot/phishing/bundle.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/assert.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/number.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



















function transformAccountsV2(accounts, anyType = false, authInfo, accountAuthType) {
  const accountSelected = authInfo ? authInfo.isAllowed ? Object.keys(authInfo.isAllowedMap).filter(address => authInfo.isAllowedMap[address]) : [] : [];
  let authTypeFilter = ({
    type
  }) => true;
  if (accountAuthType === 'substrate') {
    authTypeFilter = ({
      type
    }) => type !== 'ethereum';
  } else if (accountAuthType === 'evm') {
    authTypeFilter = ({
      type
    }) => type === 'ethereum';
  }
  return Object.values(accounts).filter(({
    json: {
      meta: {
        isHidden
      }
    }
  }) => !isHidden).filter(({
    type
  }) => anyType ? true : (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.canDerive)(type)).filter(authTypeFilter).filter(({
    json: {
      address
    }
  }) => accountSelected.includes(address)).sort((a, b) => (a.json.meta.whenCreated || 0) - (b.json.meta.whenCreated || 0)).map(({
    json: {
      address,
      meta: {
        genesisHash,
        name
      }
    },
    type
  }) => ({
    address,
    genesisHash,
    name,
    type
  }));
}
// check if a URL is blocked
const chainPatrolCheckUrl = async url => {
  const response = await fetch('https://app.chainpatrol.io/api/v2/asset/check', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-API-KEY': 'e5e88cd0-7994-4667-9071-bab849c2ba71'
    },
    body: JSON.stringify({
      type: 'URL',
      content: url
    })
  });
  const data = await response.json();
  return data.status === 'BLOCKED';
};
class KoniTabs {
  #accountSubs = {};
  #koniState;
  evmEventEmitterMap = {};
  #chainPatrolService = _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_CHAIN_PATROL_ENABLE;
  #passPhishing = {};
  constructor(koniState) {
    this.#koniState = koniState;
    const updateChainPatrolService = rs => {
      this.#chainPatrolService = rs.enableChainPatrol;
    };
    this.#koniState.settingService.getSettings(updateChainPatrolService);
    this.#koniState.settingService.getSubject().subscribe({
      next: updateChainPatrolService
    });
    const updatePassPhishing = rs => {
      this.#passPhishing = rs;
    };
    this.#koniState.settingService.getPassPhishingList(updatePassPhishing);
    this.#koniState.settingService.passPhishingSubject().subscribe({
      next: updatePassPhishing
    });
  }

  /// Clone from Polkadot.js
  getSigningPair(address) {
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_4__["default"].getPair(address);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_5__.assert)(pair, (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Unable to find account'));
    return pair;
  }
  async bytesSign(url, request) {
    const address = request.address;
    const pair = this.getSigningPair(address);
    const authInfo = await this.getAuthInfo(url);
    if (!authInfo || !authInfo.isAllowed || !authInfo.isAllowedMap[pair.address]) {
      throw new Error('Account {{address}} not in allowed list'.replace('{{address}}', address));
    }
    return this.#koniState.sign(url, new _subwallet_extension_base_background_RequestBytesSign__WEBPACK_IMPORTED_MODULE_6__["default"](request), {
      address,
      ...pair.meta
    });
  }
  async extrinsicSign(url, request) {
    const address = request.address;
    const pair = this.getSigningPair(address);
    const authInfo = await this.getAuthInfo(url);
    if (!authInfo || !authInfo.isAllowed || !authInfo.isAllowedMap[pair.address]) {
      throw new Error('Account {{address}} not in allowed list'.replace('{{address}}', address));
    }
    return this.#koniState.sign(url, new _subwallet_extension_base_background_RequestExtrinsicSign__WEBPACK_IMPORTED_MODULE_7__["default"](request), {
      address,
      ...pair.meta
    });
  }
  metadataProvide(url, request) {
    return this.#koniState.injectMetadata(url, request);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  metadataList(url) {
    return this.#koniState.knownMetadata.map(({
      genesisHash,
      specVersion
    }) => ({
      genesisHash,
      specVersion
    }));
  }
  rpcListProviders() {
    return this.#koniState.rpcListProviders();
  }
  rpcSend(request, port) {
    return this.#koniState.rpcSend(request, port);
  }
  rpcStartProvider(key, port) {
    return this.#koniState.rpcStartProvider(key, port);
  }
  async rpcSubscribe(request, id, port) {
    const innerCb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.createSubscription)(id, port);
    const cb = (_error, data) => innerCb(data);
    const subscriptionId = await this.#koniState.rpcSubscribe(request, cb, port);
    port.onDisconnect.addListener(() => {
      (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.unsubscribe)(id);
      (0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_9__.withErrorLog)(() => this.rpcUnsubscribe({
        ...request,
        subscriptionId
      }, port));
    });
    return true;
  }
  rpcSubscribeConnected(request, id, port) {
    const innerCb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.createSubscription)(id, port);
    const cb = (_error, data) => innerCb(data);
    this.#koniState.rpcSubscribeConnected(request, cb, port);
    port.onDisconnect.addListener(() => {
      (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.unsubscribe)(id);
    });
    return Promise.resolve(true);
  }
  async rpcUnsubscribe(request, port) {
    return this.#koniState.rpcUnsubscribe(request, port);
  }
  redirectPhishingLanding(phishingWebsite) {
    const nonFragment = phishingWebsite.split('#')[0];
    const encodedWebsite = encodeURIComponent(nonFragment);
    const url = `${chrome.extension.getURL('index.html')}#${_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_10__.PHISHING_PAGE_REDIRECT}/${encodedWebsite}`;
    chrome.tabs.query({
      url: nonFragment
    }, tabs => {
      tabs.map(({
        id
      }) => id).filter(id => (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_11__.isNumber)(id)).forEach(id => (0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_9__.withErrorLog)(() => chrome.tabs.update(id, {
        url
      })));
    });
  }
  checkPassList(_url) {
    const url = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_12__.stripUrl)(_url);
    const result = this.#passPhishing[url];
    return result ? !result.pass : true;
  }
  async checkPhishing(url) {
    const isInDenyList = await (0,_polkadot_phishing__WEBPACK_IMPORTED_MODULE_13__.checkIfDenied)(url);
    if (isInDenyList) {
      return this.checkPassList(url);
    }
    if (this.#chainPatrolService) {
      const isInChainPatrolDenyList = await chainPatrolCheckUrl(url);
      if (isInChainPatrolDenyList) {
        return this.checkPassList(url);
      }
    }
    return false;
  }
  async redirectIfPhishing(url) {
    const result = await this.checkPhishing(url);
    if (result) {
      this.redirectPhishingLanding(url);
    }
    return result;
  }

  ///

  cancelSubscription(id) {
    return this.#koniState.cancelSubscription(id);
  }
  createUnsubscriptionHandle(id, unsubscribe) {
    this.#koniState.createUnsubscriptionHandle(id, unsubscribe);
  }
  async getAuthInfo(url, fromList) {
    const authList = fromList || (await this.#koniState.getAuthList());
    const shortenUrl = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_12__.stripUrl)(url);
    return authList[shortenUrl];
  }
  async accountsListV2(url, {
    accountAuthType,
    anyType
  }) {
    const authInfo = await this.getAuthInfo(url);
    return transformAccountsV2(this.#koniState.keyringService.accounts, anyType, authInfo, accountAuthType);
  }
  accountsSubscribeV2(url, {
    accountAuthType
  }, id, port) {
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.createSubscription)(id, port);
    const authInfoSubject = this.#koniState.requestService.subscribeAuthorizeUrlSubject;

    // Update unsubscribe from @polkadot/extension-base
    this.#accountSubs[id] = {
      subscription: authInfoSubject.subscribe(infos => {
        this.getAuthInfo(url, infos).then(authInfo => {
          const accounts = this.#koniState.keyringService.accounts;
          return cb(transformAccountsV2(accounts, false, authInfo, accountAuthType));
        }).catch(console.error);
      }),
      url
    };
    port.onDisconnect.addListener(() => {
      this.accountsUnsubscribe(url, {
        id
      });
    });
    return id;
  }
  accountsUnsubscribe(url, {
    id
  }) {
    const sub = this.#accountSubs[id];
    if (!sub || sub.url !== url) {
      return false;
    }
    delete this.#accountSubs[id];
    (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.unsubscribe)(id);
    sub.subscription.unsubscribe();
    return true;
  }
  authorizeV2(url, request) {
    if (request.accountAuthType === 'evm') {
      return new Promise((resolve, reject) => {
        this.#koniState.authorizeUrlV2(url, request).then(resolve).catch(e => {
          reject(new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.USER_REJECTED_REQUEST));
        });
      });
    } else {
      return this.#koniState.authorizeUrlV2(url, request);
    }
  }
  async getEvmCurrentAccount(url, getAll = false) {
    return await new Promise(resolve => {
      this.getAuthInfo(url).then(authInfo => {
        const allAccounts = this.#koniState.keyringService.accounts;
        const accountList = transformAccountsV2(allAccounts, false, authInfo, 'evm').map(a => a.address);
        let accounts = [];
        const address = this.#koniState.keyringService.currentAccount.address;
        if (address === _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_16__.ALL_ACCOUNT_KEY || !accountList.includes(address) || getAll) {
          accounts = accountList;
        } else if (address && accountList.includes(address)) {
          accounts = [address];
        }
        resolve(accounts);
      }).catch(console.error);
    });
  }
  async getEvmState(url) {
    let currentChain;
    let autoActiveChain = false;
    if (url) {
      const authInfo = await this.getAuthInfo(url);
      if (authInfo !== null && authInfo !== void 0 && authInfo.currentEvmNetworkKey) {
        currentChain = authInfo === null || authInfo === void 0 ? void 0 : authInfo.currentEvmNetworkKey;
      }
      if (authInfo !== null && authInfo !== void 0 && authInfo.isAllowed) {
        autoActiveChain = true;
      }
    }
    const currentEvmNetwork = this.#koniState.requestService.getDAppChainInfo({
      autoActive: autoActiveChain,
      accessType: 'evm',
      defaultChain: currentChain,
      url
    });
    if (currentEvmNetwork) {
      const {
        evmInfo,
        slug
      } = currentEvmNetwork;
      const evmApi = this.#koniState.getEvmApi(slug);
      const web3 = evmApi === null || evmApi === void 0 ? void 0 : evmApi.api;
      if ((web3 === null || web3 === void 0 ? void 0 : web3.currentProvider) instanceof (web3__WEBPACK_IMPORTED_MODULE_1___default().providers.WebsocketProvider)) {
        if (!web3.currentProvider.connected) {
          console.log(`${slug} is disconnected, trying to connect...`);
          this.#koniState.refreshWeb3Api(slug);
          let checkingNum = 0;
          const poll = resolve => {
            checkingNum += 1;
            if (web3.currentProvider.connected) {
              console.log(`${slug} is connected.`);
              resolve(true);
            } else {
              console.log(`Connecting to network [${slug}]`);
              if (checkingNum < 10) {
                setTimeout(() => poll(resolve), 900);
              } else {
                console.log(`Max retry, stop checking [${slug}]`);
                resolve(false);
              }
            }
          };
          await new Promise(poll);
        }
      }
      return {
        networkKey: slug,
        chainId: `0x${((evmInfo === null || evmInfo === void 0 ? void 0 : evmInfo.evmChainId) || 0).toString(16)}`,
        web3
      };
    } else {
      return {};
    }
  }
  async getEvmPermission(url, id) {
    const accounts = await this.getEvmCurrentAccount(url, true);
    return [{
      id: id,
      invoker: url,
      parentCapability: 'eth_accounts',
      caveats: [{
        type: 'restrictReturnedAccounts',
        value: accounts
      }],
      date: new Date().getTime()
    }];
  }
  async switchEvmChain(id, url, {
    params
  }) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    const chainId = params[0].chainId;
    const evmState = await this.getEvmState(url);
    if (evmState.chainId === chainId) {
      return null;
    }
    const [networkKey] = this.#koniState.findNetworkKeyByChainId(parseInt(chainId, 16));
    if (networkKey) {
      await this.#koniState.switchEvmNetworkByUrl((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_12__.stripUrl)(url), networkKey);
    } else {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INVALID_PARAMS, 'This network is currently not supported');
    }
    return null;
  }
  async addEvmToken(id, url, {
    params
  }) {
    var _input$type, _input$options, _input$options2, _input$options3, _input$options4, _input$options5;
    const input = params;
    const _tokenType = (input === null || input === void 0 ? void 0 : (_input$type = input.type) === null || _input$type === void 0 ? void 0 : _input$type.toLowerCase()) || '';
    if (_tokenType !== 'erc20' && _tokenType !== 'erc721') {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INVALID_PARAMS, 'Assets type {{tokenType}} is not supported'.replace('{{tokenType}}', _tokenType));
    }
    if (!(input !== null && input !== void 0 && (_input$options = input.options) !== null && _input$options !== void 0 && _input$options.address) || !(input !== null && input !== void 0 && (_input$options2 = input.options) !== null && _input$options2 !== void 0 && _input$options2.symbol)) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INVALID_PARAMS, 'Unable to get contract address and token symbol');
    }
    const evmState = await this.getEvmState(url);
    const chain = evmState.networkKey;
    if (!chain) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INTERNAL_ERROR, 'The network on dApp is not supported in wallet. Please manually add the network to wallet');
    }
    const tokenType = _tokenType === 'erc20' ? _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_17__._AssetType.ERC20 : _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_17__._AssetType.ERC721;
    const tokenInfo = {
      slug: '',
      type: tokenType,
      name: (input === null || input === void 0 ? void 0 : (_input$options3 = input.options) === null || _input$options3 === void 0 ? void 0 : _input$options3.symbol) || '',
      contractAddress: input.options.address,
      symbol: (input === null || input === void 0 ? void 0 : (_input$options4 = input.options) === null || _input$options4 === void 0 ? void 0 : _input$options4.symbol) || '',
      decimals: (input === null || input === void 0 ? void 0 : (_input$options5 = input.options) === null || _input$options5 === void 0 ? void 0 : _input$options5.decimals) || 0,
      originChain: chain,
      contractError: false,
      validated: false
    };
    this.#koniState.validateCustomAsset({
      type: tokenType,
      contractAddress: input.options.address,
      originChain: chain
    }).then(validate => {
      if (validate.contractError) {
        tokenInfo.contractError = true;
      } else {
        tokenInfo.slug = validate === null || validate === void 0 ? void 0 : validate.existedSlug;
        tokenInfo.name = validate.name || tokenInfo.name;
        tokenInfo.symbol = validate.symbol;
        tokenInfo.decimals = validate.decimals;
      }
    }).catch(() => {
      tokenInfo.contractError = true;
    }).finally(() => {
      tokenInfo.validated = true;
      this.#koniState.requestService.updateConfirmation(id, 'addTokenRequest', tokenInfo);
    });

    // Below code is comment because we will handle exited token in the ui-view
    // if (validate.isExist) {
    //   throw new EvmProviderError(EvmProviderErrorType.INTERNAL_ERROR, 'Current token is existed');
    // } else

    return await this.#koniState.addTokenConfirm(id, url, tokenInfo);
  }
  async addEvmChain(id, url, {
    params
  }) {
    const input = params;
    if (input && input.length > 0) {
      const {
        blockExplorerUrls,
        chainId,
        chainName,
        nativeCurrency: {
          decimals,
          symbol
        },
        rpcUrls
      } = input[0];
      if (chainId) {
        const chainIdNum = parseInt(chainId, 16);
        const [existedNetworkSlug, existedChainInfo] = this.#koniState.findNetworkKeyByChainId(chainIdNum);
        if (existedNetworkSlug && existedChainInfo && existedChainInfo !== null && existedChainInfo !== void 0 && existedChainInfo.evmInfo) {
          return await this.switchEvmChain(id, url, {
            method: 'wallet_switchEthereumChain',
            params: [{
              chainId
            }]
          });
          // const evmInfo = existedChainInfo.evmInfo;
          // const substrateInfo = existedChainInfo.substrateInfo;
          // const chainState = this.#koniState.getChainStateByKey(existedNetworkSlug);
          //
          // return await this.#koniState.addNetworkConfirm(id, url, {
          //   mode: 'update',
          //   chainSpec: {
          //     evmChainId: evmInfo.evmChainId,
          //     decimals: evmInfo.decimals,
          //     existentialDeposit: evmInfo.existentialDeposit,
          //     genesisHash: substrateInfo?.genesisHash || '',
          //     paraId: substrateInfo?.paraId || null,
          //     addressPrefix: substrateInfo?.addressPrefix || 0
          //   },
          //   chainEditInfo: {
          //     blockExplorer: blockExplorerUrls?.[0],
          //     slug: existedNetworkSlug,
          //     currentProvider: chainState.currentProvider,
          //     providers: existedChainInfo.providers,
          //     symbol: evmInfo.symbol,
          //     chainType: 'EVM',
          //     name: existedChainInfo.name
          //   }
          // });
        } else if (rpcUrls && chainName) {
          const filteredUrls = rpcUrls.filter(targetString => {
            let url;
            try {
              url = new URL(targetString);
            } catch (_) {
              return false;
            }
            return url.protocol === 'http:' || url.protocol === 'https:';
          });
          if (!filteredUrls.length) {
            throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INTERNAL_ERROR, 'Currently support WSS provider for Substrate networks and HTTP provider for EVM network');
          }
          const provider = filteredUrls[0];
          const chainInfo = {
            existentialDeposit: '0',
            genesisHash: '',
            success: true,
            addressPrefix: '',
            evmChainId: chainIdNum,
            decimals: decimals,
            symbol: symbol,
            paraId: null,
            name: chainName
          };
          const newProviderKey = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_18__._generateCustomProviderKey)(0);
          const networkData = {
            mode: 'insert',
            chainSpec: {
              evmChainId: chainInfo.evmChainId,
              decimals: chainInfo.decimals,
              existentialDeposit: chainInfo.existentialDeposit,
              genesisHash: chainInfo.genesisHash,
              paraId: chainInfo.paraId,
              addressPrefix: chainInfo.addressPrefix ? parseInt(chainInfo.addressPrefix) : 0
            },
            chainEditInfo: {
              blockExplorer: blockExplorerUrls === null || blockExplorerUrls === void 0 ? void 0 : blockExplorerUrls[0],
              slug: '',
              currentProvider: newProviderKey,
              providers: {
                [newProviderKey]: provider
              },
              symbol: chainInfo.symbol,
              chainType: 'EVM',
              name: chainInfo.name
            },
            unconfirmed: true
          };
          this.#koniState.validateCustomChain(provider).then(res => {
            if (!res.success) {
              networkData.providerError = res.error;
            } else {
              networkData.chainSpec = {
                evmChainId: res.evmChainId,
                decimals: res.decimals,
                existentialDeposit: res.existentialDeposit,
                genesisHash: res.genesisHash,
                paraId: res.paraId,
                addressPrefix: res.addressPrefix ? parseInt(res.addressPrefix) : 0
              };
              networkData.chainEditInfo.symbol = res.symbol;
              networkData.chainEditInfo.name = res.name;
            }
          }).catch(() => {
            networkData.providerError = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_19__._CHAIN_VALIDATION_ERROR.NONE;
          }).finally(() => {
            networkData.unconfirmed = false;
            this.#koniState.requestService.updateConfirmation(id, 'addNetworkRequest', networkData);
          });
          return await this.#koniState.addNetworkConfirm(id, url, networkData);
        } else {
          throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INVALID_PARAMS, 'Invalid provider');
        }
      }
    }
    return null;
  }
  async getEvmCurrentChainId(url) {
    const evmState = await this.getEvmState(url);
    return evmState.chainId || '0x0';
  }
  async evmSubscribeEvents(url, id, port) {
    // This method will be called after DApp request connect to extension
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.createSubscription)(id, port);
    let isConnected = false;
    const emitEvent = (eventName, payload) => {
      // eslint-disable-next-line node/no-callback-literal
      cb({
        type: eventName,
        payload: payload
      });
    };

    // Detect accounts changed
    let currentAccountList = await this.getEvmCurrentAccount(url);
    const onCurrentAccountChanged = async () => {
      const newAccountList = await this.getEvmCurrentAccount(url);

      // Compare to void looping reload
      if (JSON.stringify(currentAccountList) !== JSON.stringify(newAccountList)) {
        // eslint-disable-next-line node/no-callback-literal
        emitEvent('accountsChanged', newAccountList);
        currentAccountList = newAccountList;
      }
    };
    const accountListSubscription = this.#koniState.keyringService.currentAccountSubject.subscribe(() => {
      onCurrentAccountChanged().catch(console.error);
    });

    // Detect network chain
    const evmState = await this.getEvmState(url);
    let currentChainId = evmState.chainId;
    const _onAuthChanged = async () => {
      // Detect network
      const {
        chainId
      } = await this.getEvmState(url);
      if (chainId !== currentChainId) {
        emitEvent('chainChanged', chainId);
        currentChainId = chainId;
      }

      // Detect account
      const newAccountList = await this.getEvmCurrentAccount(url);

      // Compare to void looping reload
      if (JSON.stringify(currentAccountList) !== JSON.stringify(newAccountList)) {
        // eslint-disable-next-line node/no-callback-literal
        emitEvent('accountsChanged', newAccountList);
        currentAccountList = newAccountList;
      }
    };
    const authUrlSubscription = this.#koniState.subscribeEvmChainChange().subscribe(rs => {
      _onAuthChanged().catch(console.error);
    });

    // Detect network connection
    const networkCheck = () => {
      this.getEvmState(url).then(evmState => {
        var _evmState$web;
        (_evmState$web = evmState.web3) === null || _evmState$web === void 0 ? void 0 : _evmState$web.eth.net.isListening().then(connecting => {
          if (connecting && !isConnected) {
            emitEvent('connect', {
              chainId: evmState.chainId
            });
          } else if (!connecting && isConnected) {
            emitEvent('disconnect', new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.CHAIN_DISCONNECTED));
          }
          isConnected = connecting;
        }).catch(console.error);
      }).catch(console.error);
    };
    const networkCheckInterval = setInterval(networkCheck, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_16__.CRON_GET_API_MAP_STATUS);
    const provider = await this.getEvmProvider(url);
    const eventMap = {};
    eventMap.data = ({
      method,
      params
    }) => {
      emitEvent('message', {
        type: method,
        data: params
      });
    };
    eventMap.error = rs => {
      emitEvent('error', rs);
    };
    Object.entries(eventMap).forEach(([event, callback]) => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      (provider === null || provider === void 0 ? void 0 : provider.on) && (provider === null || provider === void 0 ? void 0 : provider.on(event, callback));
    });

    // Add event emitter
    if (!this.evmEventEmitterMap[url]) {
      this.evmEventEmitterMap[url] = {};
    }
    this.evmEventEmitterMap[url][id] = emitEvent;
    this.createUnsubscriptionHandle(id, () => {
      if (this.evmEventEmitterMap[url][id]) {
        delete this.evmEventEmitterMap[url][id];
      }
      Object.entries(eventMap).forEach(([event, callback]) => {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        (provider === null || provider === void 0 ? void 0 : provider.removeListener) && (provider === null || provider === void 0 ? void 0 : provider.removeListener(event, callback));
      });
      accountListSubscription.unsubscribe();
      authUrlSubscription.unsubscribe();
      clearInterval(networkCheckInterval);
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  checkAndHandleProviderStatus(provider) {
    if ((!provider || !(provider !== null && provider !== void 0 && provider.connected)) && provider !== null && provider !== void 0 && provider.supportsSubscriptions()) {
      // excludes HttpProvider
      Object.values(this.evmEventEmitterMap).forEach(m => {
        Object.values(m).forEach(emitter => {
          emitter('disconnect', new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.CHAIN_DISCONNECTED));
        });
      });
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.CHAIN_DISCONNECTED);
    }
  }
  async getEvmProvider(url) {
    var _evmState$web2;
    const evmState = await this.getEvmState(url);
    let provider = (_evmState$web2 = evmState.web3) === null || _evmState$web2 === void 0 ? void 0 : _evmState$web2.currentProvider;
    if (!provider) {
      var _evmState$web3;
      await this.getEvmCurrentChainId(url);
      provider = (_evmState$web3 = evmState.web3) === null || _evmState$web3 === void 0 ? void 0 : _evmState$web3.currentProvider;
    }
    return provider;
  }
  async performWeb3Method(id, url, {
    method,
    params
  }, callback) {
    const provider = await this.getEvmProvider(url);
    this.checkAndHandleProviderStatus(provider);
    return new Promise((resolve, reject) => {
      provider === null || provider === void 0 ? void 0 : provider.send({
        jsonrpc: '2.0',
        method: method,
        params: params,
        id
      }, (error, result) => {
        const err = (result === null || result === void 0 ? void 0 : result.error) || error;
        if (err) {
          reject(err);
        } else {
          const rs = result === null || result === void 0 ? void 0 : result.result;
          callback && callback(rs);
          resolve(rs);
        }
      });
    });
  }
  async canUseAccount(address, url) {
    const allowedAccounts = await this.getEvmCurrentAccount(url, true);
    return !!allowedAccounts.find(acc => acc.toLowerCase() === address.toLowerCase());
  }
  async evmSign(id, url, {
    method,
    params
  }) {
    const allowedAccounts = await this.getEvmCurrentAccount(url, true);
    const signResult = await this.#koniState.evmSign(id, url, method, params, allowedAccounts);
    if (signResult) {
      return signResult;
    } else {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INVALID_PARAMS, 'Failed to sign message');
    }
  }
  async evmSendTransaction(id, url, {
    params
  }) {
    const transactionParams = params[0];
    const canUseAccount = transactionParams.from && this.canUseAccount(transactionParams.from, url);
    const evmState = await this.getEvmState(url);
    const networkKey = evmState.networkKey;
    if (!canUseAccount) {
      throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('You have rescinded allowance for this account in wallet'));
    }
    if (!networkKey) {
      throw new Error('Network unavailable. Please switch network or manually add network to wallet');
    }
    const allowedAccounts = await this.getEvmCurrentAccount(url, true);
    const transactionHash = await this.#koniState.evmSendTransaction(id, url, networkKey, allowedAccounts, transactionParams);
    if (!transactionHash) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.USER_REJECTED_REQUEST);
    }
    return transactionHash;
  }
  async handleEvmRequest(id, url, request) {
    const {
      method
    } = request;
    try {
      switch (method) {
        case 'eth_chainId':
          return await this.getEvmCurrentChainId(url);
        case 'net_version':
          return parseInt(await this.getEvmCurrentChainId(url), 16);
        case 'eth_accounts':
          return await this.getEvmCurrentAccount(url);
        case 'eth_sendTransaction':
          return await this.evmSendTransaction(id, url, request);
        case 'eth_sign':
          return await this.evmSign(id, url, request);
        case 'personal_sign':
          return await this.evmSign(id, url, request);
        case 'eth_signTypedData':
          return await this.evmSign(id, url, request);
        case 'eth_signTypedData_v1':
          return await this.evmSign(id, url, request);
        case 'eth_signTypedData_v3':
          return await this.evmSign(id, url, request);
        case 'eth_signTypedData_v4':
          return await this.evmSign(id, url, request);
        case 'wallet_requestPermissions':
          await this.authorizeV2(url, {
            origin: '',
            accountAuthType: 'evm',
            reConfirm: true
          });
          return await this.getEvmPermission(url, id);
        case 'wallet_getPermissions':
          return await this.getEvmPermission(url, id);
        case 'wallet_addEthereumChain':
          return await this.addEvmChain(id, url, request);
        case 'wallet_switchEthereumChain':
          return await this.switchEvmChain(id, url, request);
        case 'wallet_watchAsset':
          return await this.addEvmToken(id, url, request);
        default:
          return this.performWeb3Method(id, url, request);
      }
    } catch (e) {
      // @ts-ignore
      if (e.code) {
        throw e;
      } else {
        console.error(e);
        throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INTERNAL_ERROR, e === null || e === void 0 ? void 0 : e.toString());
      }
    }
  }
  async handleEvmSend(id, url, port, request) {
    var _evmState$web4;
    const cb = (0,_subwallet_extension_base_background_handlers_subscriptions__WEBPACK_IMPORTED_MODULE_8__.createSubscription)(id, port);
    const evmState = await this.getEvmState(url);
    const provider = (_evmState$web4 = evmState.web3) === null || _evmState$web4 === void 0 ? void 0 : _evmState$web4.currentProvider;
    this.checkAndHandleProviderStatus(provider);
    provider.send(request, (error, result) => {
      // eslint-disable-next-line node/no-callback-literal
      cb({
        error,
        result
      });
      this.cancelSubscription(id);
    });
    port.onDisconnect.addListener(() => {
      this.cancelSubscription(id);
    });
    return true;
  }
  isEvmPublicRequest(type, request) {
    return type === 'evm(request)' && ['eth_chainId', 'net_version'].includes(request === null || request === void 0 ? void 0 : request.method);
  }
  async addPspToken(id, url, {
    genesisHash,
    tokenInfo: input
  }) {
    const _tokenType = input.type;
    if (_tokenType !== 'psp22' && _tokenType !== 'psp34') {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INVALID_PARAMS, 'Assets type {{tokenType}} is not supported'.replace('{{tokenType}}', _tokenType));
    }
    if (!input.address || !input.symbol) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INVALID_PARAMS, 'Unable to get contract address and token symbol');
    }
    const [chain] = this.#koniState.findNetworkKeyByGenesisHash(genesisHash);
    if (!chain) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INTERNAL_ERROR, 'The network on dApp is not supported in wallet. Please manually add the network to wallet');
    }
    const state = this.#koniState.getChainStateByKey(chain);
    if (!state.active) {
      await this.#koniState.enableChain(chain, false);
      const api = this.#koniState.getSubstrateApi(chain);
      await api.isReady;
    }
    const tokenType = _tokenType === 'psp22' ? _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_17__._AssetType.PSP22 : _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_17__._AssetType.PSP34;
    const tokenInfo = {
      slug: '',
      type: tokenType,
      name: input.symbol || '',
      contractAddress: input.address,
      symbol: input.symbol || '',
      decimals: input.decimals || 0,
      originChain: chain,
      contractError: false,
      validated: false
    };
    this.#koniState.validateCustomAsset({
      type: tokenType,
      contractAddress: input.address,
      originChain: chain
    }).then(validate => {
      if (validate.contractError) {
        tokenInfo.contractError = true;
      } else {
        tokenInfo.slug = validate === null || validate === void 0 ? void 0 : validate.existedSlug;
        tokenInfo.name = validate.name || tokenInfo.name;
        tokenInfo.symbol = validate.symbol;
        tokenInfo.decimals = validate.decimals;
      }
    }).catch(() => {
      tokenInfo.contractError = true;
    }).finally(() => {
      tokenInfo.validated = true;
      this.#koniState.requestService.updateConfirmation(id, 'addTokenRequest', tokenInfo);
    });
    return await this.#koniState.addTokenConfirm(id, url, tokenInfo);
  }
  async handle(id, type, request, url, port) {
    if (type === 'pub(phishing.redirectIfDenied)') {
      return this.redirectIfPhishing(url);
    }
    if (type !== 'pub(authorize.tabV2)' && !this.isEvmPublicRequest(type, request)) {
      await this.#koniState.ensureUrlAuthorizedV2(url).catch(e => {
        if (type.startsWith('evm')) {
          throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_14__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_15__.EvmProviderErrorType.INTERNAL_ERROR, e.message);
        } else {
          throw e;
        }
      });
    }
    switch (type) {
      /// Clone from PolkadotJs
      case 'pub(bytes.sign)':
        return this.bytesSign(url, request);
      case 'pub(extrinsic.sign)':
        return this.extrinsicSign(url, request);
      case 'pub(metadata.list)':
        return this.metadataList(url);
      case 'pub(metadata.provide)':
        return this.metadataProvide(url, request);
      case 'pub(ping)':
        return Promise.resolve(true);
      case 'pub(rpc.listProviders)':
        return this.rpcListProviders();
      case 'pub(rpc.send)':
        return this.rpcSend(request, port);
      case 'pub(rpc.startProvider)':
        return this.rpcStartProvider(request, port);
      case 'pub(rpc.subscribe)':
        return this.rpcSubscribe(request, id, port);
      case 'pub(rpc.subscribeConnected)':
        return this.rpcSubscribeConnected(request, id, port);
      case 'pub(rpc.unsubscribe)':
        return this.rpcUnsubscribe(request, port);
      case 'pub(token.add)':
        return this.addPspToken(id, url, request);

      ///
      case 'pub(authorize.tabV2)':
        return this.authorizeV2(url, request);
      case 'pub(accounts.listV2)':
        return this.accountsListV2(url, request);
      case 'pub(accounts.subscribeV2)':
        return this.accountsSubscribeV2(url, request, id, port);
      case 'pub(accounts.unsubscribe)':
        return this.accountsUnsubscribe(url, request);
      case 'evm(events.subscribe)':
        return await this.evmSubscribeEvents(url, id, port);
      case 'evm(request)':
        return await this.handleEvmRequest(id, url, request);
      case 'evm(provider.send)':
        return await this.handleEvmSend(id, url, port, request);
      default:
        throw new Error(`Unable to handle message of type ${type}`);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/koni/background/handlers/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/koni/background/handlers/index.ts ***!
  \***************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ handlers),
/* harmony export */   "extension": () => (/* binding */ extension),
/* harmony export */   "mobile": () => (/* binding */ mobile),
/* harmony export */   "nftHandler": () => (/* binding */ nftHandler),
/* harmony export */   "state": () => (/* binding */ state),
/* harmony export */   "tabs": () => (/* binding */ tabs)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_nft__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/nft */ "../extension-base/src/koni/api/nft/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers/Extension */ "../extension-base/src/koni/background/handlers/Extension.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers_Mobile__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers/Mobile */ "../extension-base/src/koni/background/handlers/Mobile.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers_State__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers/State */ "../extension-base/src/koni/background/handlers/State.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers_Tabs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers/Tabs */ "../extension-base/src/koni/background/handlers/Tabs.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/assert.js");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_subwallet_extension_base_koni_background_handlers_State__WEBPACK_IMPORTED_MODULE_0__]);
_subwallet_extension_base_koni_background_handlers_State__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0








// import Migration from '@subwallet/extension-base/koni/migration';

const state = new _subwallet_extension_base_koni_background_handlers_State__WEBPACK_IMPORTED_MODULE_0__["default"]();
const extension = new _subwallet_extension_base_koni_background_handlers_Extension__WEBPACK_IMPORTED_MODULE_1__["default"](state);
const tabs = new _subwallet_extension_base_koni_background_handlers_Tabs__WEBPACK_IMPORTED_MODULE_2__["default"](state);
const mobile = new _subwallet_extension_base_koni_background_handlers_Mobile__WEBPACK_IMPORTED_MODULE_3__["default"](state);
const nftHandler = new _subwallet_extension_base_koni_api_nft__WEBPACK_IMPORTED_MODULE_4__.NftHandler();

// Migration
// async function makeSureStateReady () {
//   const poll = (resolve: (value: unknown) => void) => {
//     if (state.isReady()) {
//       resolve(true);
//     } else {
//       console.log('Waiting for State is ready...');
//       setTimeout(() => poll(resolve), 400);
//     }
//   };
//
//   return new Promise(poll);
// }

// makeSureStateReady().then(() => {
//   const migration = new Migration(state);
//
//   migration.run().catch((err) => console.warn(err));
// }).catch((e) => console.warn(e));

function handlers({
  id,
  message,
  request
}, port, extensionPortName = _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_5__.PORT_EXTENSION) {
  const isMobile = port.name === _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_5__.PORT_MOBILE;
  const isExtension = port.name === extensionPortName;
  const sender = port.sender;
  const from = isExtension ? 'extension' : sender.tab && sender.tab.url || sender.url || '<unknown>';
  const source = `${from}: ${id}: ${message}`;

  // console.log(` [in] ${source}`); // :: ${JSON.stringify(request)}`);

  const promise = isMobile ? mobile.handle(id, message, request, port) : isExtension ? extension.handle(id, message, request, port) : tabs.handle(id, message, request, from, port);
  promise.then(response => {
    // console.log(`[out] ${source}`); // :: ${JSON.stringify(response)}`);

    // between the start and the end of the promise, the user may have closed
    // the tab, in which case port will be undefined
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__.assert)(port, 'Port has been disconnected');
    port.postMessage({
      id,
      response
    });
  }).catch(error => {
    console.error(error);
    console.log(`[err] ${source}:: ${error.message}`);

    // only send message back to port if it's still connected
    if (port) {
      port.postMessage({
        error: error.message,
        errorCode: error.code,
        errorData: error.data,
        id
      });
    }
  });
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "../extension-base/src/koni/background/subscription.ts":
/*!*************************************************************!*\
  !*** ../extension-base/src/koni/background/subscription.ts ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KoniSubscription": () => (/* binding */ KoniSubscription)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/balance */ "../extension-base/src/koni/api/dotsama/balance.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_crowdloan__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/crowdloan */ "../extension-base/src/koni/api/dotsama/crowdloan.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking */ "../extension-base/src/koni/api/staking/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/bonding */ "../extension-base/src/koni/api/staking/bonding/index.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_staking_paraChain__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/staking/paraChain */ "../extension-base/src/koni/api/staking/paraChain.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers */ "../extension-base/src/koni/background/handlers/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_event_service_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/event-service/types */ "../extension-base/src/services/event-service/types.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_4__, _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__]);
([_subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_4__, _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0











class KoniSubscription {
  subscriptionMap = {
    crowdloan: undefined,
    balance: undefined,
    stakingOnChain: undefined,
    essentialChainStakingMetadata: undefined
  };
  constructor(state, dbService) {
    this.dbService = dbService;
    this.state = state;
    this.logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__.logger)('Subscription');
  }
  getSubscriptionMap() {
    return this.subscriptionMap;
  }
  getSubscription(name) {
    return this.subscriptionMap[name];
  }
  updateSubscription(name, func) {
    const oldFunc = this.subscriptionMap[name];
    oldFunc && oldFunc();
    func && (this.subscriptionMap[name] = func);
  }
  stopAllSubscription() {
    if (this.subscriptionMap.balance) {
      this.subscriptionMap.balance();
      delete this.subscriptionMap.balance;
    }
    if (this.subscriptionMap.crowdloan) {
      this.subscriptionMap.crowdloan();
      delete this.subscriptionMap.crowdloan;
    }
    if (this.subscriptionMap.stakingOnChain) {
      this.subscriptionMap.stakingOnChain();
      delete this.subscriptionMap.stakingOnChain;
    }
  }
  async start() {
    var _this$state$keyringSe;
    await Promise.all([this.state.eventService.waitKeyringReady, this.state.eventService.waitAssetReady]);
    const currentAddress = (_this$state$keyringSe = this.state.keyringService.currentAccount) === null || _this$state$keyringSe === void 0 ? void 0 : _this$state$keyringSe.address;
    if (currentAddress) {
      this.subscribeBalancesAndCrowdloans(currentAddress, this.state.getChainInfoMap(), this.state.getChainStateMap(), this.state.getSubstrateApiMap(), this.state.getEvmApiMap());
      this.subscribeStakingOnChain(currentAddress, this.state.getSubstrateApiMap());
    }
    this.eventHandler = (events, eventTypes) => {
      var _serviceInfo$currentA;
      const serviceInfo = this.state.getServiceInfo();
      const needReload = eventTypes.some(eventType => _subwallet_extension_base_services_event_service_types__WEBPACK_IMPORTED_MODULE_1__.COMMON_RELOAD_EVENTS.includes(eventType));
      if (!needReload) {
        return;
      }
      const address = (_serviceInfo$currentA = serviceInfo.currentAccountInfo) === null || _serviceInfo$currentA === void 0 ? void 0 : _serviceInfo$currentA.address;
      if (!address) {
        return;
      }
      this.subscribeBalancesAndCrowdloans(address, serviceInfo.chainInfoMap, serviceInfo.chainStateMap, serviceInfo.chainApiMap.substrate, serviceInfo.chainApiMap.evm);
      this.subscribeStakingOnChain(address, serviceInfo.chainApiMap.substrate);
    };
    this.state.eventService.onLazy(this.eventHandler);
  }
  async stop() {
    if (this.eventHandler) {
      this.state.eventService.offLazy(this.eventHandler);
      this.eventHandler = undefined;
    }
    this.stopAllSubscription();
    return Promise.resolve();
  }
  subscribeBalancesAndCrowdloans(address, chainInfoMap, chainStateMap, substrateApiMap, web3ApiMap, onlyRunOnFirstTime) {
    this.state.handleSwitchAccount(address).then(() => {
      const addresses = this.state.getDecodedAddresses(address);
      if (!addresses.length) {
        return;
      }
      this.updateSubscription('balance', this.initBalanceSubscription(addresses, chainInfoMap, chainStateMap, substrateApiMap, web3ApiMap, onlyRunOnFirstTime));
      this.updateSubscription('crowdloan', this.initCrowdloanSubscription(addresses, substrateApiMap, onlyRunOnFirstTime));
    }).catch(err => this.logger.warn(err));
  }
  subscribeStakingOnChain(address, substrateApiMap, onlyRunOnFirstTime) {
    this.state.resetStaking(address);
    const addresses = this.state.getDecodedAddresses(address);
    if (!addresses.length) {
      return;
    }
    this.updateSubscription('stakingOnChain', this.initStakingOnChainSubscription(addresses, substrateApiMap, onlyRunOnFirstTime));
    this.updateSubscription('essentialChainStakingMetadata', this.initEssentialChainStakingMetadataSubscription(substrateApiMap, onlyRunOnFirstTime)); // TODO: might not need to re-subscribe on changing account
  }

  initStakingOnChainSubscription(addresses, substrateApiMap, onlyRunOnFirstTime) {
    const stakingCallback = (networkKey, rs) => {
      this.state.setStakingItem(networkKey, rs);
    };
    const nominatorStateCallback = nominatorMetadata => {
      this.state.updateStakingNominatorMetadata(nominatorMetadata);
    };
    const unsub = (0,_subwallet_extension_base_koni_api_staking__WEBPACK_IMPORTED_MODULE_2__.stakingOnChainApi)(addresses, substrateApiMap, this.state.getActiveChainInfoMap(), stakingCallback, nominatorStateCallback);
    if (onlyRunOnFirstTime) {
      unsub && unsub();
      return;
    }
    return () => {
      unsub && unsub();
    };
  }
  initEssentialChainStakingMetadataSubscription(substrateApiMap, onlyRunOnFirstTime) {
    const unsub = (0,_subwallet_extension_base_koni_api_staking_bonding__WEBPACK_IMPORTED_MODULE_3__.subscribeEssentialChainStakingMetadata)(substrateApiMap, this.state.getActiveChainInfoMap(), (networkKey, rs) => {
      this.state.updateChainStakingMetadata(rs, {
        era: rs.era,
        minStake: rs.minStake,
        maxValidatorPerNominator: rs.maxValidatorPerNominator,
        // temporary fix for Astar, there's no limit for now
        maxWithdrawalRequestPerValidator: rs.maxWithdrawalRequestPerValidator,
        // by default
        allowCancelUnstaking: rs.allowCancelUnstaking,
        unstakingPeriod: rs.unstakingPeriod,
        expectedReturn: rs.expectedReturn,
        inflation: rs.inflation
      });
    });
    if (onlyRunOnFirstTime) {
      unsub && unsub();
      return;
    }
    return () => {
      unsub && unsub();
    };
  }
  initBalanceSubscription(addresses, chainInfoMap, chainStateMap, substrateApiMap, evmApiMap, onlyRunOnFirstTime) {
    const filteredChainInfoMap = {};
    Object.values(chainStateMap).forEach(chainState => {
      if (chainState.active) {
        filteredChainInfoMap[chainState.slug] = chainInfoMap[chainState.slug];
      }
    });
    const unsub = (0,_subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_4__.subscribeBalance)(addresses, filteredChainInfoMap, substrateApiMap, evmApiMap, result => {
      this.state.setBalanceItem(result.tokenSlug, result);
    });
    const unsub2 = this.state.subscribeMantaPayBalance();
    if (onlyRunOnFirstTime) {
      unsub && unsub();
      unsub2 && unsub2();
      return;
    }
    return () => {
      unsub && unsub();
      unsub2 && unsub2();
    };
  }
  initCrowdloanSubscription(addresses, substrateApiMap, onlyRunOnFirstTime) {
    const subscriptionPromise = (0,_subwallet_extension_base_koni_api_dotsama_crowdloan__WEBPACK_IMPORTED_MODULE_5__.subscribeCrowdloan)(addresses, substrateApiMap, (networkKey, rs) => {
      this.state.setCrowdloanItem(networkKey, rs);
    }, this.state.getChainInfoMap());
    if (onlyRunOnFirstTime) {
      subscriptionPromise.then(unsub => unsub()).catch(this.logger.warn);
      return;
    }
    return () => {
      subscriptionPromise.then(unsub => unsub()).catch(this.logger.warn);
    };
  }
  subscribeNft(address, substrateApiMap, evmApiMap, smartContractNfts, chainInfoMap) {
    const addresses = this.state.getDecodedAddresses(address);
    if (!addresses.length) {
      return;
    }
    this.initNftSubscription(addresses, substrateApiMap, evmApiMap, smartContractNfts, chainInfoMap);
  }
  initNftSubscription(addresses, substrateApiMap, evmApiMap, smartContractNfts, chainInfoMap) {
    _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__.nftHandler.setChainInfoMap(chainInfoMap);
    _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__.nftHandler.setDotSamaApiMap(substrateApiMap);
    _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__.nftHandler.setWeb3ApiMap(evmApiMap);
    _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__.nftHandler.setAddresses(addresses);
    _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_6__.nftHandler.handleNfts(smartContractNfts, (...args) => this.state.updateNftData(...args), (...args) => this.state.setNftCollection(...args)).catch(this.logger.log);
  }
  async subscribeStakingReward(address) {
    const addresses = this.state.getDecodedAddresses(address);
    if (!addresses.length) {
      return;
    }
    const chainInfoMap = this.state.getChainInfoMap();
    const targetNetworkMap = {};
    Object.entries(chainInfoMap).forEach(([key, network]) => {
      const chainState = this.state.getChainStateByKey(key);
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._isChainEnabled)(chainState) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._isChainSupportSubstrateStaking)(network)) {
        targetNetworkMap[key] = network;
      }
    });
    await (0,_subwallet_extension_base_koni_api_staking__WEBPACK_IMPORTED_MODULE_2__.getNominationStakingRewardData)(addresses, targetNetworkMap, rewardItem => {
      this.state.updateStakingReward(rewardItem);
    });
  }
  async subscribeStakingRewardFastInterval(address) {
    const addresses = this.state.getDecodedAddresses(address);
    if (!addresses.length) {
      return;
    }
    const pooledStakingItems = await this.state.getPooledStakingRecordsByAddress(addresses);
    const pooledAddresses = [];
    pooledStakingItems.forEach(pooledItem => {
      if (!pooledAddresses.includes(pooledItem.address)) {
        pooledAddresses.push(pooledItem.address);
      }
    });
    const chainInfoMap = this.state.getChainInfoMap();
    const targetChainMap = {};
    Object.entries(chainInfoMap).forEach(([key, network]) => {
      const chainState = this.state.getChainStateByKey(key);
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._isChainEnabled)(chainState) && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._isChainSupportSubstrateStaking)(network)) {
        targetChainMap[key] = network;
      }
    });
    const activeNetworks = [];
    Object.keys(targetChainMap).forEach(key => {
      activeNetworks.push(key);
    });
    const updateState = result => {
      this.state.updateStakingReward(result);
    };
    await Promise.all([(0,_subwallet_extension_base_koni_api_staking__WEBPACK_IMPORTED_MODULE_2__.getPoolingStakingRewardData)(pooledAddresses, targetChainMap, this.state.getSubstrateApiMap(), updateState), (0,_subwallet_extension_base_koni_api_staking_paraChain__WEBPACK_IMPORTED_MODULE_8__.getAmplitudeUnclaimedStakingReward)(this.state.getSubstrateApiMap(), addresses, chainInfoMap, activeNetworks, updateState)]);
  }
  async reloadStaking() {
    var _this$state$keyringSe2;
    const currentAddress = (_this$state$keyringSe2 = this.state.keyringService.currentAccount) === null || _this$state$keyringSe2 === void 0 ? void 0 : _this$state$keyringSe2.address;
    this.subscribeStakingOnChain(currentAddress, this.state.getSubstrateApiMap());
    await (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_9__.waitTimeout)(1800);
  }
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "../extension-base/src/services/balance-service/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/services/balance-service/index.ts ***!
  \***************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BalanceService": () => (/* binding */ BalanceService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_BalanceError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/BalanceError */ "../extension-base/src/background/errors/BalanceError.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/dotsama/balance */ "../extension-base/src/koni/api/dotsama/balance.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers */ "../extension-base/src/koni/background/handlers/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_5__, _subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_6__]);
([_subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_5__, _subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_6__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0









class BalanceService {
  constructor(chainService) {
    this.chainService = chainService;

    // Todo: Load data from db to balanceSubject
    // Todo: Start  subscribe balance and data
    // Todo: Listen change and apply to balanceSubject
    // Todo: Active/Chain
    // Todo: Add/remove account
    // Todo: Add new account
    // Todo: Optimize get balance for single account and chain with cache
    // Todo: Move everything of fetching balance to this service
  }

  async subscribeTokenFreeBalance(address, chain, tokenSlug, callback) {
    const chainInfo = this.chainService.getChainInfoByKey(chain);
    const chainState = this.chainService.getChainStateByKey(chain);
    if (!chainInfo || !chainState || !chainState.active) {
      return Promise.reject(new _subwallet_extension_base_background_errors_BalanceError__WEBPACK_IMPORTED_MODULE_1__.BalanceError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.BalanceErrorType.NETWORK_ERROR, (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('{{chain}} is inactive. Please enable network', {
        replace: {
          chain
        }
      })));
    }
    const tSlug = tokenSlug || (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getChainNativeTokenSlug)(chainInfo);
    const tokenInfo = this.chainService.getAssetBySlug(tSlug);
    if (!tokenInfo) {
      return Promise.reject(new _subwallet_extension_base_background_errors_BalanceError__WEBPACK_IMPORTED_MODULE_1__.BalanceError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.BalanceErrorType.TOKEN_ERROR, (0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Transfer is currently not available for this token: {{tSlug}}', {
        replace: {
          slug: tSlug
        }
      })));
    }
    return new Promise((resolve, reject) => {
      let hasError = true;
      const unsub = this.subscribeBalance([address], [chain], rs => {
        if (rs.tokenSlug === tSlug) {
          hasError = false;
          const balance = {
            value: rs.free,
            decimals: tokenInfo.decimals || 0,
            symbol: tokenInfo.symbol
          };
          if (callback) {
            callback(balance);
          } else {
            // Auto unsubscribe if no callback
            unsub();
          }
          resolve([unsub, balance]);
        }
      });
      setTimeout(() => {
        if (hasError) {
          unsub();
          reject(new Error((0,i18next__WEBPACK_IMPORTED_MODULE_0__.t)('Failed to get balance. Please check your internet connection or change your network endpoint')));
        }
      }, 9999);
    });
  }
  async getTokenFreeBalance(address, chain, tokenSlug) {
    const [, balance] = await this.subscribeTokenFreeBalance(address, chain, tokenSlug);
    return balance;
  }
  subscribeBalance(addresses, chains, callback) {
    const [substrateAddresses, evmAddresses] = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__.categoryAddresses)(addresses);
    const chainInfoMap = this.chainService.getChainInfoMap();
    const chainStateMap = this.chainService.getChainStateMap();
    const substrateApiMap = this.chainService.getSubstrateApiMap();
    const evmApiMap = this.chainService.getEvmApiMap();

    // Get data from chain or all chains
    const chainList = chains || Object.keys(chainInfoMap);
    // Filter active chain only
    const useChainInfos = chainList.filter(c => chainStateMap[c] && chainStateMap[c].active).map(c => chainInfoMap[c]);

    // Looping over each chain
    const unsubList = useChainInfos.map(async chainInfo => {
      const chainSlug = chainInfo.slug;
      const useAddresses = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isChainEvmCompatible)(chainInfo) ? evmAddresses : substrateAddresses;
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._isPureEvmChain)(chainInfo)) {
        const nativeTokenInfo = _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_5__.state.getNativeTokenInfo(chainSlug);
        return (0,_subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_6__.subscribeEVMBalance)(chainSlug, useAddresses, evmApiMap, callback, nativeTokenInfo);
      }
      if (!useAddresses || useAddresses.length === 0 || _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__._PURE_EVM_CHAINS.indexOf(chainSlug) > -1) {
        return undefined;
      }
      const networkAPI = await substrateApiMap[chainSlug].isReady;
      return (0,_subwallet_extension_base_koni_api_dotsama_balance__WEBPACK_IMPORTED_MODULE_6__.subscribeSubstrateBalance)(useAddresses, chainInfo, chainSlug, networkAPI, evmApiMap, callback);
    });
    return () => {
      unsubList.forEach(subProm => {
        subProm.then(unsub => {
          unsub && unsub();
        }).catch(console.error);
      });
    };
  }
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "../extension-base/src/services/base/types.ts":
/*!****************************************************!*\
  !*** ../extension-base/src/services/base/types.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ServiceStatus": () => (/* binding */ ServiceStatus)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0

// 'init' | 'started' | 'starting' | 'stopped' | 'stopping'

let ServiceStatus;
(function (ServiceStatus) {
  ServiceStatus["NOT_INITIALIZED"] = "not_initialized";
  ServiceStatus["INITIALIZING"] = "initializing";
  ServiceStatus["INITIALIZED"] = "initialized";
  ServiceStatus["STARTED"] = "started";
  ServiceStatus["STARTING"] = "starting";
  ServiceStatus["STOPPED"] = "stopped";
  ServiceStatus["STOPPING"] = "stopping";
})(ServiceStatus || (ServiceStatus = {}));

/***/ }),

/***/ "../extension-base/src/services/chain-service/custom-tokens/AssetLogoMap.ts":
/*!**********************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/custom-tokens/AssetLogoMap.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssetLogoMap": () => (/* binding */ AssetLogoMap)
/* harmony export */ });
/* eslint-disable header/header */
const AssetLogoMap = {
  default: 'https://gfxvsstorage.blob.core.windows.net/gfxvscontainer/aigent-logo.png',
  // 'kusama-native-ksm': 'https://chain-list-assets.subwallet.app/assets/chain-assets/kusama-native-ksm.png',
  aigent: 'https://gfxvsstorage.blob.core.windows.net/gfxvscontainer/aigent-logo.png',
  'ethereum-native-eth': 'https://dev.sw-chain-list-assets.pages.dev/assets/chain-assets/ethereum-native-eth.png',
  'sora_substrate-native-xor': 'https://dev.sw-chain-list-assets.pages.dev/assets/chain-assets/sora_substrate-native-xor.png'
};

/***/ }),

/***/ "../extension-base/src/services/chain-service/custom-tokens/AssetRef.ts":
/*!******************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/custom-tokens/AssetRef.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AssetRefMap": () => (/* binding */ AssetRefMap)
/* harmony export */ });
/* eslint-disable header/header */
const AssetRefMap = {
  'aigent-NATIVE-AIGENT': {
    srcAsset: 'aigent-NATIVE-AIGENT',
    destAsset: 'aigent-LOCAL-xcAIGENT',
    srcChain: 'aigent',
    destChain: 'aigent',
    path: 'AIGENT'
  }
  // 'kusama-NATIVE-KSM___statemine-NATIVE-KSM': {
  //   srcAsset: 'kusama-NATIVE-KSM',
  //   destAsset: 'statemine-NATIVE-KSM',
  //   srcChain: 'kusama',
  //   destChain: 'statemine',
  //   path: 'XCM'
  // }
};

/***/ }),

/***/ "../extension-base/src/services/chain-service/custom-tokens/ChainAsset.ts":
/*!********************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/custom-tokens/ChainAsset.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChainAssetMap": () => (/* binding */ ChainAssetMap)
/* harmony export */ });
/* eslint-disable header/header */
const ChainAssetMap = {
  // 'kusama-NATIVE-KSM': {
  //   originChain: 'kusama',
  //   slug: 'kusama-NATIVE-KSM',
  //   name: 'Kusama',
  //   symbol: 'KSM',
  //   decimals: 12,
  //   priceId: 'kusama',
  //   minAmount: '333333333',
  //   assetType: 'NATIVE',
  //   metadata: {
  //     multilocation: {
  //       parents: 0,
  //       interior: 'Here'
  //     }
  //   },
  //   multiChainAsset: 'KSM-Kusama',
  //   hasValue: true,
  //   icon: 'https://chain-list-assets.subwallet.app/assets/chain-assets/kusama-native-ksm.png'
  // },
  'aigent-NATIVE-AIGENT': {
    originChain: 'aigent',
    slug: 'aigent-NATIVE-AIGENT',
    name: 'AIGENT',
    symbol: 'AIGENT',
    decimals: 18,
    priceId: 'aigent',
    minAmount: '500',
    assetType: 'NATIVE',
    metadata: null,
    multiChainAsset: null,
    hasValue: true,
    icon: 'https://gfxvsstorage.blob.core.windows.net/gfxvscontainer/aigent-logo.png'
  }
};

/***/ }),

/***/ "../extension-base/src/services/chain-service/custom-tokens/ChainInfo.ts":
/*!*******************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/custom-tokens/ChainInfo.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChainInfoMap": () => (/* binding */ ChainInfoMap)
/* harmony export */ });
/* eslint-disable header/header */
const ChainInfoMap = {
  // kusama: {
  //   slug: 'kusama',
  //   name: 'Kusama',
  //   isTestnet: false,
  //   chainStatus: 'ACTIVE',
  //   icon: 'https://chain-list-assets.subwallet.app/assets/chains/kusama.png',
  //   providers: {
  //     RadiumBlock: 'wss://kusama.public.curie.radiumblock.co/ws',
  //     LuckyFriday: 'wss://rpc-kusama.luckyfriday.io',
  //     Stakeworld: 'wss://ksm-rpc.stakeworld.io',
  //     'IBP-GeoDNS1': 'wss://rpc.ibp.network/kusama',
  //     'Light Client': 'light://substrate-connect/kusama'
  //   },
  //   evmInfo: null,
  //   substrateInfo: {
  //     relaySlug: null,
  //     paraId: null,
  //     genesisHash: '0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe',
  //     addressPrefix: 2,
  //     chainType: 'RELAYCHAIN',
  //     crowdloanUrl: null,
  //     blockExplorer: 'https://kusama.subscan.io/',
  //     existentialDeposit: '333333333',
  //     symbol: 'KSM',
  //     decimals: 12,
  //     hasNativeNft: true,
  //     supportStaking: true,
  //     supportSmartContract: null,
  //     crowdloanParaId: null,
  //     crowdloanFunds: []
  //   },
  //   extraInfo: {
  //     subscanSlug: 'kusama',
  //     chainBalanceSlug: 'kusama'
  //   },
  //   bitcoinInfo: null,
  //   tonInfo: null
  // },
  aigent: {
    slug: 'aigent',
    name: 'AIGENT',
    isTestnet: false,
    chainStatus: 'ACTIVE',
    icon: 'https://gfxvsstorage.blob.core.windows.net/gfxvscontainer/aigent-logo.png',
    providers: {
      aigent: 'wss://backend.ai-gents.io'
    },
    evmInfo: null,
    substrateInfo: {
      relaySlug: null,
      paraId: 0,
      genesisHash: '0x917813c36c7b1346d6895458dda04f24c0ff771ec7cd676fc5fe93fbc223e098',
      addressPrefix: 42,
      chainType: 'RELAYCHAIN',
      crowdloanUrl: null,
      blockExplorer: 'https://testnet.ai-gents.io/#/explorer',
      existentialDeposit: '500',
      symbol: 'AIGENT',
      decimals: 18,
      hasNativeNft: false,
      supportStaking: true,
      supportSmartContract: null,
      crowdloanParaId: null,
      crowdloanFunds: []
    },
    extraInfo: {
      subscanSlug: 'aigent'
    },
    bitcoinInfo: null,
    tonInfo: null
  }
};

/***/ }),

/***/ "../extension-base/src/services/chain-service/custom-tokens/ChainLogoMap.ts":
/*!**********************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/custom-tokens/ChainLogoMap.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChainLogoMap": () => (/* binding */ ChainLogoMap)
/* harmony export */ });
/* eslint-disable header/header */
const ChainLogoMap = {
  default: 'https://gfxvsstorage.blob.core.windows.net/gfxvscontainer/aigent-logo.png',
  // kusama: 'https://chain-list-assets.subwallet.app/assets/chains/kusama.png',
  aigent: 'https://gfxvsstorage.blob.core.windows.net/gfxvscontainer/aigent-logo.png'
};

/***/ }),

/***/ "../extension-base/src/services/chain-service/custom-tokens/MultiChainAsset.ts":
/*!*************************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/custom-tokens/MultiChainAsset.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MultiChainAssetMap": () => (/* binding */ MultiChainAssetMap)
/* harmony export */ });
/* eslint-disable header/header */
const MultiChainAssetMap = {
  aigent: {
    slug: 'aigent',
    originChainAsset: 'aigent',
    name: 'AIGENT',
    symbol: 'AIGENT',
    priceId: 'aigent',
    hasValue: true,
    icon: 'https://gfxvsstorage.blob.core.windows.net/gfxvscontainer/aigent-logo.png'
  }
  // 'KSM-Kusama': {
  //   slug: 'KSM-Kusama',
  //   originChainAsset: 'kusama-NATIVE-KSM',
  //   name: 'Kusama',
  //   symbol: 'KSM',
  //   priceId: 'kusama',
  //   hasValue: true,
  //   icon: 'https://chain-list-assets.subwallet.app/assets/multi-chain-assets/ksm-kusama.png'
  // }
};

/***/ }),

/***/ "../extension-base/src/services/chain-service/handler/AbstractChainHandler.ts":
/*!************************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/handler/AbstractChainHandler.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbstractChainHandler": () => (/* binding */ AbstractChainHandler),
/* harmony export */   "FIRST_RECONNECT_TIME": () => (/* binding */ FIRST_RECONNECT_TIME),
/* harmony export */   "SHORT_RETRY_TIME": () => (/* binding */ SHORT_RETRY_TIME)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/types */ "../extension-base/src/services/chain-service/types.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



const MAX_RECOVER_RETRY = 6;
const FIRST_RECONNECT_TIME = 3000;
const SHORT_RETRY_TIME = 20000;
// export const LONG_RETRY_TIME = 60000;

class AbstractChainHandler {
  apiStateMapSubject = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject({});
  // Recover retry times

  isSleeping = false;
  constructor(parent) {
    this.parent = parent;
    this.recoverMap = {};
  }
  handleConnection(chain, newStatus, forceRecover = false) {
    const currentMap = this.apiStateMapSubject.getValue();
    const oldStatus = currentMap[chain];

    // Update api state
    if (oldStatus !== newStatus) {
      this.apiStateMapSubject.next({
        ...currentMap,
        [chain]: newStatus
      });
    }

    // Reset retry when connected is successful
    if (newStatus === _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_1__._ChainConnectionStatus.CONNECTED) {
      this.cancelRecover(chain);
    }

    // Handle connection change
    if ((!this.isRecovering(chain) || forceRecover) && newStatus === _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_1__._ChainConnectionStatus.DISCONNECTED) {
      this.handleRecover(chain);
    }
  }

  // Recover api if it is disconnected
  handleRecover(chain) {
    var _this$parent, _this$parent$getChain;
    // Not recover inactive chain
    if (!((_this$parent = this.parent) !== null && _this$parent !== void 0 && (_this$parent$getChain = _this$parent.getChainStateByKey(chain)) !== null && _this$parent$getChain !== void 0 && _this$parent$getChain.active)) {
      this.cancelRecover(chain);
      return;
    }

    // Get retry record
    const retryRecord = this.recoverMap[chain] || {
      retryTimes: 0
    };
    clearTimeout(retryRecord.timeout);
    const retryTimes = retryRecord.retryTimes;
    if (retryTimes >= MAX_RECOVER_RETRY) {
      this.handleConnection(chain, _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_1__._ChainConnectionStatus.UNSTABLE);
      this.cancelRecover(chain); // Need manual recover
    }

    // Slow down recover frequency if increasing recover times
    const retryTimeout = retryTimes === 0 ? FIRST_RECONNECT_TIME : SHORT_RETRY_TIME;

    // Recover api after retry timeout
    const timeout = setTimeout(() => {
      var _this$getApiByChain;
      if ((_this$getApiByChain = this.getApiByChain(chain)) !== null && _this$getApiByChain !== void 0 && _this$getApiByChain.isApiConnected || this.isSleeping) {
        // Cancel recover if api is connected
        this.cancelRecover(chain);
      } else {
        this.recoverApi(chain);
        this.handleRecover(chain); // This will be cancel if api is connected
      }
    }, retryTimeout);
    this.recoverMap[chain] = {
      ...retryRecord,
      retryTimes: retryTimes + 1,
      timeout
    };
  }
  isRecovering(chain) {
    return !!this.recoverMap[chain];
  }
  cancelRecover(chain) {
    const retryRecord = this.recoverMap[chain];
    if (retryRecord) {
      clearTimeout(retryRecord.timeout);
      delete this.recoverMap[chain];
    }
  }
  cancelAllRecover() {
    Object.keys(this.recoverMap).forEach(chain => {
      this.cancelRecover(chain);
    });
  }
}

/***/ }),

/***/ "../extension-base/src/services/chain-service/handler/EvmApi.ts":
/*!**********************************************************************!*\
  !*** ../extension-base/src/services/chain-service/handler/EvmApi.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EvmApi": () => (/* binding */ EvmApi)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/types */ "../extension-base/src/services/chain-service/types.ts");
/* harmony import */ var _subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/utils/promise */ "../extension-base/src/utils/promise.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ "../../node_modules/web3/dist/web3.min.js");
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(web3__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0







const acalaEvmNetworks = _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_1__.EVM_PASS_CONNECT_STATUS.acala;
class EvmApi {
  apiRetry = 0;
  isApiConnectedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__.BehaviorSubject(false);
  connectionStatusSubject = new rxjs__WEBPACK_IMPORTED_MODULE_2__.BehaviorSubject(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__._ChainConnectionStatus.DISCONNECTED);
  isApiReady = false;
  isApiReadyOnce = false;
  get isApiConnected() {
    return this.isApiConnectedSubject.getValue();
  }
  get connectionStatus() {
    return this.connectionStatusSubject.getValue();
  }
  updateConnectionStatus(status) {
    const isConnected = status === _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__._ChainConnectionStatus.CONNECTED;
    if (isConnected !== this.isApiConnectedSubject.value) {
      this.isApiConnectedSubject.next(isConnected);
    }
    if (status !== this.connectionStatusSubject.value) {
      this.connectionStatusSubject.next(status);
    }
  }
  get isReady() {
    return this.isReadyHandler.promise;
  }
  async updateApiUrl(apiUrl) {
    this.apiUrl = apiUrl;
    await this.disconnect();
    this.api.setProvider(this.createProvider(apiUrl));
    this.connect();
  }
  async recoverConnect() {
    const wsProvider = this.provider;
    if (wsProvider.reconnect) {
      wsProvider.reconnect();
    }
    await this.isReadyHandler.promise;
  }
  createProvider(apiUrl) {
    if (apiUrl.startsWith('http')) {
      return new (web3__WEBPACK_IMPORTED_MODULE_0___default().providers.HttpProvider)(apiUrl);
    } else {
      return new (web3__WEBPACK_IMPORTED_MODULE_0___default().providers.WebsocketProvider)(apiUrl);
    }
  }
  constructor(chainSlug, apiUrl, {
    providerName
  } = {}) {
    this.chainSlug = chainSlug;
    this.apiUrl = apiUrl;
    this.providerName = providerName || 'unknown';
    this.provider = this.createProvider(apiUrl);
    this.api = new (web3__WEBPACK_IMPORTED_MODULE_0___default())(this.provider);
    this.isReadyHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__.createPromiseHandler)();

    // Create it only to avoid undefined error, it will be overwrite in connect()
    this.intervalCheckApi = this.createIntervalCheckApi();
    this.connect();
  }
  createIntervalCheckApi() {
    this.clearIntervalCheckApi();
    return setInterval(() => {
      if (!acalaEvmNetworks.includes(this.chainSlug)) {
        this.api.eth.net.isListening().then(() => {
          this.onConnect();
        }).catch(() => {
          this.onDisconnect();
        });
      } else {
        this.onConnect();
      }
    }, 10000);
  }
  clearIntervalCheckApi() {
    clearInterval(this.intervalCheckApi);
  }
  connect() {
    // For websocket provider, connect it
    const wsProvider = this.provider;
    wsProvider.connect && wsProvider.connect();
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__._ChainConnectionStatus.CONNECTING);

    // Check if api is ready
    if (!acalaEvmNetworks.includes(this.chainSlug)) {
      this.api.eth.net.isListening().then(() => {
        this.isApiReadyOnce = true;
        this.onConnect();
      }).catch(error => {
        this.isApiReadyOnce = false;
        this.isApiReady = false;
        this.isReadyHandler.reject(error);
        this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__._ChainConnectionStatus.DISCONNECTED);
        console.warn(`Can not connect to ${this.chainSlug} (EVM) at ${this.apiUrl}`);
      });
    } else {
      this.isApiReadyOnce = true;
      this.onConnect();
    }

    // Interval to check connecting status
    this.intervalCheckApi = this.createIntervalCheckApi();
  }
  async disconnect() {
    this.clearIntervalCheckApi();
    this.onDisconnect();

    // For websocket provider, disconnect it
    const wsProvider = this.provider;
    wsProvider.disconnect && wsProvider.disconnect();
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__._ChainConnectionStatus.DISCONNECTED);
    return Promise.resolve();
  }
  destroy() {
    // Todo: implement this in the future
    return this.disconnect();
  }
  onConnect() {
    if (!this.isApiConnected) {
      console.log(`Connected to ${this.chainSlug} at ${this.apiUrl}`);
      this.isApiReady = true;
      if (this.isApiReadyOnce) {
        this.isReadyHandler.resolve(this);
      }
    }
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__._ChainConnectionStatus.CONNECTED);
  }
  onDisconnect() {
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_3__._ChainConnectionStatus.DISCONNECTED);
    if (this.isApiConnected) {
      console.warn(`Disconnected from ${this.chainSlug} of ${this.apiUrl} (EVM)`);
      this.isApiReady = false;
      this.isReadyHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__.createPromiseHandler)();
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/chain-service/handler/EvmChainHandler.ts":
/*!*******************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/handler/EvmChainHandler.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EvmChainHandler": () => (/* binding */ EvmChainHandler)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_AbstractChainHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/AbstractChainHandler */ "../extension-base/src/services/chain-service/handler/AbstractChainHandler.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_EvmApi__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/EvmApi */ "../extension-base/src/services/chain-service/handler/EvmApi.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/helper */ "../extension-base/src/services/chain-service/helper/index.ts");
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ "../../node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var _polkadot_util_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polkadot/util/logger */ "../../node_modules/@polkadot/util/logger.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0







class EvmChainHandler extends _subwallet_extension_base_services_chain_service_handler_AbstractChainHandler__WEBPACK_IMPORTED_MODULE_1__.AbstractChainHandler {
  evmApiMap = {};
  constructor(parent) {
    super(parent);
    this.logger = (0,_polkadot_util_logger__WEBPACK_IMPORTED_MODULE_2__.logger)('evm-chain-handler');
  }
  getEvmApiMap() {
    return this.evmApiMap;
  }
  getEvmApiByChain(chainSlug) {
    return this.evmApiMap[chainSlug];
  }
  getApiByChain(chain) {
    return this.getEvmApiByChain(chain);
  }
  setEvmApi(chainSlug, evmApi) {
    this.evmApiMap[chainSlug] = evmApi;
  }
  async initApi(chainSlug, apiUrl, {
    onUpdateStatus,
    providerName
  } = {}) {
    const existed = this.getEvmApiByChain(chainSlug);
    if (existed) {
      existed.connect();
      if (apiUrl !== existed.apiUrl) {
        existed.updateApiUrl(apiUrl).catch(console.error);
      }
      return existed;
    }
    const apiObject = new _subwallet_extension_base_services_chain_service_handler_EvmApi__WEBPACK_IMPORTED_MODULE_3__.EvmApi(chainSlug, apiUrl, {
      providerName
    });
    apiObject.connectionStatusSubject.subscribe(this.handleConnection.bind(this, chainSlug));
    apiObject.connectionStatusSubject.subscribe(onUpdateStatus);
    return Promise.resolve(apiObject);
  }
  async recoverApi(chainSlug) {
    const existed = this.getEvmApiByChain(chainSlug);
    if (existed && !existed.isApiReadyOnce) {
      console.log(`Reconnect ${existed.providerName || existed.chainSlug} at ${existed.apiUrl}`);
      return existed.recoverConnect();
    }
  }
  destroyEvmApi(chain) {
    const evmApi = this.getEvmApiByChain(chain);
    evmApi === null || evmApi === void 0 ? void 0 : evmApi.destroy().catch(console.error);
  }
  async sleep() {
    this.isSleeping = true;
    this.cancelAllRecover();
    await Promise.all(Object.values(this.getEvmApiMap()).map(evmApi => {
      return evmApi.disconnect().catch(console.error);
    }));
    return Promise.resolve();
  }
  wakeUp() {
    var _this$parent;
    this.isSleeping = false;
    const activeChains = ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.getActiveChains()) || [];
    for (const chain of activeChains) {
      const evmApi = this.getEvmApiByChain(chain);

      // Not found evmApi mean it active with substrate interface
      evmApi === null || evmApi === void 0 ? void 0 : evmApi.connect();
    }
    return Promise.resolve();
  }
  async getChainSpec(evmApi) {
    const chainId = await evmApi.api.eth.getChainId();
    let chainInfoList;
    const result = {
      evmChainId: chainId,
      name: '',
      symbol: '',
      decimals: 18,
      // by default, might change
      existentialDeposit: '0'
    };
    await fetch('https://chainid.network/chains.json').then(resp => resp.json()).then(data => {
      chainInfoList = data;
    });
    if (chainInfoList) {
      chainInfoList.forEach(_chainInfo => {
        const _chainId = _chainInfo.chainId;
        if (chainId === _chainId) {
          result.name = _chainInfo.name;
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          result.symbol = _chainInfo.nativeCurrency.symbol;
        }
      });
    }
    return result;
  }
  async getSmartContractTokenInfo(contractAddress, tokenType, originChain) {
    let tokenContract;
    let name = '';
    let decimals = -1;
    let symbol = '';
    let contractError = false;
    const evmApi = this.getEvmApiByChain(originChain);
    try {
      if (tokenType === _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_4__._AssetType.ERC721) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access
        tokenContract = new evmApi.api.eth.Contract(_subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_5__._ERC721_ABI, contractAddress);
        const [_name, _symbol] = await Promise.all([
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        tokenContract.methods.name().call(),
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        tokenContract.methods.symbol().call()]);
        name = _name;
        symbol = _symbol;
      } else {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access
        tokenContract = new evmApi.api.eth.Contract(_subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_5__._ERC20_ABI, contractAddress);
        const [_decimals, _symbol] = await Promise.all([
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        tokenContract.methods.decimals().call(),
        // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access
        tokenContract.methods.symbol().call()]);
        name = _symbol;
        decimals = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](_decimals).toNumber();
        symbol = _symbol;
      }
      if (name === '' || symbol === '') {
        contractError = true;
      }
      return {
        name,
        decimals,
        symbol,
        contractError
      };
    } catch (e) {
      this.logger.error(e);
      return {
        name,
        decimals,
        symbol,
        contractError: true
      };
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/chain-service/handler/SubstrateApi.ts":
/*!****************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/handler/SubstrateApi.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubstrateApi": () => (/* binding */ SubstrateApi)
/* harmony export */ });
/* harmony import */ var _acala_network_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @acala-network/api */ "../../node_modules/@acala-network/api/index.js");
/* harmony import */ var _oak_foundation_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @oak-foundation/types */ "../../node_modules/@oak-foundation/types/index.js");
/* harmony import */ var _oak_foundation_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_oak_foundation_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_light_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/light-client */ "../extension-base/src/services/chain-service/handler/light-client/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_SubstrateChainHandler__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/SubstrateChainHandler */ "../extension-base/src/services/chain-service/handler/SubstrateChainHandler.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/types */ "../extension-base/src/services/chain-service/types.ts");
/* harmony import */ var _subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/utils/promise */ "../extension-base/src/utils/promise.ts");
/* harmony import */ var avail_js_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! avail-js-sdk */ "../../node_modules/avail-js-sdk/index.js");
/* harmony import */ var avail_js_sdk__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(avail_js_sdk__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _polkadot_api__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/api */ "../../node_modules/@polkadot/rpc-provider/ws/index.js");
/* harmony import */ var _polkadot_api__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @polkadot/api */ "../../node_modules/@polkadot/api/promise/Api.js");
/* harmony import */ var _polkadot_apps_config_api__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/apps-config/api */ "../../node_modules/@polkadot/apps-config/api/index.js");
/* harmony import */ var _polkadot_types_create__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @polkadot/types/create */ "../../node_modules/@polkadot/types/create/registry.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/format/formatBalance.js");
/* harmony import */ var _polkadot_util_crypto_address_defaults__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @polkadot/util-crypto/address/defaults */ "../../node_modules/@polkadot/util-crypto/address/defaults.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0
















class SubstrateApi {
  useLightClient = false;
  isApiReady = false;
  isApiReadyOnce = false;
  isApiConnectedSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(false);
  connectionStatusSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.DISCONNECTED);
  get isApiConnected() {
    return this.isApiConnectedSubject.getValue();
  }
  substrateRetry = 0;
  get connectionStatus() {
    return this.connectionStatusSubject.getValue();
  }
  updateConnectionStatus(status) {
    const isConnected = status === _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.CONNECTED;
    if (isConnected !== this.isApiConnectedSubject.value) {
      this.isApiConnectedSubject.next(isConnected);
    }
    if (status !== this.connectionStatusSubject.value) {
      this.connectionStatusSubject.next(status);
    }
  }
  specName = '';
  specVersion = '';
  systemChain = '';
  systemName = '';
  systemVersion = '';
  createProvider(apiUrl) {
    if (apiUrl.startsWith('light://')) {
      this.useLightClient = true;
      return (0,_subwallet_extension_base_services_chain_service_handler_light_client__WEBPACK_IMPORTED_MODULE_5__.getSubstrateConnectProvider)(apiUrl.replace('light://substrate-connect/', ''));
    } else {
      this.useLightClient = true;
      return new _polkadot_api__WEBPACK_IMPORTED_MODULE_6__.WsProvider(apiUrl, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__.API_AUTO_CONNECT_MS, {}, _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__.API_CONNECT_TIMEOUT);
    }
  }
  createApi(provider, externalApiPromise) {
    const apiOption = {
      provider,
      typesBundle: _polkadot_apps_config_api__WEBPACK_IMPORTED_MODULE_8__.typesBundle,
      registry: this.registry
    };
    if (this.metadata) {
      const metadata = this.metadata;
      apiOption.metadata = {
        [`${metadata.genesisHash}-${metadata.specVersion}`]: metadata.hexValue
      };
    }
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.CONNECTING);
    let api;
    if (externalApiPromise) {
      api = externalApiPromise;
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__._API_OPTIONS_CHAIN_GROUP.acala.includes(this.chainSlug)) {
      api = new _polkadot_api__WEBPACK_IMPORTED_MODULE_9__.ApiPromise((0,_acala_network_api__WEBPACK_IMPORTED_MODULE_0__.options)({
        provider
      }));
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__._API_OPTIONS_CHAIN_GROUP.turing.includes(this.chainSlug)) {
      api = new _polkadot_api__WEBPACK_IMPORTED_MODULE_9__.ApiPromise({
        provider,
        rpc: _oak_foundation_types__WEBPACK_IMPORTED_MODULE_1__.rpc,
        types: _oak_foundation_types__WEBPACK_IMPORTED_MODULE_1__.types
      });
    } else if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_7__._API_OPTIONS_CHAIN_GROUP.avail.includes(this.chainSlug)) {
      api = new _polkadot_api__WEBPACK_IMPORTED_MODULE_9__.ApiPromise({
        provider,
        rpc: avail_js_sdk__WEBPACK_IMPORTED_MODULE_2__.spec.rpc,
        types: avail_js_sdk__WEBPACK_IMPORTED_MODULE_2__.spec.types,
        signedExtensions: avail_js_sdk__WEBPACK_IMPORTED_MODULE_2__.spec.signedExtensions
      });
    } else {
      api = new _polkadot_api__WEBPACK_IMPORTED_MODULE_9__.ApiPromise(apiOption);
    }
    api.on('ready', this.onReady.bind(this));
    api.on('connected', this.onConnect.bind(this));
    api.on('disconnected', this.onDisconnect.bind(this));
    api.on('error', this.onError.bind(this));
    return api;
  }
  constructor(chainSlug, apiUrl, {
    externalApiPromise,
    metadata,
    providerName
  } = {}) {
    this.chainSlug = chainSlug;
    this.apiUrl = apiUrl;
    this.providerName = providerName;
    this.registry = new _polkadot_types_create__WEBPACK_IMPORTED_MODULE_10__.TypeRegistry();
    this.metadata = metadata;
    this.provider = this.createProvider(apiUrl);
    this.api = this.createApi(this.provider, externalApiPromise);
    this.handleApiReady = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_11__.createPromiseHandler)();
  }
  get isReady() {
    return this.handleApiReady.promise;
  }
  async updateApiUrl(apiUrl) {
    if (this.apiUrl === apiUrl) {
      return;
    }

    // Disconnect with old provider
    await this.disconnect();
    this.isApiReadyOnce = false;
    this.api.off('ready', this.onReady.bind(this));
    this.api.off('connected', this.onConnect.bind(this));
    this.api.off('disconnected', this.onDisconnect.bind(this));
    this.api.off('error', this.onError.bind(this));

    // Create new provider and api
    this.apiUrl = apiUrl;
    this.provider = this.createProvider(apiUrl);
    this.api = this.createApi(this.provider);
  }
  connect() {
    if (this.api.isConnected) {
      this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.CONNECTED);
    } else {
      this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.CONNECTING);
      this.api.connect().then(() => {
        this.api.isReady.then(() => {
          this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.CONNECTED);
        }).catch(console.error);
      }).catch(console.error);
    }
  }
  async disconnect() {
    try {
      await this.api.disconnect();
    } catch (e) {
      console.error(e);
    }
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.DISCONNECTED);
  }
  async recoverConnect() {
    await this.disconnect();
    this.connect();
    await this.handleApiReady.promise;
  }
  destroy() {
    // Todo: implement this in the future
    return this.disconnect();
  }
  onReady() {
    this.fillApiInfo().then(() => {
      this.handleApiReady.resolve(this);
      this.isApiReady = true;
      this.isApiReadyOnce = true;
    }).catch(error => {
      this.apiError = error === null || error === void 0 ? void 0 : error.message;
      this.handleApiReady.reject(error);
    });
  }
  onConnect() {
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.CONNECTED);
    this.substrateRetry = 0;
    console.log(`Connected to ${this.chainSlug || ''} at ${this.apiUrl}`);
    if (this.isApiReadyOnce) {
      this.handleApiReady.resolve(this);
    }
  }
  onDisconnect() {
    this.isApiReady = false;
    console.log(`Disconnected from ${this.chainSlug} at ${this.apiUrl}`);
    this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.DISCONNECTED);
    this.handleApiReady = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_11__.createPromiseHandler)();
    this.substrateRetry += 1;
    if (this.substrateRetry > 9) {
      this.disconnect().then(() => {
        this.updateConnectionStatus(_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_4__._ChainConnectionStatus.UNSTABLE);
      }).catch(console.error);
    }
  }
  onError(e) {
    console.warn(`${this.chainSlug} connection got error`, e);
  }
  async fillApiInfo() {
    var _api$rpc$system, _api$rpc$system2, _api$rpc$system3;
    const {
      api,
      registry
    } = this;
    const DEFAULT_DECIMALS = registry.createType('u32', 12);
    const DEFAULT_SS58 = registry.createType('u32', _polkadot_util_crypto_address_defaults__WEBPACK_IMPORTED_MODULE_12__.defaults.prefix);
    this.specName = this.api.runtimeVersion.specName.toString();
    this.specVersion = this.api.runtimeVersion.specVersion.toString();
    const [systemChain, systemName, systemVersion] = await Promise.all([(_api$rpc$system = api.rpc.system) === null || _api$rpc$system === void 0 ? void 0 : _api$rpc$system.chain(), (_api$rpc$system2 = api.rpc.system) === null || _api$rpc$system2 === void 0 ? void 0 : _api$rpc$system2.name(), (_api$rpc$system3 = api.rpc.system) === null || _api$rpc$system3 === void 0 ? void 0 : _api$rpc$system3.version()]);
    this.systemChain = systemChain.toString();
    this.systemName = systemName.toString();
    this.systemVersion = systemVersion.toString();
    const properties = registry.createType('ChainProperties', {
      ss58Format: api.registry.chainSS58,
      tokenDecimals: api.registry.chainDecimals,
      tokenSymbol: api.registry.chainTokens
    });
    const ss58Format = properties.ss58Format.unwrapOr(DEFAULT_SS58).toNumber();
    const tokenSymbol = properties.tokenSymbol.unwrapOr([_polkadot_util__WEBPACK_IMPORTED_MODULE_13__.formatBalance.getDefaults().unit, ..._subwallet_extension_base_services_chain_service_handler_SubstrateChainHandler__WEBPACK_IMPORTED_MODULE_14__.DEFAULT_AUX]);
    const tokenDecimals = properties.tokenDecimals.unwrapOr([DEFAULT_DECIMALS]);
    registry.setChainProperties(registry.createType('ChainProperties', {
      ss58Format,
      tokenDecimals,
      tokenSymbol
    }));

    // first set up the UI helpers
    this.defaultFormatBalance = {
      decimals: tokenDecimals.map(b => {
        return b.toNumber();
      }),
      unit: tokenSymbol[0].toString()
    };
    const defaultSection = Object.keys(api.tx)[0];
    const defaultMethod = Object.keys(api.tx[defaultSection])[0];
    this.apiDefaultTx = api.tx[defaultSection][defaultMethod];
    this.apiDefaultTxSudo = api.tx.system && api.tx.system.setCode || this.apiDefaultTx;
  }
}

/***/ }),

/***/ "../extension-base/src/services/chain-service/handler/SubstrateChainHandler.ts":
/*!*************************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/handler/SubstrateChainHandler.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_AUX": () => (/* binding */ DEFAULT_AUX),
/* harmony export */   "SubstrateChainHandler": () => (/* binding */ SubstrateChainHandler)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/koni/api/tokens/wasm/utils */ "../extension-base/src/koni/api/tokens/wasm/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_AbstractChainHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/AbstractChainHandler */ "../extension-base/src/services/chain-service/handler/AbstractChainHandler.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_SubstrateApi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/SubstrateApi */ "../extension-base/src/services/chain-service/handler/SubstrateApi.ts");
/* harmony import */ var _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/api-contract */ "../../node_modules/@polkadot/api-contract/promise/index.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_polkadot_util__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _polkadot_util_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util/logger */ "../../node_modules/@polkadot/util/logger.js");
/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helper */ "../extension-base/src/services/chain-service/helper/index.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0









const DEFAULT_AUX = ['Aux1', 'Aux2', 'Aux3', 'Aux4', 'Aux5', 'Aux6', 'Aux7', 'Aux8', 'Aux9'];
class SubstrateChainHandler extends _subwallet_extension_base_services_chain_service_handler_AbstractChainHandler__WEBPACK_IMPORTED_MODULE_0__.AbstractChainHandler {
  substrateApiMap = {};
  constructor(parent) {
    super(parent);
    this.logger = (0,_polkadot_util_logger__WEBPACK_IMPORTED_MODULE_1__.logger)('substrate-chain-handler');
  }
  getSubstrateApiMap() {
    return this.substrateApiMap;
  }
  getSubstrateApiByChain(chainSlug) {
    return this.substrateApiMap[chainSlug];
  }
  getApiByChain(chain) {
    return this.getSubstrateApiByChain(chain);
  }
  async wakeUp() {
    var _this$parent;
    this.isSleeping = false;
    const activeChains = ((_this$parent = this.parent) === null || _this$parent === void 0 ? void 0 : _this$parent.getActiveChains()) || [];
    for (const chain of activeChains) {
      const api = this.getSubstrateApiByChain(chain);

      // Not found substrateInterface mean it active with evm interface
      if (api) {
        api.connect();
        if (!api.useLightClient) {
          // Manual fire handle connect to avoid some chain can not reconnect
          setTimeout(() => {
            this.handleConnection(chain, api.connectionStatus);
          }, 10000);
        }
      }
    }
    return Promise.resolve();
  }
  async sleep() {
    this.isSleeping = true;
    this.cancelAllRecover();
    await Promise.all(Object.values(this.getSubstrateApiMap()).map(substrateApi => {
      return substrateApi.disconnect().catch(console.error);
    }));
  }
  async recoverApi(chainSlug) {
    const existed = this.getSubstrateApiByChain(chainSlug);
    if (existed && !existed.isApiReadyOnce) {
      console.log(`Reconnect ${existed.providerName || existed.chainSlug} at ${existed.apiUrl}`);
      return existed.recoverConnect();
    }
  }
  async getChainSpec(substrateApi) {
    var _substrateApi$api$gen, _substrateApi$api, _substrateApi$api$con, _substrateApi$api$con2, _substrateApi$api$con3;
    const result = {
      addressPrefix: -1,
      decimals: 0,
      existentialDeposit: '',
      genesisHash: (_substrateApi$api$gen = substrateApi.api.genesisHash) === null || _substrateApi$api$gen === void 0 ? void 0 : _substrateApi$api$gen.toHex(),
      name: '',
      symbol: '',
      paraId: null
    };
    const {
      chainDecimals,
      chainTokens
    } = substrateApi.api.registry;
    if (substrateApi.api.query.parachainInfo) {
      result.paraId = (await substrateApi.api.query.parachainInfo.parachainId()).toPrimitive();
    }

    // get first token by default, might change
    result.name = (await substrateApi.api.rpc.system.chain()).toPrimitive();
    result.symbol = chainTokens[0];
    result.decimals = chainDecimals[0];
    result.addressPrefix = (_substrateApi$api = substrateApi.api) === null || _substrateApi$api === void 0 ? void 0 : (_substrateApi$api$con = _substrateApi$api.consts) === null || _substrateApi$api$con === void 0 ? void 0 : (_substrateApi$api$con2 = _substrateApi$api$con.system) === null || _substrateApi$api$con2 === void 0 ? void 0 : (_substrateApi$api$con3 = _substrateApi$api$con2.ss58Prefix) === null || _substrateApi$api$con3 === void 0 ? void 0 : _substrateApi$api$con3.toPrimitive();
    result.existentialDeposit = substrateApi.api.consts.balances.existentialDeposit.toString();
    return result;
  }
  async getSmartContractTokenInfo(contractAddress, tokenType, originChain, contractCaller) {
    let tokenContract;
    let name = '';
    let decimals = -1;
    let symbol = '';
    let contractError = false;
    const substrateApi = this.getSubstrateApiByChain(originChain);
    try {
      if (tokenType === _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_2__._AssetType.PSP22) {
        tokenContract = new _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_3__.ContractPromise(substrateApi.api, _helper__WEBPACK_IMPORTED_MODULE_4__._PSP22_ABI, contractAddress);
        const [nameResp, symbolResp, decimalsResp] = await Promise.all([tokenContract.query['psp22Metadata::tokenName'](contractCaller || contractAddress, {
          gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_5__.getDefaultWeightV2)(substrateApi.api)
        }),
        // read-only operation so no gas limit
        tokenContract.query['psp22Metadata::tokenSymbol'](contractCaller || contractAddress, {
          gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_5__.getDefaultWeightV2)(substrateApi.api)
        }), tokenContract.query['psp22Metadata::tokenDecimals'](contractCaller || contractAddress, {
          gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_5__.getDefaultWeightV2)(substrateApi.api)
        })]);
        if (!(nameResp.result.isOk && symbolResp.result.isOk && decimalsResp.result.isOk) || !nameResp.output || !decimalsResp.output || !symbolResp.output) {
          return {
            name: '',
            decimals: -1,
            symbol: '',
            contractError: true
          };
        } else {
          var _symbolResp$output, _decimalsResp$output, _nameResp$output;
          const symbolObj = (_symbolResp$output = symbolResp.output) === null || _symbolResp$output === void 0 ? void 0 : _symbolResp$output.toHuman();
          const decimalsObj = (_decimalsResp$output = decimalsResp.output) === null || _decimalsResp$output === void 0 ? void 0 : _decimalsResp$output.toHuman();
          const nameObj = (_nameResp$output = nameResp.output) === null || _nameResp$output === void 0 ? void 0 : _nameResp$output.toHuman();
          name = nameResp.output ? nameObj.Ok || nameObj.ok : '';
          decimals = decimalsResp.output ? new (_polkadot_util__WEBPACK_IMPORTED_MODULE_6___default())(decimalsObj.Ok || decimalsObj.ok).toNumber() : 0;
          symbol = decimalsResp.output ? symbolObj.Ok || symbolObj.ok : '';
          if (!name || !symbol || typeof name === 'object' || typeof symbol === 'object') {
            contractError = true;
          }
          console.log('validate PSP22', name, symbol, decimals);
        }
      } else {
        tokenContract = new _polkadot_api_contract__WEBPACK_IMPORTED_MODULE_3__.ContractPromise(substrateApi.api, _helper__WEBPACK_IMPORTED_MODULE_4__._PSP34_ABI, contractAddress);
        const collectionIdResp = await tokenContract.query['psp34::collectionId'](contractCaller || contractAddress, {
          gasLimit: (0,_subwallet_extension_base_koni_api_tokens_wasm_utils__WEBPACK_IMPORTED_MODULE_5__.getDefaultWeightV2)(substrateApi.api)
        }); // read-only operation so no gas limit

        if (!collectionIdResp.result.isOk || !collectionIdResp.output) {
          return {
            name: '',
            decimals: -1,
            symbol: '',
            contractError: true
          };
        } else {
          var _collectionIdResp$out;
          const collectionIdDict = (_collectionIdResp$out = collectionIdResp.output) === null || _collectionIdResp$out === void 0 ? void 0 : _collectionIdResp$out.toHuman();
          if (collectionIdDict.Bytes === '') {
            contractError = true;
          } else {
            name = ''; // no function to get collection name, let user manually put in the name
          }
        }
      }

      return {
        name,
        decimals,
        symbol,
        contractError
      };
    } catch (e) {
      this.logger.error(e);
      return {
        name: '',
        decimals: -1,
        symbol: '',
        contractError: true
      };
    }
  }
  setSubstrateApi(chainSlug, substrateApi) {
    this.substrateApiMap[chainSlug] = substrateApi;
  }
  destroySubstrateApi(chainSlug) {
    const substrateAPI = this.substrateApiMap[chainSlug];
    substrateAPI === null || substrateAPI === void 0 ? void 0 : substrateAPI.destroy().catch(console.error);
  }
  async initApi(chainSlug, apiUrl, {
    externalApiPromise,
    onUpdateStatus,
    providerName
  } = {}) {
    var _this$parent2;
    const existed = this.substrateApiMap[chainSlug];

    // Return existed to avoid re-init metadata
    if (existed) {
      existed.connect();
      if (apiUrl !== existed.apiUrl) {
        await existed.updateApiUrl(apiUrl);
      }
      return existed;
    }
    const metadata = await ((_this$parent2 = this.parent) === null || _this$parent2 === void 0 ? void 0 : _this$parent2.getMetadata(chainSlug));
    const apiObject = new _subwallet_extension_base_services_chain_service_handler_SubstrateApi__WEBPACK_IMPORTED_MODULE_7__.SubstrateApi(chainSlug, apiUrl, {
      providerName,
      metadata,
      externalApiPromise
    });
    apiObject.connectionStatusSubject.subscribe(this.handleConnection.bind(this, chainSlug));
    onUpdateStatus && apiObject.connectionStatusSubject.subscribe(onUpdateStatus);

    // Update metadata to database with async methods
    apiObject.isReady.then(api => {
      var _this$parent3;
      // Avoid date existed metadata
      if (metadata && metadata.specVersion === api.specVersion && metadata.genesisHash === api.api.genesisHash.toHex()) {
        return;
      }
      (_this$parent3 = this.parent) === null || _this$parent3 === void 0 ? void 0 : _this$parent3.upsertMetadata(chainSlug, {
        chain: chainSlug,
        genesisHash: api.api.genesisHash.toHex(),
        specVersion: api.specVersion,
        hexValue: api.api.runtimeMetadata.toHex()
      }).catch(console.error);
    }).catch(console.error);
    return apiObject;
  }
}

/***/ }),

/***/ "../extension-base/src/services/chain-service/handler/light-client/index.ts":
/*!**********************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/handler/light-client/index.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getSubstrateConnectProvider": () => (/* binding */ getSubstrateConnectProvider),
/* harmony export */   "paraChainSpecs": () => (/* binding */ paraChainSpecs),
/* harmony export */   "relayChainSpecs": () => (/* binding */ relayChainSpecs)
/* harmony export */ });
/* harmony import */ var _substrate_connect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @substrate/connect */ "../../node_modules/@substrate/connect/dist/mjs/index.js");
/* harmony import */ var _polkadot_rpc_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/rpc-provider */ "../../node_modules/@polkadot/rpc-provider/substrate-connect/index.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0




const relayChainSpecs = {
  kusama: _substrate_connect__WEBPACK_IMPORTED_MODULE_0__.WellKnownChain.ksmcc3,
  polkadot: _substrate_connect__WEBPACK_IMPORTED_MODULE_0__.WellKnownChain.polkadot,
  rococo: _substrate_connect__WEBPACK_IMPORTED_MODULE_0__.WellKnownChain.rococo_v2_2,
  westend: _substrate_connect__WEBPACK_IMPORTED_MODULE_0__.WellKnownChain.westend2
};

// Direct get spec data from @polkadot/react-api repository
const sourceFolderUrl = 'https://raw.githubusercontent.com/polkadot-js/apps/master/packages/react-api/src/light/';
const paraChainSpecs = {
  'kusama/shiden': `${sourceFolderUrl}kusama/shiden.json`,
  'kusama/tinkernet': `${sourceFolderUrl}kusama/tinkernet.json`,
  'polkadot/astar': `${sourceFolderUrl}polkadot/astar.json`
};
class ProviderPlaceholder {
  constructor(providerPromise) {
    this.providerPromise = providerPromise;
    providerPromise.then(provider => {
      this.provider = provider;
    }).catch(console.error);
  }
  get hasSubscriptions() {
    return true;
  }
  get isClonable() {
    if (this.provider) {
      return this.provider.isClonable;
    } else {
      return false;
    }
  }
  get isConnected() {
    if (this.provider) {
      return this.provider.isConnected;
    } else {
      return false;
    }
  }
  clone() {
    var _this$provider;
    // @ts-ignore
    return (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.clone();
  }
  async connect() {
    var _this$provider2;
    await this.providerPromise;
    await ((_this$provider2 = this.provider) === null || _this$provider2 === void 0 ? void 0 : _this$provider2.connect());
  }
  async disconnect() {
    var _this$provider3;
    await this.providerPromise;
    await ((_this$provider3 = this.provider) === null || _this$provider3 === void 0 ? void 0 : _this$provider3.disconnect());
  }
  on(type, sub) {
    let cancel = false;
    let unsub = () => {
      cancel = false;
    };
    this.providerPromise.then(provider => {
      if (!cancel) {
        unsub = provider.on(type, sub);
      }
    }).catch(console.error);
    return () => {
      unsub();
    };
  }
  send(method, params, isCacheable) {
    if (this.provider) {
      return this.provider.send(method, params);
    }
    return this.providerPromise.then(provider => {
      return provider.send(method, params);
    });
  }
  subscribe(type, method, params, cb) {
    if (this.provider) {
      return this.provider.subscribe(type, method, params, cb);
    }
    return this.providerPromise.then(provider => {
      return provider.subscribe(type, method, params, cb);
    });
  }
  unsubscribe(type, method, id) {
    if (this.provider) {
      return this.provider.unsubscribe(type, method, id);
    }
    return this.providerPromise.then(provider => {
      return provider.unsubscribe(type, method, id);
    });
  }
}
function getSubstrateConnectProvider(specLink) {
  const [relayName, paraName] = specLink.split('/');
  const relaySpec = relayChainSpecs[relayName];
  const relayProvider = new _polkadot_rpc_provider__WEBPACK_IMPORTED_MODULE_1__.ScProvider(_substrate_connect__WEBPACK_IMPORTED_MODULE_0__, relaySpec);
  if (!paraName) {
    return relayProvider;
  }
  const paraChainData = paraChainSpecs[specLink];
  let scProvider;
  const scPromise = fetch(paraChainData).then(rs => rs.text()).then(spec => {
    scProvider = new _polkadot_rpc_provider__WEBPACK_IMPORTED_MODULE_1__.ScProvider(_substrate_connect__WEBPACK_IMPORTED_MODULE_0__, spec);
    return scProvider;
  }).catch(console.error);
  return new ProviderPlaceholder(scPromise);
}

/***/ }),

/***/ "../extension-base/src/services/chain-service/handler/manta/MantaPrivateHandler.ts":
/*!*****************************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/handler/manta/MantaPrivateHandler.ts ***!
  \*****************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MantaPrivateHandler": () => (/* binding */ MantaPrivateHandler)
/* harmony export */ });
/* harmony import */ var manta_extension_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! manta-extension-sdk */ "../../node_modules/manta-extension-sdk/dist/browser/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/Subject.js");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([manta_extension_sdk__WEBPACK_IMPORTED_MODULE_0__]);
manta_extension_sdk__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MantaPrivateHandler {
  _privateWallet = undefined;
  syncStateSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
  constructor(dbService) {
    this.dbService = dbService;
    this.syncState = {
      isSyncing: false,
      progress: 0
    };
    this.syncStateSubject.next(this.syncState);
  }
  setCurrentAddress(address) {
    this.currentAddress = address;
  }
  getSyncState() {
    return this.syncState;
  }
  get privateWallet() {
    return this._privateWallet;
  }
  subscribeSyncState() {
    return this.syncStateSubject;
  }
  async updateMantaPayConfig(address, chain, changes) {
    await this.dbService.updateMantaPayData(`config_${chain}_${address}`, changes);
  }
  async saveMantaPayConfig(config) {
    await this.dbService.setMantaPayData({
      key: `config_${config.chain}_${config.address}`,
      ...config
    });
  }
  async getMantaPayConfig(address, chain) {
    return this.dbService.getMantaPayData(`config_${chain}_${address}`);
  }
  async getMantaPayFirstConfig(chain) {
    return this.dbService.getMantaPayFirstConfig(chain);
  }
  async deleteMantaPayConfig(address, chain) {
    return this.dbService.deleteMantaPayConfig(`config_${chain}_${address}`);
  }
  async saveMantaAuthContext(context) {
    await this.dbService.setMantaPayData({
      key: `authContext_${context.chain}_${context.address}`,
      ...context
    });
  }
  async getMantaAuthContext(address, chain) {
    return this.dbService.getMantaPayData(`authContext_${chain}_${address}`);
  }
  async deleteMantaAuthContext(address, chain) {
    return this.dbService.deleteMantaPayConfig(`authContext_${chain}_${address}`);
  }
  async saveLedgerState(palletName, network, data) {
    try {
      const suffix = this.currentAddress ? `_${this.currentAddress}` : '';
      await this.dbService.setMantaPayData({
        key: `storage_state_${palletName}_${network}${suffix}`,
        ...data
      });
    } catch (e) {
      console.error('manta-pay', e);
      return false;
    }
    return true;
  }
  async getLedgerState(palletName, network) {
    let result;
    try {
      const suffix = this.currentAddress ? `_${this.currentAddress}` : '';

      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      result = await this.dbService.getMantaPayData(`storage_state_${palletName}_${network}${suffix}`);
    } catch (e) {
      console.error(e);
    }

    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return result || null;
  }
  async initMantaPay(providerUrl, network) {
    const networkParam = network.charAt(0).toUpperCase() + network.slice(1); // Manta || Calamari || Dolphin

    const baseWallet = await manta_extension_sdk__WEBPACK_IMPORTED_MODULE_0__.BaseWallet.init({
      apiEndpoint: providerUrl,
      loggingEnabled: true,
      provingFilePath: './manta-pay/proving',
      parametersFilePath: './manta-pay/parameters',
      saveStorageStateToLocal: this.saveLedgerState.bind(this),
      getStorageStateFromLocal: this.getLedgerState.bind(this)
    });
    this._privateWallet = manta_extension_sdk__WEBPACK_IMPORTED_MODULE_0__.MantaPayWallet.init(networkParam, baseWallet);
    return this._privateWallet.api;
  }
  async getCurrentLedgerState() {
    var _this$_privateWallet;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const ledgerState = await this.getLedgerState('mantaPay', 'Calamari');
    if (!ledgerState) {
      return 0;
    }

    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
    return await ((_this$_privateWallet = this._privateWallet) === null || _this$_privateWallet === void 0 ? void 0 : _this$_privateWallet.getLedgerCurrentCount(ledgerState.checkpoint));
  }
  setSyncState(data) {
    this.syncState = data;
    this.syncStateSubject.next(this.syncState);
  }
  async subscribeSyncProgress() {
    var _this$_privateWallet2;
    const ledgerTotalCount = await ((_this$_privateWallet2 = this._privateWallet) === null || _this$_privateWallet2 === void 0 ? void 0 : _this$_privateWallet2.getLedgerTotalCount());
    const interval = setInterval(() => {
      this.getCurrentLedgerState().then(currentCount => {
        const progress = Math.floor(currentCount / ledgerTotalCount * 100);
        if (progress === 100) {
          this.syncState = {
            isSyncing: false,
            progress
          };
          clearInterval(interval);
        } else {
          this.syncState = {
            isSyncing: true,
            progress
          };
        }
        this.syncStateSubject.next(this.syncState);
      }).catch(console.error);
    }, 1000);
    return () => {
      interval && clearInterval(interval);
    };
  }
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/index.ts":
/*!********************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/index.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_AZERO_DOMAIN_REGISTRY_ABI": () => (/* binding */ _AZERO_DOMAIN_REGISTRY_ABI),
/* harmony export */   "_ERC20_ABI": () => (/* binding */ _ERC20_ABI),
/* harmony export */   "_ERC721_ABI": () => (/* binding */ _ERC721_ABI),
/* harmony export */   "_NEUROGUNS_PSP34_ABI": () => (/* binding */ _NEUROGUNS_PSP34_ABI),
/* harmony export */   "_PINK_PSP34_ABI": () => (/* binding */ _PINK_PSP34_ABI),
/* harmony export */   "_PSP22_ABI": () => (/* binding */ _PSP22_ABI),
/* harmony export */   "_PSP34_ABI": () => (/* binding */ _PSP34_ABI),
/* harmony export */   "_TEST_ERC721_ABI": () => (/* binding */ _TEST_ERC721_ABI)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0

// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _ERC20_ABI = __webpack_require__(/*! ./erc20_abi.json */ "../extension-base/src/services/chain-service/helper/erc20_abi.json");
// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _ERC721_ABI = __webpack_require__(/*! ./erc721_abi.json */ "../extension-base/src/services/chain-service/helper/erc721_abi.json");
// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _TEST_ERC721_ABI = __webpack_require__(/*! ./test_erc721_abi.json */ "../extension-base/src/services/chain-service/helper/test_erc721_abi.json");
// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _PSP22_ABI = __webpack_require__(/*! ./psp22_abi.json */ "../extension-base/src/services/chain-service/helper/psp22_abi.json");
// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _PSP34_ABI = __webpack_require__(/*! ./psp34_abi.json */ "../extension-base/src/services/chain-service/helper/psp34_abi.json");
// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _PINK_PSP34_ABI = __webpack_require__(/*! ./pink_psp34_abi.json */ "../extension-base/src/services/chain-service/helper/pink_psp34_abi.json");
// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _NEUROGUNS_PSP34_ABI = __webpack_require__(/*! ./neuroguns_psp34_abi.json */ "../extension-base/src/services/chain-service/helper/neuroguns_psp34_abi.json");
// eslint-disable-next-line @typescript-eslint/no-var-requires,@typescript-eslint/no-unsafe-assignment
const _AZERO_DOMAIN_REGISTRY_ABI = __webpack_require__(/*! ./azero_domain_registry_abi.json */ "../extension-base/src/services/chain-service/helper/azero_domain_registry_abi.json");

/***/ }),

/***/ "../extension-base/src/services/chain-service/index.ts":
/*!*************************************************************!*\
  !*** ../extension-base/src/services/chain-service/index.ts ***!
  \*************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChainService": () => (/* binding */ ChainService)
/* harmony export */ });
/* harmony import */ var _custom_tokens_AssetLogoMap__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./custom-tokens/AssetLogoMap */ "../extension-base/src/services/chain-service/custom-tokens/AssetLogoMap.ts");
/* harmony import */ var _custom_tokens_AssetRef__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./custom-tokens/AssetRef */ "../extension-base/src/services/chain-service/custom-tokens/AssetRef.ts");
/* harmony import */ var _custom_tokens_ChainAsset__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./custom-tokens/ChainAsset */ "../extension-base/src/services/chain-service/custom-tokens/ChainAsset.ts");
/* harmony import */ var _custom_tokens_ChainInfo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./custom-tokens/ChainInfo */ "../extension-base/src/services/chain-service/custom-tokens/ChainInfo.ts");
/* harmony import */ var _custom_tokens_ChainLogoMap__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./custom-tokens/ChainLogoMap */ "../extension-base/src/services/chain-service/custom-tokens/ChainLogoMap.ts");
/* harmony import */ var _custom_tokens_MultiChainAsset__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./custom-tokens/MultiChainAsset */ "../extension-base/src/services/chain-service/custom-tokens/MultiChainAsset.ts");
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_EvmChainHandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/EvmChainHandler */ "../extension-base/src/services/chain-service/handler/EvmChainHandler.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_manta_MantaPrivateHandler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/manta/MantaPrivateHandler */ "../extension-base/src/services/chain-service/handler/manta/MantaPrivateHandler.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_SubstrateChainHandler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/SubstrateChainHandler */ "../extension-base/src/services/chain-service/handler/SubstrateChainHandler.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/handler/types */ "../extension-base/src/services/chain-service/handler/types.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/types */ "../extension-base/src/services/chain-service/types.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_stores_AssetSetting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/stores/AssetSetting */ "../extension-base/src/stores/AssetSetting.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/environment.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/Subject.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! web3 */ "../../node_modules/web3/dist/web3.min.js");
/* harmony import */ var web3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(web3__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _polkadot_util_logger__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/util/logger */ "../../node_modules/@polkadot/util/logger.js");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_subwallet_extension_base_services_chain_service_handler_manta_MantaPrivateHandler__WEBPACK_IMPORTED_MODULE_5__]);
_subwallet_extension_base_services_chain_service_handler_manta_MantaPrivateHandler__WEBPACK_IMPORTED_MODULE_5__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0

// import { AssetLogoMap, AssetRefMap, ChainAssetMap, ChainInfoMap, ChainLogoMap, MultiChainAssetMap } from '@subwallet/chain-list';




















class ChainService {
  dataMap = {
    chainInfoMap: {},
    chainStateMap: {},
    assetRegistry: {},
    assetRefMap: {}
  };
  lockChainInfoMap = false; // prevent unwanted changes (edit, enable, disable) to chainInfoMap

  get mantaPay() {
    return this.mantaChainHandler;
  }

  // TODO: consider BehaviorSubject
  chainInfoMapSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
  chainStateMapSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
  assetRegistrySubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
  multiChainAssetMapSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
  xcmRefMapSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();

  // Todo: Update to new store indexed DB
  store = new _subwallet_extension_base_stores_AssetSetting__WEBPACK_IMPORTED_MODULE_2__["default"]();
  assetSettingSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__.BehaviorSubject({});
  constructor(dbService, eventService) {
    this.dbService = dbService;
    this.eventService = eventService;
    this.chainInfoMapSubject.next(this.dataMap.chainInfoMap);
    this.chainStateMapSubject.next(this.dataMap.chainStateMap);
    this.assetRegistrySubject.next(this.dataMap.assetRegistry);
    this.xcmRefMapSubject.next(this.dataMap.assetRefMap);
    if (_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__.MODULE_SUPPORT.MANTA_ZK) {
      console.log('Init Manta ZK');
      this.mantaChainHandler = new _subwallet_extension_base_services_chain_service_handler_manta_MantaPrivateHandler__WEBPACK_IMPORTED_MODULE_5__.MantaPrivateHandler(dbService);
    }
    this.substrateChainHandler = new _subwallet_extension_base_services_chain_service_handler_SubstrateChainHandler__WEBPACK_IMPORTED_MODULE_6__.SubstrateChainHandler(this);
    this.evmChainHandler = new _subwallet_extension_base_services_chain_service_handler_EvmChainHandler__WEBPACK_IMPORTED_MODULE_7__.EvmChainHandler(this);
    this.logger = (0,_polkadot_util_logger__WEBPACK_IMPORTED_MODULE_8__.logger)('chain-service');
  }

  // Getter
  getXcmRefMap() {
    return this.dataMap.assetRefMap;
    // const result: Record<string, _AssetRef> = {};
    //
    // Object.entries(AssetRefMap).forEach(([key, assetRef]) => {
    //   if (assetRef.path === _AssetRefPath.XCM) {
    //     result[key] = assetRef;
    //   }
    // });
    //
    // return result;
  }

  getEvmApi(slug) {
    return this.evmChainHandler.getEvmApiByChain(slug);
  }
  getEvmApiMap() {
    return this.evmChainHandler.getEvmApiMap();
  }
  getSubstrateApiMap() {
    return this.substrateChainHandler.getSubstrateApiMap();
  }
  getSubstrateApi(slug) {
    return this.substrateChainHandler.getSubstrateApiByChain(slug);
  }
  getChainCurrentProviderByKey(slug) {
    const providerName = this.getChainStateByKey(slug).currentProvider;
    const providerMap = this.getChainInfoByKey(slug).providers;
    const endpoint = providerMap[providerName];
    return {
      endpoint,
      providerName
    };
  }
  subscribeChainInfoMap() {
    return this.chainInfoMapSubject;
  }
  subscribeAssetRegistry() {
    return this.assetRegistrySubject;
  }
  subscribeMultiChainAssetMap() {
    return this.multiChainAssetMapSubject;
  }
  subscribeXcmRefMap() {
    return this.xcmRefMapSubject;
  }
  subscribeChainStateMap() {
    return this.chainStateMapSubject;
  }
  getAssetRegistry() {
    return this.dataMap.assetRegistry;
  }
  getMultiChainAssetMap() {
    return _custom_tokens_MultiChainAsset__WEBPACK_IMPORTED_MODULE_9__.MultiChainAssetMap;
  }
  getSmartContractTokens() {
    const filteredAssetRegistry = {};
    Object.values(this.getAssetRegistry()).forEach(asset => {
      if (_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._SMART_CONTRACT_STANDARDS.includes(asset.assetType)) {
        filteredAssetRegistry[asset.slug] = asset;
      }
    });
    return filteredAssetRegistry;
  }
  getChainInfoMap() {
    return this.dataMap.chainInfoMap;
  }
  getEvmChainInfoMap() {
    const result = {};
    Object.values(this.getChainInfoMap()).forEach(chainInfo => {
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isPureEvmChain)(chainInfo)) {
        result[chainInfo.slug] = chainInfo;
      }
    });
    return result;
  }
  getSubstrateChainInfoMap() {
    const result = {};
    Object.values(this.getChainInfoMap()).forEach(chainInfo => {
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isPureSubstrateChain)(chainInfo)) {
        result[chainInfo.slug] = chainInfo;
      }
    });
    return result;
  }
  getAllPriceIds() {
    const result = [];
    Object.values(this.getAssetRegistry()).forEach(assetInfo => {
      if (assetInfo.priceId !== null) {
        result.push(assetInfo.priceId);
      }
    });
    return result;
  }
  getNativeTokenInfo(chainSlug) {
    let nativeTokenInfo = {
      assetType: _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.NATIVE,
      decimals: 0,
      metadata: null,
      minAmount: '',
      multiChainAsset: '',
      name: '',
      originChain: '',
      priceId: '',
      slug: '',
      symbol: '',
      hasValue: true,
      icon: ''
    };
    for (const assetInfo of Object.values(this.getAssetRegistry())) {
      if (assetInfo.assetType === _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.NATIVE && assetInfo.originChain === chainSlug) {
        nativeTokenInfo = assetInfo;
        break;
      }
    }
    return nativeTokenInfo;
  }
  getAssetRefMap() {
    return this.dataMap.assetRefMap;
  }
  getChainStateMap() {
    return this.dataMap.chainStateMap;
  }
  getChainStateByKey(key) {
    return this.dataMap.chainStateMap[key];
  }
  getActiveChains() {
    return Object.entries(this.dataMap.chainStateMap).filter(([, chainState]) => (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isChainEnabled)(chainState)).map(([key]) => key);
  }
  getSupportedSmartContractTypes() {
    return [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.ERC20, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.ERC721, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.PSP22, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.PSP34];
  }
  getActiveChainInfoMap() {
    const result = {};
    Object.values(this.getChainInfoMap()).forEach(chainInfo => {
      const chainState = this.getChainStateByKey(chainInfo.slug);
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isChainEnabled)(chainState)) {
        result[chainInfo.slug] = chainInfo;
      }
    });
    return result;
  }
  getActiveChainSlugs() {
    const result = [];
    Object.values(this.getChainInfoMap()).forEach(chainInfo => {
      const chainState = this.getChainStateByKey(chainInfo.slug);
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isChainEnabled)(chainState)) {
        result.push(chainInfo.slug);
      }
    });
    return result;
  }
  getChainInfoByKey(key) {
    return this.dataMap.chainInfoMap[key];
  }
  getActiveChainInfos() {
    const result = {};
    Object.values(this.getChainStateMap()).forEach(chainState => {
      if (chainState.active) {
        result[chainState.slug] = this.getChainInfoByKey(chainState.slug);
      }
    });
    return result;
  }
  getAssetBySlug(slug) {
    return this.getAssetRegistry()[slug];
  }
  getMantaZkAssets(chain) {
    const result = {};
    Object.values(this.getAssetRegistry()).forEach(chainAsset => {
      if (chainAsset.originChain === chain && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isAssetFungibleToken)(chainAsset) && chainAsset.symbol.startsWith(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._ZK_ASSET_PREFIX)) {
        result[chainAsset.slug] = chainAsset;
      }
    });
    return result;
  }
  getFungibleTokensByChain(chainSlug, checkActive = false) {
    const result = {};
    const assetSettings = this.assetSettingSubject.value;
    Object.values(this.getAssetRegistry()).forEach(chainAsset => {
      var _assetSettings$chainA;
      const _filterActive = !checkActive || ((_assetSettings$chainA = assetSettings[chainAsset.slug]) === null || _assetSettings$chainA === void 0 ? void 0 : _assetSettings$chainA.visible);
      if (chainAsset.originChain === chainSlug && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isAssetFungibleToken)(chainAsset) && _filterActive) {
        result[chainAsset.slug] = chainAsset;
      }
    });
    return result;
  }
  getXcmEqualAssetByChain(destinationChainSlug, originTokenSlug) {
    let destinationTokenInfo;
    for (const asset of Object.values(this.getAssetRegistry())) {
      if (asset.originChain === destinationChainSlug) {
        // check
        const assetRefKey = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._parseAssetRefKey)(originTokenSlug, asset.slug);
        const assetRef = this.getAssetRefMap()[assetRefKey];
        if (assetRef && assetRef.path === _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetRefPath.XCM) {
          // there's only 1 corresponding token on 1 chain
          destinationTokenInfo = asset;
          break;
        }
      }
    }
    return destinationTokenInfo;
  }
  getAssetByChainAndType(chainSlug, assetTypes) {
    const result = {};
    Object.values(this.getAssetRegistry()).forEach(assetInfo => {
      if (assetTypes.includes(assetInfo.assetType) && assetInfo.originChain === chainSlug) {
        result[assetInfo.slug] = assetInfo;
      }
    });
    return result;
  }
  getSmartContractNfts() {
    const result = [];
    Object.values(this.getAssetRegistry()).forEach(assetInfo => {
      if (_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._NFT_CONTRACT_STANDARDS.includes(assetInfo.assetType)) {
        result.push(assetInfo);
      }
    });
    return result;
  }

  // Setter
  forceRemoveChain(slug) {
    if (this.lockChainInfoMap) {
      return false;
    }
    const chainInfoMap = this.getChainInfoMap();
    const chainStateMap = this.getChainStateMap();
    if (!(slug in chainInfoMap)) {
      return false;
    }
    this.lockChainInfoMap = true;
    delete chainStateMap[slug];
    delete chainInfoMap[slug];
    this.deleteAssetsByChain(slug);
    this.dbService.removeFromChainStore([slug]).catch(console.error);
    this.updateChainSubscription();
    this.lockChainInfoMap = false;
    this.eventService.emit('chain.updateState', slug);
    return true;
  }
  removeCustomChain(slug) {
    if (this.lockChainInfoMap) {
      return false;
    }
    const chainInfoMap = this.getChainInfoMap();
    const chainStateMap = this.getChainStateMap();
    if (!(slug in chainInfoMap)) {
      return false;
    }
    if (!(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isCustomChain)(slug)) {
      return false;
    }
    if (chainStateMap[slug].active) {
      return false;
    }
    this.lockChainInfoMap = true;
    delete chainStateMap[slug];
    delete chainInfoMap[slug];
    this.deleteAssetsByChain(slug);
    this.dbService.removeFromChainStore([slug]).catch(console.error);
    this.updateChainSubscription();
    this.lockChainInfoMap = false;
    this.eventService.emit('chain.updateState', slug);
    return true;
  }
  resetChainInfoMap(excludedChains) {
    if (this.lockChainInfoMap) {
      return false;
    }
    this.lockChainInfoMap = true;
    const chainStateMap = this.getChainStateMap();
    for (const [slug, chainState] of Object.entries(chainStateMap)) {
      if (!_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._DEFAULT_ACTIVE_CHAINS.includes(slug) && !(excludedChains !== null && excludedChains !== void 0 && excludedChains.includes(slug))) {
        chainState.active = false;
      }
    }
    this.updateChainStateMapSubscription();
    this.lockChainInfoMap = false;
    return true;
  }
  setChainConnectionStatus(slug, connectionStatus) {
    const chainStateMap = this.getChainStateMap();
    chainStateMap[slug].connectionStatus = connectionStatus;
  }
  upsertCustomToken(token) {
    if (token.slug.length === 0) {
      // new token
      if (token.assetType === _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.NATIVE) {
        const defaultSlug = this.generateSlugForNativeToken(token.originChain, token.assetType, token.symbol);
        token.slug = `${_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._CUSTOM_PREFIX}${defaultSlug}`;
      } else {
        var _token$metadata;
        const defaultSlug = this.generateSlugForSmartContractAsset(token.originChain, token.assetType, token.symbol, (_token$metadata = token.metadata) === null || _token$metadata === void 0 ? void 0 : _token$metadata.contractAddress);
        token.slug = `${_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._CUSTOM_PREFIX}${defaultSlug}`;
      }
    }
    if (token.originChain && (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isAssetFungibleToken)(token)) {
      var _this$getChainInfoByK;
      token.hasValue = !((_this$getChainInfoByK = this.getChainInfoByKey(token.originChain)) !== null && _this$getChainInfoByK !== void 0 && _this$getChainInfoByK.isTestnet);
    }
    const assetRegistry = this.getAssetRegistry();
    assetRegistry[token.slug] = token;
    this.dbService.updateAssetStore(token).catch(e => this.logger.error(e));
    this.assetRegistrySubject.next(assetRegistry);
    return token.slug;
  }
  deleteAssetsByChain(chainSlug) {
    if (!(0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isCustomChain)(chainSlug)) {
      return;
    }
    const targetAssets = [];
    const assetRegistry = this.getAssetRegistry();
    Object.values(assetRegistry).forEach(targetToken => {
      if (targetToken.originChain === chainSlug) {
        targetAssets.push(targetToken.slug);
      }
    });
    this.deleteCustomAssets(targetAssets);
  }
  deleteCustomAssets(targetAssets) {
    const assetRegistry = this.getAssetRegistry();
    targetAssets.forEach(targetToken => {
      delete assetRegistry[targetToken];
    });
    this.dbService.removeFromBalanceStore(targetAssets).catch(e => this.logger.error(e));
    this.dbService.removeFromAssetStore(targetAssets).catch(e => this.logger.error(e));
    this.assetRegistrySubject.next(assetRegistry);
    targetAssets.forEach(assetSlug => {
      this.eventService.emit('asset.updateState', assetSlug);
    });
  }

  // Business logic
  async init() {
    await this.eventService.waitDatabaseReady;

    // TODO: reconsider the flow of initiation
    const [latestAssetRefMap, latestMultiChainAssetMap] = await Promise.all([this.fetchLatestData(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._ASSET_REF_SRC, _custom_tokens_AssetRef__WEBPACK_IMPORTED_MODULE_14__.AssetRefMap), this.fetchLatestData(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._MULTI_CHAIN_ASSET_SRC, _custom_tokens_MultiChainAsset__WEBPACK_IMPORTED_MODULE_9__.MultiChainAssetMap)]);
    this.multiChainAssetMapSubject.next(latestMultiChainAssetMap);
    this.dataMap.assetRefMap = latestAssetRefMap;
    await this.initChains();
    this.chainInfoMapSubject.next(this.getChainInfoMap());
    this.updateChainStateMapSubscription();
    this.assetRegistrySubject.next(this.getAssetRegistry());
    this.xcmRefMapSubject.next(this.dataMap.assetRefMap);
    await this.initApis();
    await this.initAssetSettings();
  }
  async initApis() {
    const chainInfoMap = this.getChainInfoMap();
    const chainStateMap = this.getChainStateMap();
    await Promise.all(Object.entries(chainInfoMap).filter(([slug]) => {
      var _chainStateMap$slug;
      return (_chainStateMap$slug = chainStateMap[slug]) === null || _chainStateMap$slug === void 0 ? void 0 : _chainStateMap$slug.active;
    }).map(([, chainInfo]) => {
      try {
        return this.initApiForChain(chainInfo);
      } catch (e) {
        console.error(e);
        return Promise.resolve();
      }
    }));
  }
  async initApiForChain(chainInfo) {
    const {
      endpoint,
      providerName
    } = this.getChainCurrentProviderByKey(chainInfo.slug);
    const onUpdateStatus = status => {
      const currentStatus = this.getChainStateByKey(chainInfo.slug).connectionStatus;

      // Avoid unnecessary update in case disable chain
      if (currentStatus !== status) {
        this.setChainConnectionStatus(chainInfo.slug, status);
        this.updateChainStateMapSubscription();
      }
    };
    if (chainInfo.substrateInfo !== null && chainInfo.substrateInfo !== undefined) {
      if (_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._MANTA_ZK_CHAIN_GROUP.includes(chainInfo.slug) && _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__.MODULE_SUPPORT.MANTA_ZK && this.mantaChainHandler) {
        var _this$mantaChainHandl;
        const apiPromise = await ((_this$mantaChainHandl = this.mantaChainHandler) === null || _this$mantaChainHandl === void 0 ? void 0 : _this$mantaChainHandl.initMantaPay(endpoint, chainInfo.slug));
        const chainApi = await this.substrateChainHandler.initApi(chainInfo.slug, endpoint, {
          providerName,
          externalApiPromise: apiPromise,
          onUpdateStatus
        });
        this.substrateChainHandler.setSubstrateApi(chainInfo.slug, chainApi);
      } else {
        const chainApi = await this.substrateChainHandler.initApi(chainInfo.slug, endpoint, {
          providerName,
          onUpdateStatus
        });
        this.substrateChainHandler.setSubstrateApi(chainInfo.slug, chainApi);
      }
    }
    if (chainInfo.evmInfo !== null && chainInfo.evmInfo !== undefined) {
      const chainApi = await this.evmChainHandler.initApi(chainInfo.slug, endpoint, {
        providerName,
        onUpdateStatus
      });
      this.evmChainHandler.setEvmApi(chainInfo.slug, chainApi);
    }
  }
  destroyApiForChain(chainInfo) {
    if (chainInfo.substrateInfo !== null) {
      this.substrateChainHandler.destroySubstrateApi(chainInfo.slug);
    }
    if (chainInfo.evmInfo !== null) {
      this.evmChainHandler.destroyEvmApi(chainInfo.slug);
    }
  }
  async enableChain(chainSlug) {
    const chainInfo = this.getChainInfoByKey(chainSlug);
    const chainStateMap = this.getChainStateMap();
    if (chainStateMap[chainSlug].active || this.lockChainInfoMap) {
      return false;
    }
    this.lockChainInfoMap = true;
    this.dbService.updateChainStore({
      ...chainInfo,
      active: true,
      currentProvider: chainStateMap[chainSlug].currentProvider
    }).catch(console.error);
    chainStateMap[chainSlug].active = true;
    await this.initApiForChain(chainInfo);
    this.lockChainInfoMap = false;
    this.eventService.emit('chain.updateState', chainSlug);
    this.updateChainStateMapSubscription();
    return true;
  }
  async enableChains(chainSlugs) {
    const chainInfoMap = this.getChainInfoMap();
    const chainStateMap = this.getChainStateMap();
    let needUpdate = false;
    if (this.lockChainInfoMap) {
      return false;
    }
    this.lockChainInfoMap = true;
    const initPromises = chainSlugs.map(async chainSlug => {
      var _chainStateMap$chainS;
      const chainInfo = chainInfoMap[chainSlug];
      const currentState = (_chainStateMap$chainS = chainStateMap[chainSlug]) === null || _chainStateMap$chainS === void 0 ? void 0 : _chainStateMap$chainS.active;
      if (!currentState) {
        this.dbService.updateChainStore({
          ...chainInfo,
          active: true,
          currentProvider: chainStateMap[chainSlug].currentProvider
        }).catch(console.error);
        chainStateMap[chainSlug].active = true;
        await this.initApiForChain(chainInfo);
        this.eventService.emit('chain.updateState', chainSlug);
        needUpdate = true;
      }
    });
    await Promise.all(initPromises);
    this.lockChainInfoMap = false;
    needUpdate && this.updateChainStateMapSubscription();
    return needUpdate;
  }
  async reconnectChain(chain) {
    var _this$getSubstrateApi, _this$getEvmApi;
    await ((_this$getSubstrateApi = this.getSubstrateApi(chain)) === null || _this$getSubstrateApi === void 0 ? void 0 : _this$getSubstrateApi.recoverConnect());
    await ((_this$getEvmApi = this.getEvmApi(chain)) === null || _this$getEvmApi === void 0 ? void 0 : _this$getEvmApi.recoverConnect());
    return true;
  }
  disableChain(chainSlug) {
    const chainInfo = this.getChainInfoByKey(chainSlug);
    const chainStateMap = this.getChainStateMap();
    if (!chainStateMap[chainSlug].active || this.lockChainInfoMap) {
      return false;
    }
    this.lockChainInfoMap = true;
    chainStateMap[chainSlug].active = false;
    // Set disconnect state for inactive chain
    chainStateMap[chainSlug].connectionStatus = _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED;
    this.destroyApiForChain(chainInfo);
    this.dbService.updateChainStore({
      ...chainInfo,
      active: false,
      currentProvider: chainStateMap[chainSlug].currentProvider
    }).catch(console.error);
    this.updateChainStateMapSubscription();
    this.lockChainInfoMap = false;
    this.eventService.emit('chain.updateState', chainSlug);
    return true;
  }
  checkExistedPredefinedChain(latestChainInfoMap, genesisHash, evmChainId) {
    let duplicatedSlug = '';
    if (genesisHash) {
      Object.values(latestChainInfoMap).forEach(chainInfo => {
        if (chainInfo.substrateInfo && chainInfo.substrateInfo.genesisHash === genesisHash) {
          duplicatedSlug = chainInfo.slug;
        }
      });
    } else if (evmChainId) {
      Object.values(latestChainInfoMap).forEach(chainInfo => {
        if (chainInfo.evmInfo && chainInfo.evmInfo.evmChainId === evmChainId) {
          duplicatedSlug = chainInfo.slug;
        }
      });
    }
    return duplicatedSlug;
  }
  async fetchLatestData(src, defaultValue) {
    return Promise.resolve(defaultValue);
    // try {
    //   const timeout = new Promise((resolve) => {
    //     const id = setTimeout(() => {
    //       clearTimeout(id);
    //       resolve(null);
    //     }, 1500);
    //   });
    //   let result = defaultValue;
    //   const resp = await Promise.race([
    //     timeout,
    //     fetch(src)
    //   ]) as Response || null;
    //
    //   if (!resp) {
    //     console.warn('Error fetching latest data', src);
    //
    //     return result;
    //   }
    //
    //   if (resp.ok) {
    //     try {
    //       result = await resp.json();
    //       console.log('Fetched latest data', src);
    //     } catch (err) {
    //       console.warn('Error parsing latest data', src, err);
    //     }
    //   }
    //
    //   return result;
    // } catch (e) {
    //   console.warn('Error fetching latest data', src, e);
    //
    //   return defaultValue;
    // }
  }

  async initChains() {
    const storedChainSettings = await this.dbService.getAllChainStore();
    const latestChainInfoMap = await this.fetchLatestData(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._CHAIN_INFO_SRC, _custom_tokens_ChainInfo__WEBPACK_IMPORTED_MODULE_15__.ChainInfoMap);
    const storedChainSettingMap = {};
    storedChainSettings.forEach(chainStoredSetting => {
      storedChainSettingMap[chainStoredSetting.slug] = chainStoredSetting;
    });
    const newStorageData = [];
    const deprecatedChains = [];
    const deprecatedChainMap = {};
    if (storedChainSettings.length === 0) {
      this.dataMap.chainInfoMap = latestChainInfoMap;
      Object.values(latestChainInfoMap).forEach(chainInfo => {
        this.dataMap.chainStateMap[chainInfo.slug] = {
          currentProvider: Object.keys(chainInfo.providers)[0],
          slug: chainInfo.slug,
          connectionStatus: _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED,
          active: _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._DEFAULT_ACTIVE_CHAINS.includes(chainInfo.slug)
        };

        // create data for storage
        newStorageData.push({
          ...chainInfo,
          active: _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._DEFAULT_ACTIVE_CHAINS.includes(chainInfo.slug),
          currentProvider: Object.keys(chainInfo.providers)[0]
        });
      });
    } else {
      const mergedChainInfoMap = latestChainInfoMap;
      for (const [storedSlug, storedChainInfo] of Object.entries(storedChainSettingMap)) {
        if (storedSlug in latestChainInfoMap) {
          // check predefined chains first, keep setting for providers and currentProvider
          mergedChainInfoMap[storedSlug].providers = {
            ...storedChainInfo.providers,
            ...mergedChainInfoMap[storedSlug].providers
          }; // TODO: review merging providers
          this.dataMap.chainStateMap[storedSlug] = {
            currentProvider: storedChainInfo.currentProvider,
            slug: storedSlug,
            connectionStatus: _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED,
            active: storedChainInfo.active
          };
          newStorageData.push({
            ...mergedChainInfoMap[storedSlug],
            active: storedChainInfo.active,
            currentProvider: storedChainInfo.currentProvider
          });
        } else {
          var _storedChainInfo$subs, _storedChainInfo$evmI;
          // only custom chains are left
          // check custom chain duplicated with predefined chain => merge into predefined chain
          const duplicatedDefaultSlug = this.checkExistedPredefinedChain(latestChainInfoMap, (_storedChainInfo$subs = storedChainInfo.substrateInfo) === null || _storedChainInfo$subs === void 0 ? void 0 : _storedChainInfo$subs.genesisHash, (_storedChainInfo$evmI = storedChainInfo.evmInfo) === null || _storedChainInfo$evmI === void 0 ? void 0 : _storedChainInfo$evmI.evmChainId);
          if (duplicatedDefaultSlug.length > 0) {
            // merge custom chain with existed chain
            mergedChainInfoMap[duplicatedDefaultSlug].providers = {
              ...storedChainInfo.providers,
              ...mergedChainInfoMap[duplicatedDefaultSlug].providers
            };
            this.dataMap.chainStateMap[duplicatedDefaultSlug] = {
              currentProvider: storedChainInfo.currentProvider,
              slug: duplicatedDefaultSlug,
              connectionStatus: _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED,
              active: storedChainInfo.active
            };
            newStorageData.push({
              ...mergedChainInfoMap[duplicatedDefaultSlug],
              active: storedChainInfo.active,
              currentProvider: storedChainInfo.currentProvider
            });
            deprecatedChainMap[storedSlug] = duplicatedDefaultSlug;
            deprecatedChains.push(storedSlug);
          } else {
            mergedChainInfoMap[storedSlug] = {
              slug: storedSlug,
              name: storedChainInfo.name,
              providers: storedChainInfo.providers,
              evmInfo: storedChainInfo.evmInfo,
              substrateInfo: storedChainInfo.substrateInfo,
              isTestnet: storedChainInfo.isTestnet,
              chainStatus: storedChainInfo.chainStatus,
              icon: storedChainInfo.icon
            };
            this.dataMap.chainStateMap[storedSlug] = {
              currentProvider: storedChainInfo.currentProvider,
              slug: storedSlug,
              connectionStatus: _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED,
              active: storedChainInfo.active
            };
            newStorageData.push({
              ...mergedChainInfoMap[storedSlug],
              active: storedChainInfo.active,
              currentProvider: storedChainInfo.currentProvider
            });
          }
        }
      }

      // Fill in the missing chainState and storageData (new chains never before seen)
      Object.entries(mergedChainInfoMap).forEach(([slug, chainInfo]) => {
        if (!(slug in this.dataMap.chainStateMap)) {
          this.dataMap.chainStateMap[slug] = {
            currentProvider: Object.keys(chainInfo.providers)[0],
            slug,
            connectionStatus: _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED,
            active: _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._DEFAULT_ACTIVE_CHAINS.includes(slug)
          };
          newStorageData.push({
            ...mergedChainInfoMap[slug],
            active: _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._DEFAULT_ACTIVE_CHAINS.includes(slug),
            currentProvider: Object.keys(chainInfo.providers)[0]
          });
        }
      });
      this.dataMap.chainInfoMap = mergedChainInfoMap;
    }
    await this.dbService.bulkUpdateChainStore(newStorageData);
    await this.dbService.removeFromChainStore(deprecatedChains); // remove outdated records
    await this.initAssetRegistry(deprecatedChainMap);
  }
  async initAssetRegistry(deprecatedCustomChainMap) {
    const storedAssetRegistry = await this.dbService.getAllAssetStore();
    const latestAssetRegistry = await this.fetchLatestData(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._CHAIN_ASSET_SRC, _custom_tokens_ChainAsset__WEBPACK_IMPORTED_MODULE_16__.ChainAssetMap);

    // Fill out zk assets from latestAssetRegistry if not supported
    if (!_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_4__.MODULE_SUPPORT.MANTA_ZK) {
      Object.keys(latestAssetRegistry).forEach(slug => {
        if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isMantaZkAsset)(latestAssetRegistry[slug])) {
          delete latestAssetRegistry[slug];
        }
      });
    }
    if (storedAssetRegistry.length === 0) {
      this.dataMap.assetRegistry = latestAssetRegistry;
    } else {
      const mergedAssetRegistry = latestAssetRegistry;
      const parsedStoredAssetRegistry = {};
      const deprecatedAssets = [];

      // Update custom assets of merged custom chains
      Object.values(storedAssetRegistry).forEach(storedAsset => {
        if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isCustomAsset)(storedAsset.slug) && Object.keys(deprecatedCustomChainMap).includes(storedAsset.originChain)) {
          var _storedAsset$metadata;
          const newOriginChain = deprecatedCustomChainMap[storedAsset.originChain];
          const newSlug = this.generateSlugForSmartContractAsset(newOriginChain, storedAsset.assetType, storedAsset.symbol, (_storedAsset$metadata = storedAsset.metadata) === null || _storedAsset$metadata === void 0 ? void 0 : _storedAsset$metadata.contractAddress);
          deprecatedAssets.push(storedAsset.slug);
          parsedStoredAssetRegistry[newSlug] = {
            ...storedAsset,
            originChain: newOriginChain,
            slug: newSlug
          };
        } else {
          parsedStoredAssetRegistry[storedAsset.slug] = storedAsset;
        }
      });
      for (const storedAssetInfo of Object.values(parsedStoredAssetRegistry)) {
        let duplicated = false;
        for (const defaultChainAsset of Object.values(latestAssetRegistry)) {
          // case merge custom asset with default asset
          if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isEqualSmartContractAsset)(storedAssetInfo, defaultChainAsset)) {
            duplicated = true;
            break;
          }
        }
        if (!duplicated) {
          mergedAssetRegistry[storedAssetInfo.slug] = storedAssetInfo;
        } else {
          deprecatedAssets.push(storedAssetInfo.slug);
        }
      }
      this.dataMap.assetRegistry = mergedAssetRegistry;
      await this.dbService.removeFromAssetStore(deprecatedAssets);
    }
  }
  updateChainStateMapSubscription() {
    this.chainStateMapSubject.next(this.getChainStateMap());
  }
  updateChainInfoMapSubscription() {
    this.chainInfoMapSubject.next(this.getChainInfoMap());
  }
  updateChainSubscription() {
    this.updateChainInfoMapSubscription();
    this.updateChainStateMapSubscription();
  }

  // Can only update providers or block explorer, crowdloan url
  async updateChain(params) {
    const chainSlug = params.chainEditInfo.slug;
    const targetChainInfo = this.getChainInfoByKey(chainSlug);
    const targetChainState = this.getChainStateByKey(chainSlug);
    const changedProvider = params.chainEditInfo.currentProvider !== targetChainState.currentProvider;
    if (changedProvider) {
      targetChainInfo.providers = params.chainEditInfo.providers;
      targetChainState.currentProvider = params.chainEditInfo.currentProvider;

      // Enable chain if not before
      if (!targetChainState.active) {
        targetChainState.active = true;
      }

      // It auto detects the change of api url to create new instance or reuse existed one
      await this.initApiForChain(targetChainInfo);
      this.updateChainStateMapSubscription();
    }
    if (targetChainInfo.substrateInfo) {
      if (params.chainEditInfo.blockExplorer !== undefined) {
        targetChainInfo.substrateInfo.blockExplorer = params.chainEditInfo.blockExplorer;
      }
      if (params.chainEditInfo.crowdloanUrl !== undefined) {
        targetChainInfo.substrateInfo.crowdloanUrl = params.chainEditInfo.crowdloanUrl;
      }
    }
    if (targetChainInfo.evmInfo) {
      if (params.chainEditInfo.blockExplorer !== undefined) {
        targetChainInfo.evmInfo.blockExplorer = params.chainEditInfo.blockExplorer;
      }
    }
    this.updateChainInfoMapSubscription();
    this.dbService.updateChainStore({
      ...targetChainInfo,
      active: targetChainState.active,
      currentProvider: targetChainState.currentProvider
    }).then(() => {
      this.eventService.emit('chain.updateState', chainSlug);
    }).catch(e => this.logger.error(e));
  }
  async insertChain(params) {
    const chainInfoMap = this.getChainInfoMap();
    if (!params.chainSpec) {
      return;
    }
    const newChainSlug = this.generateSlugForCustomChain(params.chainEditInfo.chainType, params.chainEditInfo.name, params.chainSpec.paraId, params.chainSpec.evmChainId);
    let substrateInfo = null;
    let evmInfo = null;
    if (params.chainSpec.genesisHash !== '') {
      substrateInfo = {
        crowdloanFunds: params.chainSpec.crowdloanFunds || null,
        crowdloanParaId: params.chainSpec.crowdloanParaId || null,
        addressPrefix: params.chainSpec.addressPrefix,
        blockExplorer: params.chainEditInfo.blockExplorer || null,
        chainType: params.chainSpec.paraId !== null ? _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._SubstrateChainType.PARACHAIN : _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._SubstrateChainType.RELAYCHAIN,
        crowdloanUrl: params.chainEditInfo.crowdloanUrl || null,
        decimals: params.chainSpec.decimals,
        existentialDeposit: params.chainSpec.existentialDeposit,
        paraId: params.chainSpec.paraId,
        symbol: params.chainEditInfo.symbol,
        genesisHash: params.chainSpec.genesisHash,
        relaySlug: null,
        hasNativeNft: false,
        supportStaking: params.chainSpec.paraId === null,
        supportSmartContract: null
      };
    } else if (params.chainSpec.evmChainId !== null) {
      evmInfo = {
        supportSmartContract: [_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.ERC20, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.ERC721],
        // set support for ERC token by default
        blockExplorer: params.chainEditInfo.blockExplorer || null,
        decimals: params.chainSpec.decimals,
        evmChainId: params.chainSpec.evmChainId,
        existentialDeposit: params.chainSpec.existentialDeposit,
        symbol: params.chainEditInfo.symbol,
        abiExplorer: null
      };
    }
    const chainInfo = {
      slug: newChainSlug,
      name: params.chainEditInfo.name,
      providers: params.chainEditInfo.providers,
      substrateInfo,
      evmInfo,
      isTestnet: false,
      chainStatus: _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._ChainStatus.ACTIVE,
      icon: '' // Todo: Allow update with custom chain
    };

    // insert new chainInfo
    chainInfoMap[newChainSlug] = chainInfo;

    // insert new chainState
    const chainStateMap = this.getChainStateMap();
    chainStateMap[newChainSlug] = {
      active: true,
      connectionStatus: _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED,
      currentProvider: params.chainEditInfo.currentProvider,
      slug: newChainSlug
    };
    await this.initApiForChain(chainInfo);

    // create a record in assetRegistry for native token and update store/subscription
    const nativeTokenSlug = this.upsertCustomToken({
      assetType: _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.NATIVE,
      decimals: params.chainSpec.decimals,
      metadata: null,
      minAmount: params.chainSpec.existentialDeposit,
      multiChainAsset: null,
      name: params.chainEditInfo.name,
      originChain: newChainSlug,
      priceId: params.chainEditInfo.priceId || null,
      slug: '',
      symbol: params.chainEditInfo.symbol,
      hasValue: true,
      icon: ''
    });

    // update subscription
    this.updateChainSubscription();

    // TODO: add try, catch, move storage update and subject update to somewhere else
    this.dbService.updateChainStore({
      active: true,
      currentProvider: params.chainEditInfo.currentProvider,
      ...chainInfo
    }).then(() => {
      this.eventService.emit('chain.add', newChainSlug);
    }).catch(e => this.logger.error(e));
    return nativeTokenSlug;
  }
  async upsertChain(params) {
    if (this.lockChainInfoMap) {
      return;
    }
    this.lockChainInfoMap = true;
    let result;
    if (params.mode === 'update') {
      // update existing chainInfo
      await this.updateChain(params);
    } else {
      // insert custom network
      result = await this.insertChain(params);
    }
    this.lockChainInfoMap = false;
    return result;
  }
  generateSlugForCustomChain(chainType, name, paraId, evmChainId) {
    const parsedName = name.replaceAll(' ', '').toLowerCase();
    if (evmChainId !== null && evmChainId !== undefined) {
      return `${_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._CUSTOM_PREFIX}${chainType}-${parsedName}-${evmChainId}`;
    } else {
      let slug = `${_subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._CUSTOM_PREFIX}${chainType}-${parsedName}`;
      if (paraId !== null && paraId !== undefined) {
        slug = slug.concat(`-${paraId}`);
      }
      return slug;
    }
  }
  async validateCustomChain(provider, existingChainSlug) {
    // currently only supports WS provider for Substrate and HTTP provider for EVM
    let result = {
      decimals: 0,
      existentialDeposit: '',
      paraId: null,
      symbol: '',
      success: false,
      genesisHash: '',
      addressPrefix: '',
      name: '',
      evmChainId: null
    };
    try {
      const {
        conflictChainName: providerConflictChainName,
        conflictChainSlug: providerConflictChainSlug,
        error: providerError
      } = this.validateProvider(provider, existingChainSlug);
      if (providerError === _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.NONE) {
        let api;

        // TODO: EVM chain might have WS provider
        if (provider.startsWith('http')) {
          // HTTP provider is EVM by default
          api = await this.evmChainHandler.initApi('custom', provider);
        } else {
          api = await this.substrateChainHandler.initApi('custom', provider);
        }
        const connectionTimeout = new Promise(resolve => {
          const id = setTimeout(() => {
            clearTimeout(id);
            resolve(null);
          }, 5000);
        });
        const connectionTrial = await Promise.race([connectionTimeout, api.isReady]); // check connection

        if (connectionTrial !== null) {
          let _api = connectionTrial;
          const chainSpec = await this.getChainSpecByProvider(_api);
          result = Object.assign(result, chainSpec);

          // TODO: disconnect and destroy API
          // @ts-ignore
          // eslint-disable-next-line @typescript-eslint/no-unsafe-call
          // _api?.api?.disconnect && await _api?.api?.disconnect();
          _api = null;
          if (existingChainSlug) {
            // check if same network (with existingChainSlug)
            const existedChainInfo = this.getChainInfoByKey(existingChainSlug);
            if (existedChainInfo.evmInfo !== null) {
              if (result.evmChainId !== existedChainInfo.evmInfo.evmChainId) {
                result.error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.PROVIDER_NOT_SAME_CHAIN;
              }
            } else if (existedChainInfo.substrateInfo !== null) {
              if (result.genesisHash !== existedChainInfo.substrateInfo.genesisHash) {
                result.error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.PROVIDER_NOT_SAME_CHAIN;
              }
            }
          } else {
            // check if network existed
            if (result.evmChainId !== null) {
              for (const chainInfo of Object.values(this.getEvmChainInfoMap())) {
                var _chainInfo$evmInfo;
                if ((chainInfo === null || chainInfo === void 0 ? void 0 : (_chainInfo$evmInfo = chainInfo.evmInfo) === null || _chainInfo$evmInfo === void 0 ? void 0 : _chainInfo$evmInfo.evmChainId) === result.evmChainId) {
                  result.error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.EXISTED_CHAIN;
                  result.conflictChain = chainInfo.name;
                  result.conflictKey = chainInfo.slug;
                  break;
                }
              }
            } else if (result.genesisHash !== '') {
              for (const chainInfo of Object.values(this.getSubstrateChainInfoMap())) {
                var _chainInfo$substrateI;
                if ((chainInfo === null || chainInfo === void 0 ? void 0 : (_chainInfo$substrateI = chainInfo.substrateInfo) === null || _chainInfo$substrateI === void 0 ? void 0 : _chainInfo$substrateI.genesisHash) === result.genesisHash) {
                  result.error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.EXISTED_CHAIN;
                  result.conflictChain = chainInfo.name;
                  result.conflictKey = chainInfo.slug;
                  break;
                }
              }
            }
          }
        } else {
          result.error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.CONNECTION_FAILURE;
          result.success = false;
        }
      } else {
        result.success = false;
        result.error = providerError;
        result.conflictChain = providerConflictChainName;
        result.conflictKey = providerConflictChainSlug;
      }
      if (!result.error && (result.evmChainId !== null || result.genesisHash !== '')) {
        result.success = true;
      }
      return result;
    } catch (e) {
      console.error('Error connecting to provider', e);
      result.success = false;
      result.error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.CONNECTION_FAILURE;
      return result;
    }
  }
  async getChainSpecByProvider(api) {
    if (api.api instanceof (web3__WEBPACK_IMPORTED_MODULE_0___default())) {
      return await this.evmChainHandler.getChainSpec(api);
    }
    return await this.substrateChainHandler.getChainSpec(api);
  }
  validateProvider(targetProvider, existingChainSlug) {
    let error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.NONE;
    const chainInfoMap = this.getChainInfoMap();
    const allExistedProviders = [];
    let conflictChainSlug = '';
    let conflictChainName = '';
    if (existingChainSlug) {
      const chainInfo = chainInfoMap[existingChainSlug];
      if (Object.values(chainInfo.providers).includes(targetProvider)) {
        error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.EXISTED_PROVIDER;
        conflictChainSlug = chainInfo.slug;
        conflictChainName = chainInfo.name;
      }
      return {
        error,
        conflictChainSlug,
        conflictChainName
      };
    }

    // get all providers
    for (const [key, value] of Object.entries(chainInfoMap)) {
      Object.values(value.providers).forEach(provider => {
        allExistedProviders.push({
          key,
          provider
        });
      });
    }
    for (const {
      key,
      provider
    } of allExistedProviders) {
      if (provider === targetProvider) {
        error = _subwallet_extension_base_services_chain_service_handler_types__WEBPACK_IMPORTED_MODULE_17__._CHAIN_VALIDATION_ERROR.EXISTED_PROVIDER;
        conflictChainSlug = key;
        conflictChainName = chainInfoMap[key].name;
        break;
      }
    }
    return {
      error,
      conflictChainSlug,
      conflictChainName
    };
  }
  async getSmartContractTokenInfo(contractAddress, tokenType, originChain, contractCaller) {
    if ([_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.ERC721, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.ERC20].includes(tokenType)) {
      return await this.evmChainHandler.getSmartContractTokenInfo(contractAddress, tokenType, originChain);
    } else if ([_subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.PSP34, _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_12__._AssetType.PSP22].includes(tokenType)) {
      return await this.substrateChainHandler.getSmartContractTokenInfo(contractAddress, tokenType, originChain, contractCaller);
    }
    return {
      decimals: -1,
      name: '',
      symbol: '',
      contractError: false
    };
  }
  async validateCustomToken(data) {
    const assetRegistry = this.getSmartContractTokens();
    let existedToken;
    for (const token of Object.values(assetRegistry)) {
      var _token$metadata2;
      const contractAddress = token === null || token === void 0 ? void 0 : (_token$metadata2 = token.metadata) === null || _token$metadata2 === void 0 ? void 0 : _token$metadata2.contractAddress;
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isEqualContractAddress)(contractAddress, data.contractAddress) && token.assetType === data.type && token.originChain === data.originChain) {
        existedToken = token;
        break;
      }
    }
    if (existedToken) {
      var _existedToken;
      return {
        decimals: existedToken.decimals || 0,
        name: existedToken.name,
        symbol: existedToken.symbol,
        isExist: !!existedToken,
        existedSlug: (_existedToken = existedToken) === null || _existedToken === void 0 ? void 0 : _existedToken.slug,
        contractError: false
      };
    }
    const {
      contractError,
      decimals,
      name,
      symbol
    } = await this.getSmartContractTokenInfo(data.contractAddress, data.type, data.originChain, data.contractCaller);
    return {
      name,
      decimals,
      symbol,
      isExist: !!existedToken,
      contractError
    };
  }
  generateSlugForSmartContractAsset(originChain, assetType, symbol, contractAddress) {
    return `${originChain}-${assetType}-${symbol}-${contractAddress}`;
  }
  generateSlugForNativeToken(originChain, assetType, symbol) {
    return `${originChain}-${assetType}-${symbol}`;
  }
  refreshSubstrateApi(slug) {
    this.substrateChainHandler.recoverApi(slug).catch(console.error);
  }
  refreshEvmApi(slug) {
    this.evmChainHandler.recoverApi(slug).catch(console.error);
  }
  async stopAllChainApis() {
    await Promise.all([this.substrateChainHandler.sleep(), this.evmChainHandler.sleep()]);
  }
  async resumeAllChainApis() {
    await Promise.all([this.substrateChainHandler.wakeUp(), this.evmChainHandler.wakeUp()]);
  }
  checkAndUpdateStatusMapForChain(chainSlug) {
    const substrateApiMap = this.getSubstrateApiMap();
    const evmApiMap = this.getEvmApiMap();
    const chainState = this.getChainStateByKey(chainSlug);
    let update = false;
    function updateState(current, status) {
      if (current.connectionStatus !== status) {
        current.connectionStatus = status;
        update = true;
      }
    }
    if (chainState.active) {
      const api = substrateApiMap[chainSlug] || evmApiMap[chainSlug];
      if (api) {
        updateState(chainState, api.isApiConnected ? _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.CONNECTED : _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED);
      }
    } else {
      updateState(chainState, _subwallet_extension_base_services_chain_service_types__WEBPACK_IMPORTED_MODULE_10__._ChainConnectionStatus.DISCONNECTED);
    }
    if (update) {
      this.dataMap.chainStateMap[chainSlug] = chainState;
    }
  }
  async initAssetSettings() {
    const assetSettings = await this.getAssetSettings();
    const activeChainSlugs = this.getActiveChainSlugs();
    const assetRegistry = this.getAssetRegistry();
    if (Object.keys(assetSettings).length === 0) {
      // only initiate the first time
      Object.values(assetRegistry).forEach(assetInfo => {
        const isSettingExisted = (assetInfo.slug in assetSettings);

        // Set visible for every enabled chains
        if (activeChainSlugs.includes(assetInfo.originChain) && !isSettingExisted) {
          // Setting only exist when set either by chain settings or user
          assetSettings[assetInfo.slug] = {
            visible: true
          };
        }
      });
      this.setAssetSettings(assetSettings, false);
    }
    this.eventService.emit('asset.ready', true);
  }
  setAssetSettings(assetSettings, emitEvent = true) {
    const updateAssets = [];
    if (emitEvent) {
      Object.keys(assetSettings).forEach(slug => {
        var _this$assetSettingSub;
        if (((_this$assetSettingSub = this.assetSettingSubject.value[slug]) === null || _this$assetSettingSub === void 0 ? void 0 : _this$assetSettingSub.visible) !== assetSettings[slug].visible) {
          updateAssets.push(slug);
        }
      });
    }
    this.assetSettingSubject.next(assetSettings);
    updateAssets.forEach(slug => {
      this.eventService.emit('asset.updateState', slug);
    });
    this.store.set('AssetSetting', assetSettings);
  }
  setMantaZkAssetSettings(visible) {
    const zkAssetSettings = {};
    Object.values(this.dataMap.assetRegistry).forEach(asset => {
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isMantaZkAsset)(asset)) {
        zkAssetSettings[asset.slug] = {
          visible
        };
      }
    });
    this.store.get('AssetSetting', storedAssetSettings => {
      const newAssetSettings = {
        ...storedAssetSettings,
        ...zkAssetSettings
      };
      this.store.set('AssetSetting', newAssetSettings);
      this.assetSettingSubject.next(newAssetSettings);
      Object.keys(zkAssetSettings).forEach(slug => {
        this.eventService.emit('asset.updateState', slug);
      });
    });
  }
  async getStoreAssetSettings() {
    return new Promise(resolve => {
      this.store.get('AssetSetting', resolve);
    });
  }
  async getAssetSettings() {
    if (Object.keys(this.assetSettingSubject.value).length === 0) {
      const assetSettings = (await this.getStoreAssetSettings()) || {};
      this.assetSettingSubject.next(assetSettings);
    }
    return this.assetSettingSubject.value;
  }
  async updateAssetSetting(assetSlug, assetSetting, autoEnableNativeToken) {
    const currentAssetSettings = await this.getAssetSettings();
    let needUpdateSubject;

    // Update settings
    currentAssetSettings[assetSlug] = assetSetting;
    if (assetSetting.visible) {
      const assetInfo = this.getAssetBySlug(assetSlug);
      const chainState = this.getChainStateByKey(assetInfo.originChain);

      // if chain not enabled, then automatically enable
      if (chainState && !chainState.active) {
        await this.enableChain(chainState.slug);
        needUpdateSubject = true;
        if (autoEnableNativeToken) {
          const nativeAsset = this.getNativeTokenInfo(assetInfo.originChain);
          currentAssetSettings[nativeAsset.slug] = {
            visible: true
          };
        }
      }
    }
    this.setAssetSettings(currentAssetSettings);
    return needUpdateSubject;
  }
  async updateAssetSettingByChain(chainSlug, visible) {
    const storedAssetSettings = await this.getAssetSettings();
    const assetsByChain = this.getFungibleTokensByChain(chainSlug);
    const assetSettings = storedAssetSettings || {};
    Object.values(assetsByChain).forEach(assetInfo => {
      assetSettings[assetInfo.slug] = {
        visible
      };
    });
    this.setAssetSettings(assetSettings);
  }
  subscribeAssetSettings() {
    return this.assetSettingSubject;
  }
  async getChainLogoMap() {
    return await this.fetchLatestData(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._CHAIN_LOGO_MAP_SRC, _custom_tokens_ChainLogoMap__WEBPACK_IMPORTED_MODULE_18__.ChainLogoMap);
  }
  async getAssetLogoMap() {
    return await this.fetchLatestData(_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._ASSET_LOGO_MAP_SRC, _custom_tokens_AssetLogoMap__WEBPACK_IMPORTED_MODULE_19__.AssetLogoMap);
  }
  resetWallet(resetAll) {
    if (resetAll) {
      this.setAssetSettings({});

      // Disconnect chain
      const activeChains = this.getActiveChainInfos();
      for (const chain of Object.keys(activeChains)) {
        if (!_subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_13__._DEFAULT_ACTIVE_CHAINS.includes(chain)) {
          this.disableChain(chain);
        }
      }

      // Remove custom chain
      const allChains = this.getChainInfoMap();
      for (const chain of Object.keys(allChains)) {
        if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isCustomChain)(chain)) {
          this.removeCustomChain(chain);
        }
      }

      // Remove custom asset
      const assetSettings = this.getAssetSettings();
      const customToken = [];
      for (const asset of Object.keys(assetSettings)) {
        if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_11__._isCustomAsset)(asset)) {
          customToken.push(asset);
        }
      }
      this.deleteCustomAssets(customToken);
    }
  }
  getMetadata(chain) {
    return this.dbService.stores.metadata.getMetadata(chain);
  }
  upsertMetadata(chain, metadata) {
    return this.dbService.stores.metadata.upsertMetadata(chain, metadata);
  }
  getMetadataByHash(hash) {
    return this.dbService.stores.metadata.getMetadataByGenesisHash(hash);
  }
}
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "../extension-base/src/services/event-service/index.ts":
/*!*************************************************************!*\
  !*** ../extension-base/src/services/event-service/index.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EventService": () => (/* binding */ EventService)
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ "../../node_modules/eventemitter3/index.mjs");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0

// Stateless service handle runtime event on background


class EventService extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__["default"] {
  pendingEvents = [];
  lazyEmitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_0__["default"]();
  constructor(options = {
    lazyTime: 300
  }) {
    super();
    this.lazyTime = options.lazyTime;
    this.timeoutId = null;
    this.waitCryptoReady = this.generateWaitPromise('crypto.ready');
    this.waitDatabaseReady = this.generateWaitPromise('database.ready');
    this.waitKeyringReady = this.generateWaitPromise('keyring.ready');
    this.waitAccountReady = this.generateWaitPromise('account.ready');
    this.waitChainReady = this.generateWaitPromise('chain.ready');
    this.waitAssetReady = this.generateWaitPromise('asset.ready');
  }
  generateWaitPromise(eventType) {
    return new Promise(resolve => {
      this.once(eventType, isReady => {
        resolve(isReady);
      });
    });
  }
  setLazyTimeout() {
    if (this.timeoutId) {
      clearTimeout(this.timeoutId);
    }
    this.timeoutId = setTimeout(() => {
      this.emitLazy();
    }, this.lazyTime);
  }
  emitLazy() {
    try {
      this.lazyEmitter.emit('lazy', this.pendingEvents, this.pendingEvents.map(e => e.type));
    } catch (e) {
      console.error('Get error in some listener of lazy event', e);
    }
    this.pendingEvents = [];
    this.timeoutId = null;
  }
  onLazy(callback) {
    this.lazyEmitter.on('lazy', callback);
  }
  offLazy(callback) {
    this.lazyEmitter.off('lazy', callback);
  }
  onceLazy(callback) {
    this.lazyEmitter.once('lazy', callback);
  }
  emit(eventType, ...args) {
    console.debug('Emit event: ', eventType, ...args);
    this.pendingEvents.push({
      type: eventType,
      data: args
    });
    this.setLazyTimeout();
    return super.emit(eventType, ...args);
  }
}

/***/ }),

/***/ "../extension-base/src/services/event-service/types.ts":
/*!*************************************************************!*\
  !*** ../extension-base/src/services/event-service/types.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "COMMON_RELOAD_EVENTS": () => (/* binding */ COMMON_RELOAD_EVENTS)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0

const COMMON_RELOAD_EVENTS = ['account.updateCurrent', 'asset.updateState', 'account.add', 'chain.updateState', 'account.remove', 'chain.add', 'mantaPay.initSync',
// TODO: re-check this
'mantaPay.enable'];

/***/ }),

/***/ "../extension-base/src/services/history-service/constants/index.ts":
/*!*************************************************************************!*\
  !*** ../extension-base/src/services/history-service/constants/index.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MAX_FETCH_PAGE_PER_SESSION": () => (/* binding */ MAX_FETCH_PAGE_PER_SESSION),
/* harmony export */   "MIN__NUM_HISTORY_PER_ACCOUNT": () => (/* binding */ MIN__NUM_HISTORY_PER_ACCOUNT)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0

const MAX_FETCH_PAGE_PER_SESSION = 25;
const MIN__NUM_HISTORY_PER_ACCOUNT = 50;

/***/ }),

/***/ "../extension-base/src/services/history-service/helpers/recoverHistoryStatus.ts":
/*!**************************************************************************************!*\
  !*** ../extension-base/src/services/history-service/helpers/recoverHistoryStatus.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryRecoverStatus": () => (/* binding */ HistoryRecoverStatus),
/* harmony export */   "historyRecover": () => (/* binding */ historyRecover)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


let HistoryRecoverStatus;
(function (HistoryRecoverStatus) {
  HistoryRecoverStatus["SUCCESS"] = "SUCCESS";
  HistoryRecoverStatus["FAILED"] = "FAILED";
  HistoryRecoverStatus["API_INACTIVE"] = "API_INACTIVE";
  HistoryRecoverStatus["LACK_INFO"] = "LACK_INFO";
  HistoryRecoverStatus["FAIL_DETECT"] = "FAIL_DETECT";
  HistoryRecoverStatus["UNKNOWN"] = "UNKNOWN";
})(HistoryRecoverStatus || (HistoryRecoverStatus = {}));
const BLOCK_LIMIT = 6;
const substrateRecover = async (history, chainService) => {
  const {
    address,
    blockHash,
    chain,
    extrinsicHash,
    from,
    nonce,
    startBlock
  } = history;
  const result = {
    status: HistoryRecoverStatus.UNKNOWN
  };
  try {
    const substrateApi = chainService.getSubstrateApi(chain);
    if (substrateApi) {
      const _api = await substrateApi.isReady;
      const api = _api.api;
      if (!blockHash) {
        if (!nonce || !startBlock) {
          console.log(`Fail to find extrinsic for ${address} on ${chain}: With nonce ${nonce || 'undefined'} from block ${startBlock || 'undefined'}`);
          return {
            status: HistoryRecoverStatus.LACK_INFO
          };
        }
        const currentBlock = (await api.query.system.number()).toPrimitive();
        for (let i = 1, found = false; i < BLOCK_LIMIT && !found && startBlock + i <= currentBlock; i++) {
          const blockHash = (await api.rpc.chain.getBlockHash(startBlock + i)).toHex();
          const block = await api.rpc.chain.getBlock(blockHash);
          const extrinsics = block.block.extrinsics;
          let index;
          for (const [idx, extrinsic] of Object.entries(extrinsics)) {
            if (extrinsic.signer && (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.isSameAddress)(from, extrinsic.signer.toString()) && nonce === extrinsic.nonce.toNumber()) {
              index = parseInt(idx);
              found = true;
              result.extrinsicHash = extrinsic.hash.toHex();
              result.blockHash = block.block.hash.toHex();
              result.blockNumber = block.block.header.number.toNumber();
              break;
            }
          }
          if (index !== undefined) {
            const allEvents = await api.query.system.events.at(blockHash);
            const events = allEvents.filter(({
              phase
            }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index));
            for (const {
              event
            } of events) {
              if (api.events.system.ExtrinsicSuccess.is(event)) {
                return {
                  ...result,
                  status: HistoryRecoverStatus.SUCCESS
                };
              } else if (api.events.system.ExtrinsicFailed.is(event)) {
                return {
                  ...result,
                  status: HistoryRecoverStatus.FAILED
                };
              }
            }
          }
        }
      } else {
        const block = await api.rpc.chain.getBlock(blockHash);
        const allEvents = await api.query.system.events.at(blockHash);
        const extrinsics = block.block.extrinsics;
        let index;
        for (const [idx, extrinsic] of Object.entries(extrinsics)) {
          if (extrinsicHash === extrinsic.hash.toHex()) {
            index = parseInt(idx);
            break;
          }
        }
        if (index === undefined) {
          console.log(`Fail to find extrinsic ${extrinsicHash} on ${chain}`);
          return {
            status: HistoryRecoverStatus.FAIL_DETECT
          };
        }
        const events = allEvents.filter(({
          phase
        }) => phase.isApplyExtrinsic && phase.asApplyExtrinsic.eq(index));
        for (const {
          event
        } of events) {
          if (api.events.system.ExtrinsicSuccess.is(event)) {
            return {
              ...result,
              status: HistoryRecoverStatus.SUCCESS
            };
          } else if (api.events.system.ExtrinsicFailed.is(event)) {
            return {
              ...result,
              status: HistoryRecoverStatus.FAILED
            };
          }
        }
      }
      return {
        status: HistoryRecoverStatus.FAIL_DETECT
      };
    } else {
      console.error(`Fail to update history ${chain}-${extrinsicHash}: Api not active`);
      return {
        status: HistoryRecoverStatus.API_INACTIVE
      };
    }
  } catch (e) {
    console.error(`Fail to update history ${chain}-${extrinsicHash}:`, e.message);
    return {
      status: HistoryRecoverStatus.UNKNOWN
    };
  }
};
const evmRecover = async (history, chainService) => {
  const {
    address,
    chain,
    extrinsicHash,
    from,
    nonce,
    startBlock
  } = history;
  const result = {
    status: HistoryRecoverStatus.UNKNOWN
  };
  try {
    const evmApi = chainService.getEvmApi(chain);
    if (evmApi) {
      const _api = await evmApi.isReady;
      const api = _api.api;
      if (extrinsicHash) {
        const transactionReceipt = await api.eth.getTransactionReceipt(extrinsicHash);
        return {
          ...result,
          status: transactionReceipt.status ? HistoryRecoverStatus.SUCCESS : HistoryRecoverStatus.FAILED
        };
      } else {
        if (!nonce || !startBlock) {
          console.log(`Fail to find extrinsic for ${address} on ${chain}: With nonce ${nonce || 'undefined'} from block ${startBlock || 'undefined'}`);
          return {
            ...result,
            status: HistoryRecoverStatus.LACK_INFO
          };
        }
        const currentBlock = await api.eth.getBlockNumber();
        for (let i = 1, found = false; i < BLOCK_LIMIT && !found && startBlock + i <= currentBlock; i++) {
          const block = await api.eth.getBlock(startBlock + i, true);
          for (const transaction of block.transactions) {
            if ((0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.isSameAddress)(transaction.from, from) && nonce === transaction.nonce) {
              result.extrinsicHash = transaction.hash;
              result.blockHash = block.hash;
              result.blockNumber = block.number;
              found = true;
              break;
            }
          }
          if (result.extrinsicHash) {
            const transactionReceipt = await api.eth.getTransactionReceipt(result.extrinsicHash);
            return {
              ...result,
              status: transactionReceipt.status ? HistoryRecoverStatus.SUCCESS : HistoryRecoverStatus.FAILED
            };
          }
        }
      }
      return {
        status: HistoryRecoverStatus.FAIL_DETECT
      };
    } else {
      console.error(`Fail to update history ${chain}-${extrinsicHash}: Api not active`);
      return {
        status: HistoryRecoverStatus.API_INACTIVE
      };
    }
  } catch (e) {
    console.error(`Fail to update history ${chain}-${extrinsicHash}:`, e.message);
    return {
      status: HistoryRecoverStatus.UNKNOWN
    };
  }
};

// undefined: Cannot check status
// true: Transaction success
// false: Transaction failed
const historyRecover = async (history, chainService) => {
  const {
    chainType
  } = history;
  if (chainType) {
    const checkFunction = chainType === 'substrate' ? substrateRecover : evmRecover;
    return await checkFunction(history, chainService);
  } else {
    return {
      status: HistoryRecoverStatus.LACK_INFO
    };
  }
};

/***/ }),

/***/ "../extension-base/src/services/history-service/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/services/history-service/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HistoryService": () => (/* binding */ HistoryService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/base/types */ "../extension-base/src/services/base/types.ts");
/* harmony import */ var _subwallet_extension_base_services_history_service_helpers_recoverHistoryStatus__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/history-service/helpers/recoverHistoryStatus */ "../extension-base/src/services/history-service/helpers/recoverHistoryStatus.ts");
/* harmony import */ var _subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/utils/promise */ "../extension-base/src/utils/promise.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/bundle.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _subsquid_multi_chain_history__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subsquid-multi-chain-history */ "../extension-base/src/services/history-service/subsquid-multi-chain-history.ts");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0









class HistoryService {
  historySubject = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject([]);
  #needRecoveryHistories = {};
  constructor(dbService, chainService, eventService, keyringService) {
    this.dbService = dbService;
    this.chainService = chainService;
    this.eventService = eventService;
    this.keyringService = keyringService;
    this.init().catch(console.error);
  }
  fetchPromise = null;
  interval = undefined;
  recoverInterval = undefined;
  async fetchAndLoadHistories(addresses) {
    if (!addresses || addresses.length === 0) {
      return [];
    }
    const chainMap = this.chainService.getChainInfoMap();

    // Query data from subscan or any indexer
    const historyRecords = await (0,_subsquid_multi_chain_history__WEBPACK_IMPORTED_MODULE_1__.fetchMultiChainHistories)(addresses, chainMap);

    // Fill additional info
    const accountMap = Object.entries(this.keyringService.accounts).reduce((map, [address, account]) => {
      map[address.toLowerCase()] = account.json.meta.name || address;
      return map;
    }, {});
    historyRecords.forEach(record => {
      var _record$from, _record$to;
      record.fromName = accountMap[(_record$from = record.from) === null || _record$from === void 0 ? void 0 : _record$from.toLowerCase()];
      record.toName = accountMap[(_record$to = record.to) === null || _record$to === void 0 ? void 0 : _record$to.toLowerCase()];
    });
    await this.addHistoryItems(historyRecords);
    return historyRecords;
  }
  async getHistories() {
    const addressList = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.getAccounts().map(a => a.address);
    if (!this.fetchPromise) {
      this.fetchPromise = (async () => {
        await this.fetchAndLoadHistories(addressList);
        const histories = await this.dbService.getHistories();
        this.historySubject.next(histories);
      })();
    }
    return Promise.resolve(this.historySubject.getValue());
  }
  async getHistorySubject() {
    await this.getHistories();
    return this.historySubject;
  }
  async updateHistories(chain, extrinsicHash, updateData) {
    const existedRecords = await this.dbService.getHistories({
      chain,
      extrinsicHash
    });
    const updatedRecords = existedRecords.map(r => {
      return {
        ...r,
        ...updateData
      };
    });
    await this.addHistoryItems(updatedRecords);
  }
  async updateHistoryByExtrinsicHash(extrinsicHash, updateData) {
    await this.dbService.updateHistoryByExtrinsicHash(extrinsicHash, updateData);
    this.historySubject.next(await this.dbService.getHistories());
  }

  // Insert history without check override origin 'app'
  async insertHistories(historyItems) {
    await this.dbService.upsertHistory(historyItems);
    this.historySubject.next(await this.dbService.getHistories());
  }

  // Insert history with check override origin 'app'
  async addHistoryItems(historyItems) {
    // Prevent override record with original is 'app'
    const appRecords = this.historySubject.value.filter(item => item.origin === 'app');
    const excludeKeys = appRecords.map(item => {
      return `${item.chain}-${item.extrinsicHash}`;
    });
    const updateRecords = historyItems.filter(item => {
      const key = `${item.chain}-${item.extrinsicHash}`;
      return item.origin === 'app' || !excludeKeys.includes(key);
    });
    await this.dbService.upsertHistory(updateRecords);
    this.historySubject.next(await this.dbService.getHistories());
  }
  async removeHistoryByAddress(address) {
    await this.dbService.stores.transaction.removeAllByAddress(address);
    this.historySubject.next(await this.dbService.getHistories());
  }
  status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.NOT_INITIALIZED;
  async loadData() {
    const histories = await this.dbService.getHistories();
    this.historySubject.next(histories);
  }
  async persistData() {
    await this.dbService.upsertHistory(this.historySubject.value);
  }
  async startCron() {
    await this.getHistories();
    this.interval = setInterval(() => {
      this.getHistories().catch(console.error);
    }, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_4__.CRON_REFRESH_HISTORY_INTERVAL);
  }
  stopCron() {
    clearTimeout(this.interval);
    this.fetchPromise = null;
    return Promise.resolve();
  }
  async startRecoverHistories() {
    await this.recoverHistories();
    this.recoverInterval = setInterval(() => {
      this.recoverHistories().catch(console.error);
    }, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_4__.CRON_RECOVER_HISTORY_INTERVAL);
  }
  stopRecoverHistories() {
    clearInterval(this.recoverInterval);
    return Promise.resolve();
  }
  async recoverHistories() {
    const list = [];
    for (const processingHistory of Object.values(this.#needRecoveryHistories)) {
      const chainState = this.chainService.getChainStateByKey(processingHistory.chain);
      if (chainState.active) {
        list.push(processingHistory);
      }
      if (list.length >= 10) {
        break;
      }
    }
    const promises = list.map(history => (0,_subwallet_extension_base_services_history_service_helpers_recoverHistoryStatus__WEBPACK_IMPORTED_MODULE_5__.historyRecover)(history, this.chainService));
    const results = await Promise.all(promises);
    results.forEach((recoverResult, index) => {
      const currentExtrinsicHash = list[index].extrinsicHash;
      const updateData = {
        ...recoverResult,
        status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_6__.ExtrinsicStatus.UNKNOWN
      };
      switch (recoverResult.status) {
        case _subwallet_extension_base_services_history_service_helpers_recoverHistoryStatus__WEBPACK_IMPORTED_MODULE_5__.HistoryRecoverStatus.API_INACTIVE:
          break;
        case _subwallet_extension_base_services_history_service_helpers_recoverHistoryStatus__WEBPACK_IMPORTED_MODULE_5__.HistoryRecoverStatus.FAILED:
        case _subwallet_extension_base_services_history_service_helpers_recoverHistoryStatus__WEBPACK_IMPORTED_MODULE_5__.HistoryRecoverStatus.SUCCESS:
          updateData.status = recoverResult.status === _subwallet_extension_base_services_history_service_helpers_recoverHistoryStatus__WEBPACK_IMPORTED_MODULE_5__.HistoryRecoverStatus.SUCCESS ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_6__.ExtrinsicStatus.SUCCESS : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_6__.ExtrinsicStatus.FAIL;
          this.updateHistoryByExtrinsicHash(currentExtrinsicHash, updateData).catch(console.error);
          delete this.#needRecoveryHistories[currentExtrinsicHash];
          break;
        default:
          this.updateHistoryByExtrinsicHash(currentExtrinsicHash, updateData).catch(console.error);
          delete this.#needRecoveryHistories[currentExtrinsicHash];
      }
    });
    if (!Object.keys(this.#needRecoveryHistories).length) {
      await this.stopRecoverHistories();
    }
  }
  startPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_7__.createPromiseHandler)();
  async init() {
    this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.INITIALIZING;
    await this.loadData();
    Promise.all([this.eventService.waitKeyringReady, this.eventService.waitChainReady]).then(() => {
      this.getHistories().catch(console.log);
      this.recoverProcessingHistory().catch(console.error);
      this.eventService.on('account.add', () => {
        (async () => {
          await this.stopCron();
          await this.startCron();
        })().catch(console.error);
      });
      this.eventService.on('account.remove', address => {
        this.removeHistoryByAddress(address).catch(console.error);
      });
    }).catch(console.error);
    this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.INITIALIZED;
  }
  async recoverProcessingHistory() {
    const histories = await this.dbService.getHistories();
    this.#needRecoveryHistories = {};
    histories.filter(history => {
      return [_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_6__.ExtrinsicStatus.PROCESSING, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_6__.ExtrinsicStatus.SUBMITTING].includes(history.status);
    }).forEach(history => {
      this.#needRecoveryHistories[history.extrinsicHash] = history;
    });
    const recoverNumber = Object.keys(this.#needRecoveryHistories).length;
    if (recoverNumber > 0) {
      console.log(`Recover ${recoverNumber} processing history`);
    }
    this.startRecoverHistories().catch(console.error);
  }
  async start() {
    if (this.status === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.STARTED) {
      return;
    }
    try {
      await Promise.all([this.eventService.waitKeyringReady, this.eventService.waitChainReady]);
      this.startPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_7__.createPromiseHandler)();
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.STARTING;
      await this.startCron();
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.STARTED;
      this.startPromiseHandler.resolve();
    } catch (e) {
      this.startPromiseHandler.reject(e);
    }
  }
  waitForStarted() {
    return this.startPromiseHandler.promise;
  }
  stopPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_7__.createPromiseHandler)();
  async stop() {
    try {
      this.stopPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_7__.createPromiseHandler)();
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.STOPPING;
      await this.persistData();
      await this.stopCron();
      await this.stopRecoverHistories();
      this.stopPromiseHandler.resolve();
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_3__.ServiceStatus.STOPPED;
    } catch (e) {
      this.stopPromiseHandler.reject(e);
    }
  }
  waitForStopped() {
    return this.stopPromiseHandler.promise;
  }
}

/***/ }),

/***/ "../extension-base/src/services/history-service/subsquid-multi-chain-history.ts":
/*!**************************************************************************************!*\
  !*** ../extension-base/src/services/history-service/subsquid-multi-chain-history.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubsquidTransactionType": () => (/* binding */ SubsquidTransactionType),
/* harmony export */   "fetchMultiChainHistories": () => (/* binding */ fetchMultiChainHistories),
/* harmony export */   "parseSubsquidTransactionData": () => (/* binding */ parseSubsquidTransactionData)
/* harmony export */ });
/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/client */ "../../node_modules/@apollo/client/core/ApolloClient.js");
/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/client */ "../../node_modules/@apollo/client/cache/inmemory/inMemoryCache.js");
/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @apollo/client */ "../../node_modules/@apollo/client/link/http/createHttpLink.js");
/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @apollo/client */ "../../node_modules/graphql-tag/lib/index.js");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_services_history_service_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/services/history-service/constants */ "../extension-base/src/services/history-service/constants/index.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/array.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/decode.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/encode.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0







const MULTI_CHAIN_URL = 'https://squid.subsquid.io/multi-chain-tx/v/v1/graphql';
const MultiChainTxClient = new _apollo_client__WEBPACK_IMPORTED_MODULE_1__.ApolloClient({
  cache: new _apollo_client__WEBPACK_IMPORTED_MODULE_2__.InMemoryCache(),
  link: (0,_apollo_client__WEBPACK_IMPORTED_MODULE_3__.createHttpLink)({
    uri: MULTI_CHAIN_URL,
    fetch: (cross_fetch__WEBPACK_IMPORTED_MODULE_0___default())
  })
});
const query = _apollo_client__WEBPACK_IMPORTED_MODULE_4__.gql`query transactionQuery($addresses: [String!], $olderThanId: String) {
  transactionsByAddress(addresses: $addresses, olderThanId: $olderThanId) {
    _data
    args
    chainId
    id
    name
    signer
    blockNumber
    blockHash
    timestamp
    relatedAddresses
  }
}`;
let SubsquidTransactionType;
(function (SubsquidTransactionType) {
  SubsquidTransactionType["BalanceTransfer"] = "Balances.Transfer";
  SubsquidTransactionType["EthereumExecuted"] = "Ethereum.Executed";
  SubsquidTransactionType["StakingBonded"] = "Staking.Bonded";
  SubsquidTransactionType["CrowdloanContributed"] = "Crowdloan.Contributed";
})(SubsquidTransactionType || (SubsquidTransactionType = {}));
const HISTORY_SUPPORT_TYPES = [SubsquidTransactionType.BalanceTransfer, SubsquidTransactionType.EthereumExecuted, SubsquidTransactionType.StakingBonded
// SubsquidTransactionType.CrowdloanContributed // Not support because data indexer not enough data
];

function parseData(anyData) {
  try {
    return JSON.parse(anyData);
  } catch (e) {
    return undefined;
  }
}
function autoFormatAddress(address) {
  try {
    if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.isEthereumAddress)(address)) {
      return address;
    } else {
      const decoded = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_6__.decodeAddress)(address);
      return (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_7__.encodeAddress)(decoded, 42);
    }
  } catch (e) {
    return '';
  }
}
function generateSignature(input) {
  if (!input) {
    return '';
  }
  const {
    r,
    s,
    v
  } = input;
  const rHex = r.startsWith('0x') ? r.slice(2) : r;
  const sHex = s.startsWith('0x') ? s.slice(2) : s;
  const vHex = parseInt(v).toString(16);
  return `0x${rHex}${sHex}${vHex}`;
}
const parseArgs = args => {
  if ((0,_polkadot_util__WEBPACK_IMPORTED_MODULE_8__.isArray)(args)) {
    return {
      from: args[0],
      to: args[1],
      amount: args[2]
    };
  } else {
    return args;
  }
};
function parseSubsquidTransactionData(address, type, historyItem, chainInfo, args, data) {
  var _chainInfo$substrateI, _chainInfo$evmInfo, _chainInfo$substrateI2, _chainInfo$evmInfo2;
  const chainType = chainInfo.substrateInfo ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ChainType.SUBSTRATE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ChainType.EVM;
  const nativeDecimals = ((_chainInfo$substrateI = chainInfo.substrateInfo) === null || _chainInfo$substrateI === void 0 ? void 0 : _chainInfo$substrateI.decimals) || ((_chainInfo$evmInfo = chainInfo.evmInfo) === null || _chainInfo$evmInfo === void 0 ? void 0 : _chainInfo$evmInfo.decimals) || 18;
  const nativeSymbol = ((_chainInfo$substrateI2 = chainInfo.substrateInfo) === null || _chainInfo$substrateI2 === void 0 ? void 0 : _chainInfo$substrateI2.symbol) || ((_chainInfo$evmInfo2 = chainInfo.evmInfo) === null || _chainInfo$evmInfo2 === void 0 ? void 0 : _chainInfo$evmInfo2.symbol) || '';
  let from = historyItem.signer;
  let to = address === historyItem.signer ? historyItem.relatedAddresses.find(a => a !== historyItem.signer) || '' : address;
  let amount = '0';
  let fee = '0';
  let tip = '0';
  let transactionType = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ExtrinsicType.UNKNOWN;
  let extrinsicHash = '';
  let signature = '';
  let success = false;
  switch (type) {
    // Parsed Transfer
    case SubsquidTransactionType.BalanceTransfer:
      {
        transactionType = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ExtrinsicType.TRANSFER_BALANCE;
        const extrinsic = data.extrinsic;
        const parsedArgs = parseArgs(args);
        to = autoFormatAddress(parsedArgs.to);
        from = autoFormatAddress(parsedArgs.from);
        amount = parsedArgs.amount;
        fee = extrinsic.fee;
        tip = extrinsic.tip;
        extrinsicHash = extrinsic.hash;
        signature = extrinsic.signature;
        success = extrinsic.success;
        break;
      }
    case SubsquidTransactionType.EthereumExecuted:
      {
        // Parsed EVM Transaction
        transactionType = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ExtrinsicType.EVM_EXECUTE;
        const extrinsic = data.extrinsic;
        const parsedArgs = args;
        const transaction = data.call.data.args.transaction.value;
        to = autoFormatAddress(parsedArgs.to);
        from = autoFormatAddress(parsedArgs.from || address);
        extrinsicHash = parsedArgs.transactionHash || extrinsic.hash;
        amount = transaction.value || '0';
        fee = (parseInt(transaction.gasPrice) * parseInt(transaction.gasLimit)).toString();
        signature = generateSignature(transaction.signature);
        success = extrinsic.success;

        // Special fix for moonbeam
        if ((historyItem.chainId === 'moonbeam' || historyItem.chainId === 'moonriver') && typeof amount === 'object') {
          amount = amount[0];
        }
        break;
      }

    // Parsed Stake
    case SubsquidTransactionType.CrowdloanContributed:
      {
        transactionType = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ExtrinsicType.CROWDLOAN;
        const callData = data.call.data.args;
        const extrinsic = data.extrinsic;
        to = autoFormatAddress('');
        extrinsicHash = extrinsic.hash;
        amount = callData.value;
        fee = extrinsic.fee;
        signature = extrinsic.signature;
        success = extrinsic.success;
        break;
      }
    case SubsquidTransactionType.StakingBonded:
      {
        transactionType = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ExtrinsicType.STAKING_BOND;
        const callData = data.call.data.args;
        const extrinsic = data.extrinsic;
        to = autoFormatAddress('');
        extrinsicHash = extrinsic.hash;
        amount = callData.value;
        fee = extrinsic.fee;
        signature = extrinsic.signature;
        success = extrinsic.success;
        break;
      }
  }
  function toTimestamp(input) {
    try {
      if (typeof input === 'string') {
        return new Date(input).getTime();
      } else {
        return input;
      }
    } catch (e) {
      return 0;
    }
  }
  return {
    address,
    origin: 'subsquid',
    time: toTimestamp(historyItem.timestamp),
    chainType,
    from,
    direction: address === from ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.TransactionDirection.SEND : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.TransactionDirection.RECEIVED,
    blockNumber: historyItem.blockNumber,
    blockHash: historyItem.blockHash,
    chain: historyItem.chainId,
    data: historyItem._data,
    type: transactionType,
    to,
    signature,
    extrinsicHash,
    amount: {
      value: amount,
      decimals: nativeDecimals,
      symbol: nativeSymbol
    },
    fee: {
      value: fee,
      decimals: nativeDecimals,
      symbol: nativeSymbol
    },
    tip: {
      value: tip,
      decimals: nativeDecimals,
      symbol: nativeSymbol
    },
    status: success ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ExtrinsicStatus.SUCCESS : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.ExtrinsicStatus.FAIL
  };
}
async function fetchMultiChainHistories(addresses, chainMap, maxPage = _subwallet_extension_base_services_history_service_constants__WEBPACK_IMPORTED_MODULE_10__.MAX_FETCH_PAGE_PER_SESSION, countMap = {}, _lastId) {
  const responseData = [];
  let currentPage = 0;
  let lastId = _lastId;
  while (true) {
    try {
      if (maxPage) {
        if (currentPage >= maxPage) {
          break;
        }
        currentPage++;
      }
      const response = await MultiChainTxClient.query({
        query,
        variables: {
          addresses,
          olderThanId: lastId
        }
      });
      const needProcessedData = response.data.transactionsByAddress || [];
      if (needProcessedData.length > 0) {
        lastId = response.data.transactionsByAddress[needProcessedData.length - 1].id;
        responseData.push(...needProcessedData);
      } else {
        break;
      }
    } catch (e) {
      break;
    }
  }
  const histories = [];
  const lowerAddresses = addresses.map(a => a.toLowerCase());
  for (const lowerAddress of lowerAddresses) {
    countMap[lowerAddress] = countMap[lowerAddress] || 0;
  }
  responseData.forEach(historyItem => {
    const {
      _data,
      args,
      chainId,
      name,
      relatedAddresses
    } = historyItem;

    // Ignore not support type
    if (!HISTORY_SUPPORT_TYPES.includes(name)) {
      return;
    }
    const usedAddresses = relatedAddresses.filter(a => lowerAddresses.includes(a.toLowerCase()));
    const chainInfo = chainMap[chainId];
    if (chainInfo === undefined) {
      console.debug(`Not found chain info for chain id: ${chainId}`); // TODO: resolve conflicting chainId

      return;
    }
    usedAddresses.forEach(address => {
      const adr = address.toLowerCase();
      countMap[adr] = (countMap[adr] || 0) + 1;
    });
    usedAddresses.forEach(address => {
      try {
        const transactionData = parseSubsquidTransactionData(address, name, historyItem, chainInfo, parseData(args), parseData(_data));
        histories.push(transactionData);
      } catch (e) {
        console.debug('Parse transaction data failed', address, e);
      }
    });
  });
  if (currentPage > 1) {
    const retryAddresses = [];
    for (const [address, number] of Object.entries(countMap)) {
      if (number < _subwallet_extension_base_services_history_service_constants__WEBPACK_IMPORTED_MODULE_10__.MIN__NUM_HISTORY_PER_ACCOUNT) {
        retryAddresses.push(address);
      }
    }
    const _addresses = addresses.filter(add => retryAddresses.includes(add.toLowerCase()));
    if (_addresses.length > 0) {
      const retryHistories = await fetchMultiChainHistories(_addresses, chainMap, maxPage, countMap, lastId);
      histories.push(...retryHistories);
    }
  }
  return histories;
}

/***/ }),

/***/ "../extension-base/src/services/keyring-service/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/services/keyring-service/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KeyringService": () => (/* binding */ KeyringService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores */ "../extension-base/src/stores/CurrentAccountStore.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/bundle.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/string/shorten.js");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0






class KeyringService {
  currentAccountStore = new _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_0__["default"]();
  currentAccountSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject({
    address: '',
    currentGenesisHash: null
  });
  addressesSubject = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.addresses.subject;
  accountSubject = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.accounts.subject;
  beforeAccount = this.accountSubject.value;
  keyringStateSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject({
    isReady: false,
    hasMasterPassword: false,
    isLocked: false
  });
  constructor(eventService) {
    this.eventService = eventService;
    this.currentAccountStore.get('CurrentAccountInfo', rs => {
      rs && this.currentAccountSubject.next(rs);
    });
    this.subscribeAccounts().catch(console.error);
  }
  async subscribeAccounts() {
    // Wait until account ready
    await this.eventService.waitAccountReady;
    this.beforeAccount = {
      ...this.accountSubject.value
    };
    this.accountSubject.subscribe(subjectInfo => {
      // Check if accounts changed
      const beforeAddresses = Object.keys(this.beforeAccount);
      const afterAddresses = Object.keys(subjectInfo);
      if (beforeAddresses.length > afterAddresses.length) {
        const removedAddresses = beforeAddresses.filter(address => !afterAddresses.includes(address));

        // Remove account
        removedAddresses.forEach(address => {
          this.eventService.emit('account.remove', address);
        });
      } else if (beforeAddresses.length < afterAddresses.length) {
        const addedAddresses = afterAddresses.filter(address => !beforeAddresses.includes(address));

        // Add account
        addedAddresses.forEach(address => {
          this.eventService.emit('account.add', address);
        });
      } else {
        // Handle case update later
      }
      this.beforeAccount = {
        ...subjectInfo
      };
    });
  }
  get keyringState() {
    return this.keyringStateSubject.value;
  }
  updateKeyringState(isReady = true) {
    var _keyring$keyring, _keyring$keyring2;
    if (!this.keyringState.isReady && isReady) {
      this.eventService.emit('keyring.ready', true);
      this.eventService.emit('account.ready', true);
    }
    this.keyringStateSubject.next({
      hasMasterPassword: !!((_keyring$keyring = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.keyring) !== null && _keyring$keyring !== void 0 && _keyring$keyring.hasMasterPassword),
      isLocked: !!((_keyring$keyring2 = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.keyring) !== null && _keyring$keyring2 !== void 0 && _keyring$keyring2.isLocked),
      isReady: isReady
    });
  }
  get accounts() {
    return this.accountSubject.value;
  }
  get addresses() {
    return this.addressesSubject.value;
  }
  get currentAccount() {
    return this.currentAccountSubject.value;
  }
  setCurrentAccount(currentAccountData) {
    this.currentAccountSubject.next(currentAccountData);
    this.eventService.emit('account.updateCurrent', currentAccountData);
    this.currentAccountStore.set('CurrentAccountInfo', currentAccountData);
  }
  lock() {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.lockAll();
    this.updateKeyringState();
  }

  /* Inject */

  addInjectAccounts(accounts) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.addInjects(accounts.map(account => {
      const name = account.meta.name || (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__.stringShorten)(account.address);

      // TODO: Add if need
      // name = name.concat(' (', account.meta.source, ')');

      return {
        ...account,
        meta: {
          ...account.meta,
          name: name
        }
      };
    }));
    const currentAddress = this.currentAccountSubject.value.address;
    const afterAccounts = {};
    Object.keys(this.accounts).forEach(adr => {
      afterAccounts[adr] = true;
    });
    accounts.forEach(value => {
      afterAccounts[value.address] = true;
    });
    if (Object.keys(afterAccounts).length === 1) {
      this.currentAccountSubject.next({
        address: Object.keys(afterAccounts)[0],
        currentGenesisHash: null
      });
    } else if (Object.keys(afterAccounts).indexOf(currentAddress) === -1) {
      this.currentAccountSubject.next({
        address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_4__.ALL_ACCOUNT_KEY,
        currentGenesisHash: null
      });
    }
  }
  removeInjectAccounts(addresses) {
    const currentAddress = this.currentAccountSubject.value.address;
    const afterAccounts = Object.keys(this.accounts).filter(address => addresses.indexOf(address) < 0);
    if (afterAccounts.length === 1) {
      this.currentAccountSubject.next({
        address: afterAccounts[0],
        currentGenesisHash: null
      });
    } else if (addresses.indexOf(currentAddress) === -1) {
      this.currentAccountSubject.next({
        address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_4__.ALL_ACCOUNT_KEY,
        currentGenesisHash: null
      });
    }
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.removeInjects(addresses);
  }

  /* Inject */

  /* Reset */
  async resetWallet(resetAll) {
    _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_2__.keyring.resetWallet(resetAll);
    await new Promise(resolve => {
      setTimeout(() => {
        resolve();
      }, 500);
    });
    this.updateKeyringState();
    this.currentAccountSubject.next({
      address: _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_4__.ALL_ACCOUNT_KEY,
      currentGenesisHash: null
    });
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/Base.ts":
/*!****************************************************************!*\
  !*** ../extension-base/src/services/migration-service/Base.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseMigrationJob)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class BaseMigrationJob {
  constructor(state) {
    this.state = state;
    this.logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__.logger)(this.constructor.name);
  }
  run() {
    return Promise.resolve(console.warn('Need to override function run from base.'));
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/index.ts":
/*!*****************************************************************!*\
  !*** ../extension-base/src/services/migration-service/index.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrationService)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
/* harmony import */ var _scripts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts */ "../extension-base/src/services/migration-service/scripts/index.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MigrationService {
  constructor(state) {
    this.state = state;
    this.logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__.logger)('Migration');
  }
  async run() {
    const keys = Object.keys(_scripts__WEBPACK_IMPORTED_MODULE_1__["default"]).sort((a, b) => a.localeCompare(b));
    for (let i = 0; i < keys.length; i++) {
      try {
        const JobClass = _scripts__WEBPACK_IMPORTED_MODULE_1__["default"][keys[i]];
        const key = keys[i];
        const name = JobClass.name;
        const check = await this.state.dbService.stores.migration.table.where({
          name,
          key
        }).first();
        if (!check || key.startsWith(_scripts__WEBPACK_IMPORTED_MODULE_1__.EVERYTIME)) {
          const job = new JobClass(this.state);
          await job.run();
          await this.state.dbService.stores.migration.table.put({
            key,
            name,
            timestamp: new Date().getTime()
          });
        }
      } catch (error) {
        this.logger.error('Migration error: ', _scripts__WEBPACK_IMPORTED_MODULE_1__["default"][keys[i]].name, error);
      }
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/AutoEnableChainsTokens.ts":
/*!******************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/AutoEnableChainsTokens.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AutoEnableChainsTokens)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/bundle.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class AutoEnableChainsTokens extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    const accounts = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_1__.keyring.getAccounts();
    await this.state.autoEnableChains(accounts.map(({
      address
    }) => address));
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/DeleteChain.ts":
/*!*******************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/DeleteChain.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DeleteChain)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class DeleteChain extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  // eslint-disable-next-line @typescript-eslint/require-await
  async run() {
    ['snow', 'snow_evm', 'arctic_testnet'].forEach(chain => {
      this.state.forceRemoveChain(chain);
    });
    console.log('done job');
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/EnableChain.ts":
/*!*******************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/EnableChain.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EnableChain)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class EnableChain extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    const state = this.state;
    await state.enableChain(this.slug, true);
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/EnableVaraChain.ts":
/*!***********************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/EnableVaraChain.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EnableVaraChain)
/* harmony export */ });
/* harmony import */ var _EnableChain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./EnableChain */ "../extension-base/src/services/migration-service/scripts/EnableChain.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class EnableVaraChain extends _EnableChain__WEBPACK_IMPORTED_MODULE_0__["default"] {
  slug = 'vara_network';
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateAuthUrls.ts":
/*!***********************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateAuthUrls.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateSettings)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class MigrateSettings extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    try {
      return new Promise(resolve => {
        this.state.getAuthorize(value => {
          if (value) {
            const key = 'app.stellaswap.com';
            const stellaSwap = value[key];
            if (stellaSwap) {
              stellaSwap.currentEvmNetworkKey = 'moonbeam';
              value[key] = stellaSwap;
              this.state.setAuthorize(value, () => {
                resolve();
              });
            } else {
              resolve();
            }
          } else {
            resolve();
          }
        });
      });
    } catch (e) {
      console.error(e);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateAutoLock.ts":
/*!***********************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateAutoLock.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateAutoLock)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
/* harmony import */ var _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/setting-service/constants */ "../extension-base/src/services/setting-service/constants.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MigrateAutoLock extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    try {
      return new Promise(resolve => {
        this.state.settingService.getSettings(currentSettings => {
          this.state.settingService.setSettings({
            ...currentSettings,
            timeAutoLock: _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_AUTO_LOCK_TIME
          });
          resolve();
        });
      });
    } catch (e) {
      console.error(e);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateChainPatrol.ts":
/*!**************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateChainPatrol.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateChainPatrol)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
/* harmony import */ var _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/setting-service/constants */ "../extension-base/src/services/setting-service/constants.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MigrateChainPatrol extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    try {
      return new Promise(resolve => {
        this.state.settingService.getSettings(currentSettings => {
          this.state.settingService.setSettings({
            ...currentSettings,
            enableChainPatrol: _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_CHAIN_PATROL_ENABLE
          });
          resolve();
        });
      });
    } catch (e) {
      console.error(e);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateEthProvider.ts":
/*!**************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateEthProvider.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateEthProvider)
/* harmony export */ });
/* harmony import */ var _MigrateProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MigrateProvider */ "../extension-base/src/services/migration-service/scripts/MigrateProvider.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class MigrateEthProvider extends _MigrateProvider__WEBPACK_IMPORTED_MODULE_0__["default"] {
  newProvider = 'ethereum';
  oldProvider = 'Cloudflare';
  slug = 'Llamarpc';
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateImportedToken.ts":
/*!****************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateImportedToken.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateImportedToken)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class MigrateImportedToken extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    const state = this.state;
    return new Promise((resolve, reject) => {
      chrome.storage.local.get('EvmToken', function (items) {
        if (items && items.EvmToken) {
          const tokenMap = items.EvmToken;
          Object.entries(tokenMap).forEach(([t, tokenList]) => {
            tokenList.forEach(item => {
              try {
                item.isCustom && state.chainService.upsertCustomToken({
                  assetType: t.toUpperCase(),
                  decimals: item.decimals ? parseInt(item.decimals.toString()) : null,
                  hasValue: true,
                  metadata: {
                    contractAddress: item.smartContract
                  },
                  minAmount: '0',
                  multiChainAsset: null,
                  name: item.name,
                  originChain: item.chain,
                  priceId: null,
                  slug: '',
                  symbol: item.symbol || '',
                  icon: ''
                });
              } catch (e) {
                console.log(e);
              }
            });
          });
        }
        resolve();
      });
    });
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateLedgerAccount.ts":
/*!****************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateLedgerAccount.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateLedgerAccount)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
/* harmony import */ var _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/stores */ "../extension-base/src/stores/Accounts.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/string.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0




class MigrateLedgerAccount extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    try {
      return new Promise(resolve => {
        const store = new _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_1__["default"]();
        const update = (key, value) => {
          var _value$meta;
          if (key.startsWith('account:') && value.meta && (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_2__.isString)((_value$meta = value.meta) === null || _value$meta === void 0 ? void 0 : _value$meta.originGenesisHash)) {
            const newValue = {
              ...value
            };
            newValue.meta.availableGenesisHashes = [value.meta.originGenesisHash];
            store.set(key, newValue);
          }
        };
        store.allMap(map => {
          Object.entries(map).forEach(([key, value]) => {
            update(key, value);
          });
          resolve();
        });
      });
    } catch (e) {
      console.error(e);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateNetworkSettings.ts":
/*!******************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateNetworkSettings.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateNetworkSettings)
/* harmony export */ });
/* harmony import */ var _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/chain-list/types */ "../../node_modules/@subwallet/chain-list/types.js");
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MigrateNetworkSettings extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    const state = this.state;
    const items = await new Promise(resolve => {
      chrome.storage.local.get('NetworkMap', items => {
        resolve(items);
      });
    });
    const oldNetworkMap = items.NetworkMap;
    const enableList = [];
    const stateMap = state.getChainStateMap();
    if (!oldNetworkMap) {
      return;
    }
    Object.entries(oldNetworkMap).forEach(([slug, chain]) => {
      if (chain.active) {
        const currentState = stateMap[slug];

        // Ensure chain in the list and is not active
        currentState && enableList.push(slug);
      }
    });
    if (enableList.length > 0) {
      await state.chainService.enableChains(enableList);

      // Enable native token of these chains
      const currentAssetSettings = await state.chainService.getAssetSettings();
      const assetInfoMap = state.chainService.getAssetRegistry();
      Object.entries(assetInfoMap).forEach(([slug, assetInfo]) => {
        const assetSetting = currentAssetSettings[slug] || {};

        // Enable native token of these chains
        if (assetInfo.name && assetInfo.assetType === _subwallet_chain_list_types__WEBPACK_IMPORTED_MODULE_1__._AssetType.NATIVE && enableList.includes(assetInfo.originChain) && !assetSetting.visible) {
          currentAssetSettings[slug] = {
            visible: true
          };
        }
      });
      state.chainService.setAssetSettings({
        ...currentAssetSettings
      });
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigratePioneerProvider.ts":
/*!******************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigratePioneerProvider.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigratePioneerProvider)
/* harmony export */ });
/* harmony import */ var _MigrateProvider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MigrateProvider */ "../extension-base/src/services/migration-service/scripts/MigrateProvider.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class MigratePioneerProvider extends _MigrateProvider__WEBPACK_IMPORTED_MODULE_0__["default"] {
  slug = 'pioneer';
  oldProvider = 'OnFinality';
  newProvider = 'Pioneer';
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateProvider.ts":
/*!***********************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateProvider.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateProvider)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


class MigrateProvider extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    const state = this.state;
    const chainState = state.getChainStateByKey(this.slug);
    const chainInfo = state.getChainInfo(this.slug);
    if (chainState.active && chainState.currentProvider === this.oldProvider) {
      await state.upsertChainInfo({
        mode: 'update',
        chainEditInfo: {
          currentProvider: this.newProvider,
          slug: this.slug,
          providers: chainInfo.providers
        }
      });
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateSettings.ts":
/*!***********************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateSettings.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateSettings)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
/* harmony import */ var _polkadot_ui_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/ui-settings */ "../../node_modules/@polkadot/ui-settings/index.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MigrateSettings extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    try {
      return new Promise(resolve => {
        this.state.settingService.getSettings(currentSettings => {
          const isAccessCamera = _polkadot_ui_settings__WEBPACK_IMPORTED_MODULE_1__["default"].camera === 'on';
          this.state.settingService.setSettings({
            ...currentSettings,
            camera: isAccessCamera
          });
          resolve();
        });
      });
    } catch (e) {
      console.error(e);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateTokenDecimals.ts":
/*!****************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateTokenDecimals.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateTokenDecimals)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MigrateTokenDecimals extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    const state = this.state;
    return new Promise(resolve => {
      const assetMap = state.getAssetRegistry();
      for (const [slug, info] of Object.entries(assetMap)) {
        if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_1__._isCustomAsset)(slug)) {
          state.chainService.upsertCustomToken({
            ...info,
            decimals: info.decimals ? parseInt(info.decimals.toString()) : info.decimals
          });
        }
      }
      resolve();
    });
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateTransactionHistory.ts":
/*!*********************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateTransactionHistory.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateTransactionHistory)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0






class MigrateTransactionHistory extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_1__["default"] {
  async run() {
    const state = this.state;
    const chainInfoMap = state.getChainInfoMap();
    const assetList = Object.values(state.getAssetRegistry());
    try {
      const db = new dexie__WEBPACK_IMPORTED_MODULE_0__["default"]('SubWalletDB');
      const dexieDB = await db.open();
      const transactionTable = dexieDB.table('transactions');
      const oldTransactionData = await transactionTable.toArray();
      const newTransactionItems = [];
      oldTransactionData.forEach(item => {
        const chainInfo = chainInfoMap[item.networkKey];
        if (!chainInfo) {
          return;
        }
        const direction = item.action === 'send' ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.TransactionDirection.SEND : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.TransactionDirection.RECEIVED;
        const extrinsicType = item.changeSymbol === item.feeSymbol ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ExtrinsicType.TRANSFER_BALANCE : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ExtrinsicType.TRANSFER_TOKEN;
        const nativeAsset = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_3__._getChainNativeTokenBasicInfo)(chainInfo);
        const transferAsset = assetList.find(a => a.originChain === item.networkKey && a.symbol === item.changeSymbol) || nativeAsset;
        const newItem = {
          chain: item.networkKey,
          origin: 'migration',
          type: extrinsicType,
          address: item.address,
          extrinsicHash: item.extrinsicHash,
          time: item.time,
          status: item.isSuccess ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ExtrinsicStatus.SUCCESS : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ExtrinsicStatus.FAIL,
          from: direction === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.TransactionDirection.SEND ? item.address : '',
          to: direction === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.TransactionDirection.RECEIVED ? item.address : '',
          amount: {
            value: item.change,
            decimals: transferAsset.decimals || 18,
            symbol: transferAsset.symbol
          },
          fee: {
            value: item.fee,
            decimals: nativeAsset.decimals,
            symbol: nativeAsset.symbol
          },
          direction: direction,
          chainType: (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_4__.isEthereumAddress)(item.address) ? _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ChainType.EVM : _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.ChainType.SUBSTRATE,
          chainName: chainInfo.name,
          blockNumber: 0,
          blockHash: '',
          data: '',
          signature: ''
        };
        newTransactionItems.push(newItem);
      });
      await state.historyService.addHistoryItems(newTransactionItems);
    } catch (e) {
      this.logger.error(e);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/MigrateWalletReference.ts":
/*!******************************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/MigrateWalletReference.ts ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrateWalletReference)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/Base */ "../extension-base/src/services/migration-service/Base.ts");
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ "../../node_modules/uuid/dist/esm-browser/v4.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MigrateWalletReference extends _subwallet_extension_base_services_migration_service_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async run() {
    try {
      return new Promise(resolve => {
        this.state.settingService.getSettings(currentSettings => {
          const walletReference = (0,uuid__WEBPACK_IMPORTED_MODULE_1__["default"])();
          this.state.settingService.setSettings({
            ...currentSettings,
            walletReference: walletReference
          });
          resolve();
        });
      });
    } catch (e) {
      console.error(e);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/migration-service/scripts/index.ts":
/*!*************************************************************************!*\
  !*** ../extension-base/src/services/migration-service/scripts/index.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EVERYTIME": () => (/* binding */ EVERYTIME),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_migration_service_scripts_DeleteChain__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/services/migration-service/scripts/DeleteChain */ "../extension-base/src/services/migration-service/scripts/DeleteChain.ts");
/* harmony import */ var _AutoEnableChainsTokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AutoEnableChainsTokens */ "../extension-base/src/services/migration-service/scripts/AutoEnableChainsTokens.ts");
/* harmony import */ var _EnableVaraChain__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./EnableVaraChain */ "../extension-base/src/services/migration-service/scripts/EnableVaraChain.ts");
/* harmony import */ var _MigrateAuthUrls__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MigrateAuthUrls */ "../extension-base/src/services/migration-service/scripts/MigrateAuthUrls.ts");
/* harmony import */ var _MigrateAutoLock__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./MigrateAutoLock */ "../extension-base/src/services/migration-service/scripts/MigrateAutoLock.ts");
/* harmony import */ var _MigrateChainPatrol__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./MigrateChainPatrol */ "../extension-base/src/services/migration-service/scripts/MigrateChainPatrol.ts");
/* harmony import */ var _MigrateEthProvider__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./MigrateEthProvider */ "../extension-base/src/services/migration-service/scripts/MigrateEthProvider.ts");
/* harmony import */ var _MigrateImportedToken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./MigrateImportedToken */ "../extension-base/src/services/migration-service/scripts/MigrateImportedToken.ts");
/* harmony import */ var _MigrateLedgerAccount__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./MigrateLedgerAccount */ "../extension-base/src/services/migration-service/scripts/MigrateLedgerAccount.ts");
/* harmony import */ var _MigrateNetworkSettings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MigrateNetworkSettings */ "../extension-base/src/services/migration-service/scripts/MigrateNetworkSettings.ts");
/* harmony import */ var _MigratePioneerProvider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./MigratePioneerProvider */ "../extension-base/src/services/migration-service/scripts/MigratePioneerProvider.ts");
/* harmony import */ var _MigrateSettings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MigrateSettings */ "../extension-base/src/services/migration-service/scripts/MigrateSettings.ts");
/* harmony import */ var _MigrateTokenDecimals__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./MigrateTokenDecimals */ "../extension-base/src/services/migration-service/scripts/MigrateTokenDecimals.ts");
/* harmony import */ var _MigrateTransactionHistory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MigrateTransactionHistory */ "../extension-base/src/services/migration-service/scripts/MigrateTransactionHistory.ts");
/* harmony import */ var _MigrateWalletReference__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./MigrateWalletReference */ "../extension-base/src/services/migration-service/scripts/MigrateWalletReference.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0
















const EVERYTIME = '__everytime__';
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  '1.0.1-11': _MigrateNetworkSettings__WEBPACK_IMPORTED_MODULE_0__["default"],
  '1.0.1-20': _MigrateImportedToken__WEBPACK_IMPORTED_MODULE_1__["default"],
  '1.0.1-30': _MigrateTransactionHistory__WEBPACK_IMPORTED_MODULE_2__["default"],
  '1.0.1-40': _AutoEnableChainsTokens__WEBPACK_IMPORTED_MODULE_3__["default"],
  '1.0.1-50': _MigrateSettings__WEBPACK_IMPORTED_MODULE_4__["default"],
  '1.0.1-60': _MigrateAuthUrls__WEBPACK_IMPORTED_MODULE_5__["default"],
  '1.0.3-01': _MigrateAutoLock__WEBPACK_IMPORTED_MODULE_6__["default"],
  '1.0.3-02': _MigrateChainPatrol__WEBPACK_IMPORTED_MODULE_7__["default"],
  '1.0.9-01': _MigrateLedgerAccount__WEBPACK_IMPORTED_MODULE_8__["default"],
  '1.0.12-02': _MigrateEthProvider__WEBPACK_IMPORTED_MODULE_9__["default"],
  '1.1.6-01': _MigrateWalletReference__WEBPACK_IMPORTED_MODULE_10__["default"],
  '1.1.7': _subwallet_extension_base_services_migration_service_scripts_DeleteChain__WEBPACK_IMPORTED_MODULE_11__["default"],
  '1.1.13-01': _MigrateTokenDecimals__WEBPACK_IMPORTED_MODULE_12__["default"],
  '1.1.17-01': _MigratePioneerProvider__WEBPACK_IMPORTED_MODULE_13__["default"],
  '1.1.17-03': _EnableVaraChain__WEBPACK_IMPORTED_MODULE_14__["default"]
  // [`${EVERYTIME}-1`]: AutoEnableChainsTokens
});

/***/ }),

/***/ "../extension-base/src/services/notification-service/NotificationService.ts":
/*!**********************************************************************************!*\
  !*** ../extension-base/src/services/notification-service/NotificationService.ts ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NotificationService)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class NotificationService {
  notificationSubject = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject([]);
  getNotificationSubject() {
    return this.notificationSubject;
  }
  notify(notification) {
    const now = new Date().getTime();
    // Get values in last 30 seconds only
    const notifications = this.notificationSubject.value.filter(n => n.id < now - 30000);

    // Push notification
    notifications.push({
      ...notification,
      id: now
    });
    this.notificationSubject.next(notifications);
    if (notification.notifyViaBrowser) {
      var _notification$action;
      NotificationService.createBrowserNotification(notification.title, notification.message, notification === null || notification === void 0 ? void 0 : (_notification$action = notification.action) === null || _notification$action === void 0 ? void 0 : _notification$action.url);
    }
  }

  // Create a new chrome notification with link
  static createBrowserNotification(title, message, link) {
    var _chrome, _chrome$notifications;
    (_chrome = chrome) === null || _chrome === void 0 ? void 0 : (_chrome$notifications = _chrome.notifications) === null || _chrome$notifications === void 0 ? void 0 : _chrome$notifications.create({
      type: 'basic',
      title,
      message,
      iconUrl: './images/icon-128.png',
      priority: 2,
      isClickable: !!link
    }, notificationId => {
      if (link) {
        chrome.notifications.onClicked.addListener(nId => {
          if (nId === notificationId) {
            window.open(link);
          }
        });
      }
    });
  }
}

/***/ }),

/***/ "../extension-base/src/services/price-service/coingecko.ts":
/*!*****************************************************************!*\
  !*** ../extension-base/src/services/price-service/coingecko.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getTokenPrice": () => (/* binding */ getTokenPrice)
/* harmony export */ });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "../../node_modules/axios/lib/axios.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


let useBackupApi = false;
const getTokenPrice = async (priceIds, currency = 'usd') => {
  try {
    var _res;
    const idStr = Array.from(priceIds).join(',');
    let res;
    if (!useBackupApi) {
      try {
        res = await axios__WEBPACK_IMPORTED_MODULE_0__["default"].get(`https://api.coingecko.com/api/v3/coins/markets?vs_currency=${currency}&per_page=250&ids=${idStr}`);
      } catch (err) {
        useBackupApi = true;
      }
    }
    if (useBackupApi || ((_res = res) === null || _res === void 0 ? void 0 : _res.status) !== 200) {
      useBackupApi = true;
      res = await axios__WEBPACK_IMPORTED_MODULE_0__["default"].get(`https://chain-data.subwallet.app/api/price/get?ids=${idStr}`);
    }
    if (res.status !== 200) {
      console.warn('Failed to get token price');
    }
    const responseData = res.data || [];
    const priceMap = {};
    const price24hMap = {};
    responseData.forEach(val => {
      const currentPrice = val.current_price || 0;
      const price24h = currentPrice - (val.price_change_24h || 0);
      priceMap[val.id] = currentPrice;
      price24hMap[val.id] = price24h;
    });
    return {
      currency,
      priceMap,
      price24hMap
    };
  } catch (err) {
    console.error(err);
    throw err;
  }
};

/***/ }),

/***/ "../extension-base/src/services/price-service/index.ts":
/*!*************************************************************!*\
  !*** ../extension-base/src/services/price-service/index.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PriceService": () => (/* binding */ PriceService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/base/types */ "../extension-base/src/services/base/types.ts");
/* harmony import */ var _subwallet_extension_base_services_price_service_coingecko__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/services/price-service/coingecko */ "../extension-base/src/services/price-service/coingecko.ts");
/* harmony import */ var _subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/utils/promise */ "../extension-base/src/utils/promise.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0






const DEFAULT_PRICE_SUBJECT = {
  ready: false,
  currency: 'usd',
  priceMap: {},
  price24hMap: {}
};
class PriceService {
  priceSubject = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject(DEFAULT_PRICE_SUBJECT);
  priceIds = new Set();
  constructor(dbService, eventService, chainService) {
    this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.NOT_INITIALIZED;
    this.dbService = dbService;
    this.eventService = eventService;
    this.chainService = chainService;
    this.init().catch(console.error);
  }
  async getPrice() {
    return Promise.resolve(this.priceSubject.value);
  }
  getPriceSubject() {
    return this.priceSubject;
  }
  getPriceIds() {
    const priceIdList = Object.values(this.chainService.getAssetRegistry()).map(a => a.priceId).filter(a => a);
    return new Set(priceIdList);
  }
  refreshPriceData(priceIds) {
    clearTimeout(this.refreshTimeout);
    this.priceIds = priceIds || this.getPriceIds();

    // Update for tokens price
    (0,_subwallet_extension_base_services_price_service_coingecko__WEBPACK_IMPORTED_MODULE_2__.getTokenPrice)(this.priceIds).then(rs => {
      this.priceSubject.next({
        ...rs,
        ready: true
      });
      this.dbService.updatePriceStore(rs).catch(console.error);
    }).catch(console.error);
    this.refreshTimeout = setTimeout(this.refreshPriceData.bind(this), _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_3__.CRON_REFRESH_PRICE_INTERVAL);
  }
  async init() {
    this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.INITIALIZING;
    // Fetch data from storage
    await this.loadData();
    const eventHandler = () => {
      const newPriceIds = this.getPriceIds();

      // Compare two set newPriceIds and this.priceIds
      if (newPriceIds.size !== this.priceIds.size || !Array.from(newPriceIds).every(v => this.priceIds.has(v))) {
        this.priceIds = newPriceIds;
        this.refreshPriceData(this.priceIds);
      }
    };
    this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.INITIALIZED;
    this.eventService.on('asset.updateState', eventHandler);
  }
  async loadData() {
    const data = await this.dbService.getPriceStore();
    this.priceSubject.next(data || DEFAULT_PRICE_SUBJECT);
  }
  async persistData() {
    await this.dbService.updatePriceStore(this.priceSubject.value).catch(console.error);
  }
  startPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__.createPromiseHandler)();
  async start() {
    if (this.status === _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.STARTED) {
      return;
    }
    try {
      await this.eventService.waitAssetReady;
      this.startPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__.createPromiseHandler)();
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.STARTING;
      await this.startCron();
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.STARTED;
      this.startPromiseHandler.resolve();
    } catch (e) {
      this.startPromiseHandler.reject(e);
    }
  }
  async startCron() {
    this.refreshPriceData();
    return Promise.resolve();
  }
  stopPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__.createPromiseHandler)();
  async stop() {
    try {
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.STOPPING;
      this.stopPromiseHandler = (0,_subwallet_extension_base_utils_promise__WEBPACK_IMPORTED_MODULE_4__.createPromiseHandler)();
      await this.stopCron();
      await this.persistData();
      this.status = _subwallet_extension_base_services_base_types__WEBPACK_IMPORTED_MODULE_1__.ServiceStatus.STOPPED;
      this.stopPromiseHandler.resolve();
    } catch (e) {
      this.stopPromiseHandler.reject(e);
    }
  }
  stopCron() {
    clearTimeout(this.refreshTimeout);
    return Promise.resolve(undefined);
  }
  waitForStarted() {
    return this.startPromiseHandler.promise;
  }
  waitForStopped() {
    return this.stopPromiseHandler.promise;
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/constants.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/services/request-service/constants.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EXTENSION_REQUEST_URL": () => (/* binding */ EXTENSION_REQUEST_URL),
/* harmony export */   "PREDEFINED_CHAIN_DAPP_CHAIN_MAP": () => (/* binding */ PREDEFINED_CHAIN_DAPP_CHAIN_MAP),
/* harmony export */   "WEB_APP_URL": () => (/* binding */ WEB_APP_URL)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0

const EXTENSION_REQUEST_URL = 'extension';
const PREDEFINED_CHAIN_DAPP_CHAIN_MAP = {
  'portal.astar.network': ['astar', 'astarEvm'],
  'apps.moonbeam.network': ['moonbeam', 'moonriver'],
  'app.stellaswap.com': ['moonbeam']
};
const WEB_APP_URL = [
/// Web app
'localhost:9000',
// Local
'subwallet-webapp.pages.dev',
// Pull request build
'web.subwallet.app' // Production
];

/***/ }),

/***/ "../extension-base/src/services/request-service/handler/AuthRequestHandler.ts":
/*!************************************************************************************!*\
  !*** ../extension-base/src/services/request-service/handler/AuthRequestHandler.ts ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AuthRequestHandler)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/request-service/constants */ "../extension-base/src/services/request-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_stores_Authorize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/Authorize */ "../extension-base/src/stores/Authorize.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _subwallet_extension_base_utils_getId__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/utils/getId */ "../extension-base/src/utils/getId.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/assert.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0









const AUTH_URLS_KEY = 'authUrls';
class AuthRequestHandler {
  #requestService;
  #chainService;
  authorizeStore = new _subwallet_extension_base_stores_Authorize__WEBPACK_IMPORTED_MODULE_0__["default"]();
  #authRequestsV2 = {};
  authorizeCached = undefined;
  authorizeUrlSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject({});
  evmChainSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject({});
  authSubjectV2 = new rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject([]);
  constructor(requestService, chainService, keyringService) {
    this.keyringService = keyringService;
    this.#requestService = requestService;
    this.#chainService = chainService;
  }
  getAddressList(value = false) {
    const addressList = Object.keys(this.keyringService.accounts);
    return addressList.reduce((addressList, v) => ({
      ...addressList,
      [v]: value
    }), {});
  }
  get numAuthRequestsV2() {
    return Object.keys(this.#authRequestsV2).length;
  }
  get allAuthRequestsV2() {
    return Object.values(this.#authRequestsV2).map(({
      id,
      request,
      url
    }) => ({
      id,
      request,
      url
    }));
  }
  updateIconAuthV2(shouldClose) {
    this.authSubjectV2.next(this.allAuthRequestsV2);
    this.#requestService.updateIconV2(shouldClose);
  }
  setAuthorize(data, callback) {
    this.authorizeStore.set(AUTH_URLS_KEY, data, () => {
      this.authorizeCached = data;
      this.evmChainSubject.next(this.authorizeCached);
      this.authorizeUrlSubject.next(this.authorizeCached);
      callback && callback();
    });
  }
  getAuthorize(update) {
    // This action can be use many by DApp interaction => caching it in memory
    if (this.authorizeCached) {
      update(this.authorizeCached);
    } else {
      this.authorizeStore.get('authUrls', data => {
        this.authorizeCached = data || {};
        this.evmChainSubject.next(this.authorizeCached);
        this.authorizeUrlSubject.next(this.authorizeCached);
        update(this.authorizeCached);
      });
    }
  }
  getAuthList() {
    return new Promise((resolve, reject) => {
      this.getAuthorize(rs => {
        resolve(rs);
      });
    });
  }
  getDAppChainInfo(options) {
    const chainInfoMaps = this.#chainService.getChainInfoMap();
    const chainStateMap = this.#chainService.getChainStateMap();
    let defaultChain = options.defaultChain;
    let needEnableChains = [];
    if (options.url) {
      const domain = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.getDomainFromUrl)(options.url);
      const predefinedSupportChains = _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_3__.PREDEFINED_CHAIN_DAPP_CHAIN_MAP[domain];
      if (!defaultChain && predefinedSupportChains) {
        defaultChain = predefinedSupportChains[0];
        options.autoActive && needEnableChains.push(...predefinedSupportChains);
      }
    }
    let chainInfo;
    if (['both', 'evm'].includes(options.accessType)) {
      const evmChains = Object.values(chainInfoMaps).filter(_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._isChainEvmCompatible);
      chainInfo = (defaultChain ? chainInfoMaps[defaultChain] : evmChains.find(chain => {
        var _chainStateMap$chain$;
        return (_chainStateMap$chain$ = chainStateMap[chain.slug]) === null || _chainStateMap$chain$ === void 0 ? void 0 : _chainStateMap$chain$.active;
      })) || evmChains[0];
      if (options.autoActive) {
        var _chainInfo;
        if (!needEnableChains.includes((_chainInfo = chainInfo) === null || _chainInfo === void 0 ? void 0 : _chainInfo.slug)) {
          var _chainInfo2;
          needEnableChains.push((_chainInfo2 = chainInfo) === null || _chainInfo2 === void 0 ? void 0 : _chainInfo2.slug);
        }
      }
    }
    needEnableChains = needEnableChains.filter(slug => {
      var _chainStateMap$slug;
      return !((_chainStateMap$slug = chainStateMap[slug]) !== null && _chainStateMap$slug !== void 0 && _chainStateMap$slug.active);
    });
    needEnableChains.length > 0 && this.#chainService.enableChains(needEnableChains);
    return chainInfo;
  }
  authCompleteV2 = (id, url, resolve, reject) => {
    const isAllowedMap = this.getAddressList();
    const complete = (result, cb, accounts) => {
      var _this$getDAppChainInf;
      const isAllowed = result === true;
      let isCancelled = false;
      if (!isAllowed && typeof result === 'object' && result.message === 'Cancelled') {
        isCancelled = true;
      }
      if (accounts && accounts.length) {
        accounts.forEach(acc => {
          isAllowedMap[acc] = true;
        });
      } else {
        // eslint-disable-next-line no-return-assign
        Object.keys(isAllowedMap).forEach(address => isAllowedMap[address] = false);
      }
      const {
        accountAuthType,
        idStr,
        request: {
          allowedAccounts,
          origin
        },
        url
      } = this.#authRequestsV2[id];
      if (accountAuthType !== 'both') {
        const isEvmType = accountAuthType === 'evm';
        const backupAllowed = [...(allowedAccounts || [])].filter(a => {
          const isEth = (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.isEthereumAddress)(a);
          return isEvmType ? !isEth : isEth;
        });
        backupAllowed.forEach(acc => {
          isAllowedMap[acc] = true;
        });
      }
      const defaultEvmNetworkKey = (_this$getDAppChainInf = this.getDAppChainInfo({
        accessType: accountAuthType,
        url,
        autoActive: !isCancelled && isAllowed
      })) === null || _this$getDAppChainInf === void 0 ? void 0 : _this$getDAppChainInf.slug;
      this.getAuthorize(value => {
        let authorizeList = {};
        if (value) {
          authorizeList = value;
        }
        const existed = authorizeList[(0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.stripUrl)(url)];

        // On cancel don't save anything
        if (isCancelled) {
          delete this.#authRequestsV2[id];
          this.updateIconAuthV2(true);
          cb();
          return;
        }
        authorizeList[(0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.stripUrl)(url)] = {
          count: 0,
          id: idStr,
          isAllowed,
          isAllowedMap,
          origin,
          url,
          accountAuthType: existed && existed.accountAuthType !== accountAuthType ? 'both' : accountAuthType,
          currentEvmNetworkKey: existed ? existed.currentEvmNetworkKey : defaultEvmNetworkKey
        };
        this.setAuthorize(authorizeList, () => {
          cb();
          delete this.#authRequestsV2[id];
          this.updateIconAuthV2(true);
        });
      });
    };
    return {
      reject: error => {
        complete(error, () => {
          reject(error);
        });
      },
      resolve: ({
        accounts,
        result
      }) => {
        complete(result, () => {
          resolve(result);
        }, accounts);
      }
    };
  };
  async authorizeUrlV2(url, request) {
    let authList = await this.getAuthList();
    const accountAuthType = request.accountAuthType || 'substrate';
    request.accountAuthType = accountAuthType;
    if (!authList) {
      authList = {};
    }
    const idStr = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.stripUrl)(url);
    // Do not enqueue duplicate authorization requests.
    const isDuplicate = Object.values(this.#authRequestsV2).some(_request => _request.idStr === idStr && _request.accountAuthType === request.accountAuthType);
    (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__.assert)(!isDuplicate, 'The source {{url}} has a pending authorization request'.replace('{{url}}', url));
    const existedAuth = authList[idStr];
    const existedAccountAuthType = existedAuth === null || existedAuth === void 0 ? void 0 : existedAuth.accountAuthType;
    const confirmAnotherType = existedAccountAuthType !== 'both' && existedAccountAuthType !== request.accountAuthType;
    if (request.reConfirm && existedAuth) {
      request.origin = existedAuth.origin;
    }

    // Reconfirm if check auth for empty list
    if (existedAuth) {
      const inBlackList = existedAuth && !existedAuth.isAllowed;
      if (inBlackList) {
        throw new Error('The source {{url}} is not allowed to interact with this extension'.replace('{{url}}', url));
      }
      request.allowedAccounts = Object.entries(existedAuth.isAllowedMap).map(([address, allowed]) => allowed ? address : '').filter(item => item !== '');
      let allowedListByRequestType = [...request.allowedAccounts];
      if (accountAuthType === 'evm') {
        allowedListByRequestType = allowedListByRequestType.filter(a => (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.isEthereumAddress)(a));
      } else if (accountAuthType === 'substrate') {
        allowedListByRequestType = allowedListByRequestType.filter(a => !(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.isEthereumAddress)(a));
      }
      if (!confirmAnotherType && !request.reConfirm && allowedListByRequestType.length !== 0) {
        // Prevent appear confirmation popup
        return false;
      }
    } else {
      // Auto auth for web app

      // Ignore white list
      const isWhiteList = _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_3__.WEB_APP_URL.some(url => idStr.includes(url)) && false;
      if (isWhiteList) {
        const isAllowedMap = this.getAddressList(true);
        authList[(0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.stripUrl)(url)] = {
          count: 0,
          id: idStr,
          isAllowed: true,
          isAllowedMap,
          origin,
          url,
          accountAuthType: 'both'
        };
        this.setAuthorize(authList);
        return true;
      }
    }
    return new Promise((resolve, reject) => {
      const id = (0,_subwallet_extension_base_utils_getId__WEBPACK_IMPORTED_MODULE_7__.getId)();
      this.#authRequestsV2[id] = {
        ...this.authCompleteV2(id, url, resolve, reject),
        id,
        idStr,
        request,
        url,
        accountAuthType: accountAuthType
      };
      this.updateIconAuthV2();
      if (Object.keys(this.#authRequestsV2).length < 2) {
        this.#requestService.popupOpen();
      }
    });
  }
  getAuthRequestV2(id) {
    return this.#authRequestsV2[id];
  }
  get subscribeEvmChainChange() {
    return this.evmChainSubject;
  }
  get subscribeAuthorizeUrlSubject() {
    return this.authorizeUrlSubject;
  }
  ensureUrlAuthorizedV2(url) {
    const idStr = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_2__.stripUrl)(url);
    return new Promise((resolve, reject) => {
      this.getAuthorize(value => {
        if (!value) {
          value = {};
        }
        const entry = Object.keys(value).includes(idStr);
        if (!entry) {
          reject(new Error('The source {{url}} has not been authorized yet'.replace('{{url}}', url)));
        }
        const isConnected = value[idStr] && Object.keys(value[idStr].isAllowedMap).some(address => value[idStr].isAllowedMap[address]);
        if (!isConnected) {
          reject(new Error('The source {{url}} is not allowed to interact with this extension'.replace('{{url}}', url)));
        }
        resolve(true);
      });
    });
  }
  resetWallet() {
    for (const request of Object.values(this.#authRequestsV2)) {
      request.reject(new Error('Reset wallet'));
    }
    this.authSubjectV2.next([]);
    this.setAuthorize({});
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/handler/ConnectWCRequestHandler.ts":
/*!*****************************************************************************************!*\
  !*** ../extension-base/src/services/request-service/handler/ConnectWCRequestHandler.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ConnectWCRequestHandler)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



// WC = WalletConnect
class ConnectWCRequestHandler {
  #requestService;
  #connectWCRequests = {};
  connectWCSubject = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject([]);
  constructor(requestService) {
    this.#requestService = requestService;
  }
  get allConnectWCRequests() {
    return Object.values(this.#connectWCRequests)
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    .map(({
      reject,
      resolve,
      ...data
    }) => data);
  }
  get numConnectWCRequests() {
    return Object.keys(this.#connectWCRequests).length;
  }
  getConnectWCRequest(id) {
    return this.#connectWCRequests[id];
  }
  updateIconConnectWC(shouldClose) {
    this.connectWCSubject.next(this.allConnectWCRequests);
    this.#requestService.updateIconV2(shouldClose);
  }
  connectWCComplete = id => {
    const complete = shouldClose => {
      delete this.#connectWCRequests[id];
      this.updateIconConnectWC(shouldClose);
    };
    return {
      reject: () => {
        complete(true);
      },
      resolve: () => {
        complete(true);
      }
    };
  };
  addConnectWCRequest(request) {
    const id = request.id;
    this.#connectWCRequests[id] = {
      ...this.connectWCComplete(id),
      ...request
    };
    this.updateIconConnectWC();
    this.#requestService.popupOpen();
  }
  resetWallet() {
    for (const request of Object.values(this.#connectWCRequests)) {
      request.reject(new Error('Reset wallet'));
    }
    this.connectWCSubject.next([]);
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/handler/EvmRequestHandler.ts":
/*!***********************************************************************************!*\
  !*** ../extension-base/src/services/request-service/handler/EvmRequestHandler.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EvmRequestHandler)
/* harmony export */ });
/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @ethereumjs/common */ "../../node_modules/@ethereumjs/common/dist.browser/index.js");
/* harmony import */ var _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_ethereumjs_common__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/EvmProviderError */ "../extension-base/src/background/errors/EvmProviderError.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth */ "../extension-base/src/utils/eth.ts");
/* harmony import */ var _subwallet_extension_base_utils_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/utils/request */ "../extension-base/src/utils/request.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/index.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bn.js */ "../../node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var ethereumjs_tx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethereumjs-tx */ "../../node_modules/ethereumjs-tx/dist/index.js");
/* harmony import */ var ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethereumjs-util */ "../../node_modules/ethereumjs-util/dist.browser/index.js");
/* harmony import */ var ethereumjs_util__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0













class EvmRequestHandler {
  #requestService;
  #logger;
  confirmationsQueueSubject = new rxjs__WEBPACK_IMPORTED_MODULE_5__.BehaviorSubject({
    addNetworkRequest: {},
    addTokenRequest: {},
    switchNetworkRequest: {},
    evmSignatureRequest: {},
    evmSendTransactionRequest: {},
    evmWatchTransactionRequest: {}
  });
  confirmationsPromiseMap = {};
  constructor(requestService) {
    this.#requestService = requestService;
    this.#logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_6__.logger)('EvmRequestHandler');
  }
  get numEvmRequests() {
    let count = 0;
    Object.values(this.confirmationsQueueSubject.getValue()).forEach(x => {
      count += Object.keys(x).length;
    });
    return count;
  }
  getConfirmationsQueueSubject() {
    return this.confirmationsQueueSubject;
  }
  async addConfirmation(id, url, type, payload, options = {}, validator) {
    const confirmations = this.confirmationsQueueSubject.getValue();
    const confirmationType = confirmations[type];
    const payloadJson = JSON.stringify(payload);
    const isInternal = (0,_subwallet_extension_base_utils_request__WEBPACK_IMPORTED_MODULE_7__.isInternalRequest)(url);
    if (['evmSignatureRequest', 'evmSendTransactionRequest'].includes(type)) {
      const isAlwaysRequired = await this.#requestService.settingService.isAlwaysRequired;
      if (isAlwaysRequired) {
        this.#requestService.keyringService.lock();
      }
    }

    // Check duplicate request
    const duplicated = Object.values(confirmationType).find(c => c.url === url && c.payloadJson === payloadJson);
    if (duplicated) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_8__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Duplicate request'));
    }
    confirmationType[id] = {
      id,
      url,
      isInternal,
      payload,
      payloadJson,
      ...options
    };
    const promise = new Promise((resolve, reject) => {
      this.confirmationsPromiseMap[id] = {
        validator: validator,
        resolver: {
          resolve: resolve,
          reject: reject
        }
      };
    });
    this.confirmationsQueueSubject.next(confirmations);
    if (!isInternal) {
      this.#requestService.popupOpen();
    }
    this.#requestService.updateIconV2();
    return promise;
  }
  updateConfirmation(id, type, payload, options = {}, validator) {
    const confirmations = this.confirmationsQueueSubject.getValue();
    const confirmationType = confirmations[type];

    // Check duplicate request
    const exists = confirmationType[id];
    if (!exists) {
      throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_8__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Request does not exist'));
    }
    const payloadJson = JSON.stringify(payload);
    confirmationType[id] = {
      ...exists,
      payload,
      payloadJson,
      ...options
    };
    if (validator) {
      this.confirmationsPromiseMap[id].validator = validator;
    }
    this.confirmationsQueueSubject.next(confirmations);
  }
  async signMessage(confirmation) {
    const {
      account,
      payload,
      type
    } = confirmation.payload;
    const address = account.address;
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_10__["default"].getPair(address);
    if (pair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_10__["default"].unlockPair(pair.address);
    }
    switch (type) {
      case 'eth_sign':
      case 'personal_sign':
      case 'eth_signTypedData':
      case 'eth_signTypedData_v1':
      case 'eth_signTypedData_v3':
      case 'eth_signTypedData_v4':
        return await pair.evmSigner.signMessage(payload, type);
      default:
        throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_8__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_9__.EvmProviderErrorType.INVALID_PARAMS, (0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unsupported action'));
    }
  }
  configToTransaction(config) {
    function formatField(input) {
      if (typeof input === 'string') {
        if (input.startsWith('0x')) {
          return input;
        } else {
          return new (bn_js__WEBPACK_IMPORTED_MODULE_1___default())(input);
        }
      }
      return input;
    }

    // Convert any string, number to number with BigN exclude hex string
    const txData = {
      from: config.from,
      nonce: formatField(config.nonce),
      gasPrice: formatField(config.gasPrice),
      gasLimit: formatField(config.gas),
      to: config.to,
      value: formatField(config.value),
      data: (0,ethereumjs_util__WEBPACK_IMPORTED_MODULE_3__.toBuffer)(config.data)
    };
    const common = _ethereumjs_common__WEBPACK_IMPORTED_MODULE_0___default().custom({
      chainId: config.chainId,
      defaultHardfork: 'petersburg'
    });

    // @ts-ignore
    return new ethereumjs_tx__WEBPACK_IMPORTED_MODULE_2__.Transaction(txData, {
      common
    });
  }
  async signTransaction(confirmation) {
    const transaction = confirmation.payload;
    const {
      estimateGas,
      from,
      gas,
      gasPrice,
      value
    } = transaction;
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_10__["default"].getPair(from);
    const params = {
      ...transaction,
      gas: (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_11__.anyNumberToBN)(gas).toNumber(),
      value: (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_11__.anyNumberToBN)(value).toNumber(),
      gasPrice: (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_11__.anyNumberToBN)(gasPrice).toNumber(),
      gasLimit: (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_11__.anyNumberToBN)(estimateGas).toNumber()
      // nonce: await web3.eth.getTransactionCount(from) // Todo: fill this value from transaction service
    };

    const tx = this.configToTransaction(params);
    await Promise.resolve();
    if (pair.isLocked) {
      _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_10__["default"].unlockPair(pair.address);
    }
    return pair.evmSigner.signTransaction(tx);
  }
  async decorateResult(t, request, result) {
    if (result.payload === '') {
      if (t === 'evmSignatureRequest') {
        result.payload = await this.signMessage(request);
      } else if (t === 'evmSendTransactionRequest') {
        result.payload = await this.signTransaction(request);
      }
      if (t === 'evmSignatureRequest' || t === 'evmSendTransactionRequest') {
        const isAlwaysRequired = await this.#requestService.settingService.isAlwaysRequired;
        if (isAlwaysRequired) {
          this.#requestService.keyringService.lock();
        }
      }
    }
  }
  async completeConfirmation(request) {
    const confirmations = this.confirmationsQueueSubject.getValue();
    for (const ct in request) {
      const type = ct;
      const result = request[type];
      const {
        id
      } = result;
      const {
        resolver,
        validator
      } = this.confirmationsPromiseMap[id];
      const confirmation = confirmations[type][id];
      if (!resolver || !confirmation) {
        this.#logger.error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'), type, id);
        throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_4__.t)('Unable to proceed. Please try again'));
      }

      // Fill signature for some special type
      await this.decorateResult(type, confirmation, result);

      // Validate response from confirmation popup some info like password, response format....
      const error = validator && validator(result);
      if (error) {
        resolver.reject(error);
      }

      // Delete confirmations from queue
      delete this.confirmationsPromiseMap[id];
      delete confirmations[type][id];
      this.confirmationsQueueSubject.next(confirmations);

      // Update icon, and close queue
      this.#requestService.updateIconV2(this.#requestService.numAllRequests === 0);
      resolver.resolve(result);
    }
    return true;
  }
  resetWallet() {
    const confirmations = this.confirmationsQueueSubject.getValue();
    for (const [type, requests] of Object.entries(confirmations)) {
      for (const confirmation of Object.values(requests)) {
        const {
          id
        } = confirmation;
        const {
          resolver
        } = this.confirmationsPromiseMap[id];
        if (!resolver || !confirmation) {
          console.error('Not found confirmation', type, id);
        } else {
          resolver.reject(new Error('Reset wallet'));
        }
        delete this.confirmationsPromiseMap[id];
        delete confirmations[type][id];
      }
    }
    this.confirmationsQueueSubject.next(confirmations);
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/handler/MetadataRequestHandler.ts":
/*!****************************************************************************************!*\
  !*** ../extension-base/src/services/request-service/handler/MetadataRequestHandler.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MetadataRequestHandler)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_request_service_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/services/request-service/helper */ "../extension-base/src/services/request-service/helper/index.ts");
/* harmony import */ var _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores */ "../extension-base/src/stores/Metadata.ts");
/* harmony import */ var _subwallet_extension_base_utils_getId__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/utils/getId */ "../extension-base/src/utils/getId.ts");
/* harmony import */ var _subwallet_extension_chains__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-chains */ "../extension-chains/src/bundle.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0






class MetadataRequestHandler {
  #requestService;
  #metaStore = new _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_0__["default"]();
  #metaRequests = {};
  metaSubject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.BehaviorSubject([]);
  constructor(requestService) {
    this.#requestService = requestService;
    (0,_subwallet_extension_base_services_request_service_helper__WEBPACK_IMPORTED_MODULE_2__.extractMetadata)(this.#metaStore);
  }
  get knownMetadata() {
    return (0,_subwallet_extension_chains__WEBPACK_IMPORTED_MODULE_3__.knownMetadata)();
  }
  get allMetaRequests() {
    return Object.values(this.#metaRequests).map(({
      id,
      request,
      url
    }) => ({
      id,
      request,
      url
    }));
  }
  get numMetaRequests() {
    return Object.keys(this.#metaRequests).length;
  }
  getMetaRequest(id) {
    return this.#metaRequests[id];
  }
  saveMetadata(meta) {
    this.#metaStore.set(meta.genesisHash, meta);
    (0,_subwallet_extension_chains__WEBPACK_IMPORTED_MODULE_3__.addMetadata)(meta);
  }
  updateIconMeta(shouldClose) {
    this.metaSubject.next(this.allMetaRequests);
    this.#requestService.updateIconV2(shouldClose);
  }
  metaComplete = (id, resolve, reject) => {
    const complete = () => {
      delete this.#metaRequests[id];
      this.updateIconMeta(true);
    };
    return {
      reject: error => {
        complete();
        reject(error);
      },
      resolve: result => {
        complete();
        resolve(result);
      }
    };
  };
  injectMetadata(url, request) {
    return new Promise((resolve, reject) => {
      const id = (0,_subwallet_extension_base_utils_getId__WEBPACK_IMPORTED_MODULE_4__.getId)();
      this.#metaRequests[id] = {
        ...this.metaComplete(id, resolve, reject),
        id,
        request,
        url
      };
      this.updateIconMeta();
      this.#requestService.popupOpen();
    });
  }
  resetWallet() {
    for (const request of Object.values(this.#metaRequests)) {
      request.reject(new Error('Reset wallet'));
    }
    this.metaSubject.next([]);
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/handler/NotSupportWCRequestHandler.ts":
/*!********************************************************************************************!*\
  !*** ../extension-base/src/services/request-service/handler/NotSupportWCRequestHandler.ts ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NotSupportWCRequestHandler)
/* harmony export */ });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



// WC = WalletConnect
class NotSupportWCRequestHandler {
  #requestService;
  #notSupportWCRequests = {};
  notSupportWCSubject = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject([]);
  constructor(requestService) {
    this.#requestService = requestService;
  }
  get allNotSupportWCRequests() {
    return Object.values(this.#notSupportWCRequests)
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    .map(({
      reject,
      resolve,
      ...data
    }) => data);
  }
  get numNotSupportWCRequests() {
    return Object.keys(this.#notSupportWCRequests).length;
  }
  getNotSupportWCRequest(id) {
    return this.#notSupportWCRequests[id];
  }
  updateIconNotSupportWC(shouldClose) {
    this.notSupportWCSubject.next(this.allNotSupportWCRequests);
    this.#requestService.updateIconV2(shouldClose);
  }
  notSupportWCComplete = id => {
    const complete = shouldClose => {
      delete this.#notSupportWCRequests[id];
      this.updateIconNotSupportWC(shouldClose);
    };
    return {
      reject: () => {
        complete(true);
      },
      resolve: () => {
        complete(true);
      }
    };
  };
  addNotSupportWCRequest(request) {
    const id = request.id;
    this.#notSupportWCRequests[id] = {
      ...this.notSupportWCComplete(id),
      ...request
    };
    this.updateIconNotSupportWC();
    this.#requestService.popupOpen();
  }
  resetWallet() {
    for (const request of Object.values(this.#notSupportWCRequests)) {
      request.reject(new Error('Reset wallet'));
    }
    this.notSupportWCSubject.next([]);
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/handler/PopupHandler.ts":
/*!******************************************************************************!*\
  !*** ../extension-base/src/services/request-service/handler/PopupHandler.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PopupHandler)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/helpers */ "../extension-base/src/background/handlers/helpers.ts");
/* harmony import */ var _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/setting-service/constants */ "../extension-base/src/services/setting-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/environment.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0




const NOTIFICATION_URL = chrome.extension.getURL('notification.html');
const OS = (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_0__.getOS)();
const extraHeight = OS === 'Linux' ? 0 : 28;
const extraWidth = OS === 'Windows' ? 16 : 0;
const POPUP_WINDOW_OPTS = {
  focused: true,
  height: 600 + extraHeight,
  type: 'popup',
  url: NOTIFICATION_URL,
  width: 390 + extraWidth
};
const NORMAL_WINDOW_OPTS = {
  focused: true,
  type: 'normal',
  url: NOTIFICATION_URL
};
class PopupHandler {
  #requestService;
  #notification = _subwallet_extension_base_services_setting_service_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_NOTIFICATION_TYPE;
  #windows = [];
  constructor(requestService) {
    this.#requestService = requestService;
    const updateNotification = rs => {
      this.#notification = rs.browserConfirmationType;
    };
    requestService.settingService.getSettings(updateNotification);
    requestService.settingService.getSubject().subscribe({
      next: updateNotification
    });
  }
  updateIconV2(shouldClose) {
    const numRequests = this.#requestService.numRequests;
    const text = numRequests > 0 ? numRequests.toString() : '';
    (0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_2__.withErrorLog)(() => {
      var _chrome$browserAction;
      return (_chrome$browserAction = chrome.browserAction) === null || _chrome$browserAction === void 0 ? void 0 : _chrome$browserAction.setBadgeText({
        text
      });
    });
    if (shouldClose && text === '') {
      this.popupClose();
    }
  }
  get popup() {
    return this.#windows;
  }
  popupClose() {
    this.#windows.forEach(id => (0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_2__.withErrorLog)(() => chrome.windows.remove(id)));
    this.#windows = [];
  }
  popupOpen() {
    if (this.#notification !== 'extension') {
      chrome.windows.getCurrent(win => {
        const popupOptions = {
          ...(this.#notification === 'window' ? {
            ...NORMAL_WINDOW_OPTS,
            width: win.width,
            height: win.height
          } : POPUP_WINDOW_OPTS)
        };
        if (win) {
          popupOptions.left = (win.left || 0) + (win.width || 0) - (popupOptions.width || 0) - 20;
          popupOptions.top = (win.top || 0) + 80;
        }
        chrome.windows.create(popupOptions, window => {
          if (window) {
            this.#windows.push(window.id || 0);
          }
        });
      });
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/handler/SubstrateRequestHandler.ts":
/*!*****************************************************************************************!*\
  !*** ../extension-base/src/services/request-service/handler/SubstrateRequestHandler.ts ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SubstrateRequestHandler)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_RequestExtrinsicSign__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/background/RequestExtrinsicSign */ "../extension-base/src/background/RequestExtrinsicSign.ts");
/* harmony import */ var _subwallet_extension_base_utils_getId__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/utils/getId */ "../extension-base/src/utils/getId.ts");
/* harmony import */ var _subwallet_extension_base_utils_request__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/utils/request */ "../extension-base/src/utils/request.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/index.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _polkadot_util_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util/logger */ "../../node_modules/@polkadot/util/logger.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0







class SubstrateRequestHandler {
  #logger;
  #requestService;
  #substrateRequests = {};
  signSubject = new rxjs__WEBPACK_IMPORTED_MODULE_0__.BehaviorSubject([]);
  constructor(requestService) {
    this.#requestService = requestService;
    this.#logger = (0,_polkadot_util_logger__WEBPACK_IMPORTED_MODULE_1__.logger)('SubstrateRequestHandler');
  }
  getSignRequest(id) {
    return this.#substrateRequests[id];
  }
  get allSubstrateRequests() {
    return Object.values(this.#substrateRequests).map(({
      account,
      id,
      request,
      url
    }) => ({
      account,
      id,
      request,
      url,
      isInternal: (0,_subwallet_extension_base_utils_request__WEBPACK_IMPORTED_MODULE_2__.isInternalRequest)(url)
    }));
  }
  updateIconSign(shouldClose) {
    this.signSubject.next(this.allSubstrateRequests);
    this.#requestService.updateIconV2(shouldClose);
  }
  signComplete = (id, resolve, reject) => {
    const complete = () => {
      delete this.#substrateRequests[id];
      this.updateIconSign(true);
    };
    return {
      reject: error => {
        complete();
        this.#logger.log(error);
        reject(error);
      },
      resolve: result => {
        complete();
        resolve(result);
      }
    };
  };
  get numSubstrateRequests() {
    return Object.keys(this.#substrateRequests).length;
  }
  async sign(url, request, account, _id) {
    const id = _id || (0,_subwallet_extension_base_utils_getId__WEBPACK_IMPORTED_MODULE_3__.getId)();
    const isAlwaysRequired = await this.#requestService.settingService.isAlwaysRequired;
    if (isAlwaysRequired) {
      this.#requestService.keyringService.lock();
    }
    return new Promise((resolve, reject) => {
      this.#substrateRequests[id] = {
        ...this.signComplete(id, resolve, reject),
        account,
        id,
        request,
        url
      };
      this.updateIconSign();
      this.#requestService.popupOpen();
    });
  }
  async signTransaction(id, address, url, payload) {
    const isAlwaysRequired = await this.#requestService.settingService.isAlwaysRequired;
    if (isAlwaysRequired) {
      this.#requestService.keyringService.lock();
    }
    return new Promise((resolve, reject) => {
      const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_4__["default"].getPair(address);
      const account = {
        address: pair.address,
        ...pair.meta
      };
      this.#substrateRequests[id] = {
        ...this.signComplete(id, resolve, reject),
        account,
        id,
        request: new _subwallet_extension_base_background_RequestExtrinsicSign__WEBPACK_IMPORTED_MODULE_5__["default"](payload),
        url: url
      };
      this.updateIconSign();
      if (!(0,_subwallet_extension_base_utils_request__WEBPACK_IMPORTED_MODULE_2__.isInternalRequest)(url)) {
        this.#requestService.popupOpen();
      }
    });
  }
  resetWallet() {
    for (const request of Object.values(this.#substrateRequests)) {
      request.reject(new Error('Reset wallet'));
    }
    this.signSubject.next([]);
  }
}

/***/ }),

/***/ "../extension-base/src/services/request-service/helper/index.ts":
/*!**********************************************************************!*\
  !*** ../extension-base/src/services/request-service/helper/index.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "extractMetadata": () => (/* binding */ extractMetadata)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-chains */ "../extension-chains/src/bundle.ts");
/* harmony import */ var _polkadot_networks_defaults__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/networks/defaults */ "../../node_modules/@polkadot/networks/defaults/genesis.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



const extractMetadata = store => {
  store.allMap(map => {
    const knownEntries = Object.entries(_polkadot_networks_defaults__WEBPACK_IMPORTED_MODULE_0__.knownGenesis);
    const defs = {};
    const removals = [];
    Object.entries(map).forEach(([key, def]) => {
      const entry = knownEntries.find(([, hashes]) => hashes.includes(def.genesisHash));
      if (entry) {
        const [name, hashes] = entry;
        const index = hashes.indexOf(def.genesisHash);

        // flatten the known metadata based on the genesis index
        // (lower is better/newer)
        if (!defs[name] || defs[name].index > index) {
          if (defs[name]) {
            // remove the old version of the metadata
            removals.push(defs[name].key);
          }
          defs[name] = {
            def,
            index,
            key
          };
        }
      } else {
        // this is not a known entry, so we will just apply it
        defs[key] = {
          def,
          index: 0,
          key
        };
      }
    });
    removals.forEach(key => store.remove(key));
    Object.values(defs).forEach(({
      def
    }) => (0,_subwallet_extension_chains__WEBPACK_IMPORTED_MODULE_1__.addMetadata)(def));
  });
};

/***/ }),

/***/ "../extension-base/src/services/request-service/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/services/request-service/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RequestService)
/* harmony export */ });
/* harmony import */ var _handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./handler */ "../extension-base/src/services/request-service/handler/PopupHandler.ts");
/* harmony import */ var _handler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./handler */ "../extension-base/src/services/request-service/handler/MetadataRequestHandler.ts");
/* harmony import */ var _handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./handler */ "../extension-base/src/services/request-service/handler/AuthRequestHandler.ts");
/* harmony import */ var _handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./handler */ "../extension-base/src/services/request-service/handler/SubstrateRequestHandler.ts");
/* harmony import */ var _handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./handler */ "../extension-base/src/services/request-service/handler/EvmRequestHandler.ts");
/* harmony import */ var _handler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./handler */ "../extension-base/src/services/request-service/handler/ConnectWCRequestHandler.ts");
/* harmony import */ var _handler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./handler */ "../extension-base/src/services/request-service/handler/NotSupportWCRequestHandler.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class RequestService {
  // Common
  #chainService;
  #popupHandler;
  #metadataRequestHandler;
  #authRequestHandler;
  #substrateRequestHandler;
  #evmRequestHandler;
  #connectWCRequestHandler;
  #notSupportWCRequestHandler;

  // Common
  constructor(chainService, settingService, keyringService) {
    this.#chainService = chainService;
    this.settingService = settingService;
    this.keyringService = keyringService;
    this.#popupHandler = new _handler__WEBPACK_IMPORTED_MODULE_0__["default"](this);
    this.#metadataRequestHandler = new _handler__WEBPACK_IMPORTED_MODULE_1__["default"](this);
    this.#authRequestHandler = new _handler__WEBPACK_IMPORTED_MODULE_2__["default"](this, this.#chainService, this.keyringService);
    this.#substrateRequestHandler = new _handler__WEBPACK_IMPORTED_MODULE_3__["default"](this);
    this.#evmRequestHandler = new _handler__WEBPACK_IMPORTED_MODULE_4__["default"](this);
    this.#connectWCRequestHandler = new _handler__WEBPACK_IMPORTED_MODULE_5__["default"](this);
    this.#notSupportWCRequestHandler = new _handler__WEBPACK_IMPORTED_MODULE_6__["default"](this);

    // Reset icon on start service
    this.updateIconV2();
  }
  get numAllRequests() {
    return this.allSubstrateRequests.length + this.numEvmRequests;
  }
  updateIconV2(shouldClose) {
    this.#popupHandler.updateIconV2(shouldClose);
  }
  getAddressList(value = false) {
    const addressList = Object.keys(this.keyringService.accounts);
    return addressList.reduce((addressList, v) => ({
      ...addressList,
      [v]: value
    }), {});
  }

  // Popup
  get popup() {
    return this.#popupHandler.popup;
  }
  popupClose() {
    this.#popupHandler.popupClose();
  }
  popupOpen() {
    // Not open new popup and use existed
    const popupList = this.#popupHandler.popup;
    if (popupList && popupList.length > 0) {
      var _chrome$windows$updat;
      (_chrome$windows$updat = chrome.windows.update(popupList[0], {
        focused: true
      })) === null || _chrome$windows$updat === void 0 ? void 0 : _chrome$windows$updat.catch(console.error);
    } else {
      this.#popupHandler.popupOpen();
    }
  }

  // Metadata
  get metaSubject() {
    return this.#metadataRequestHandler.metaSubject;
  }
  get knownMetadata() {
    return this.#metadataRequestHandler.knownMetadata;
  }
  get numMetaRequests() {
    return this.#metadataRequestHandler.numMetaRequests;
  }
  injectMetadata(url, request) {
    return this.#metadataRequestHandler.injectMetadata(url, request);
  }
  getMetaRequest(id) {
    return this.#metadataRequestHandler.getMetaRequest(id);
  }
  saveMetadata(meta) {
    this.#metadataRequestHandler.saveMetadata(meta);
  }

  // Auth
  get authSubjectV2() {
    return this.#authRequestHandler.authSubjectV2;
  }
  get numAuthRequests() {
    return this.#authRequestHandler.numAuthRequestsV2;
  }
  setAuthorize(data, callback) {
    this.#authRequestHandler.setAuthorize(data, callback);
  }
  getAuthorize(update) {
    this.#authRequestHandler.getAuthorize(update);
  }
  getAuthList() {
    return this.#authRequestHandler.getAuthList();
  }
  async authorizeUrlV2(url, request) {
    return this.#authRequestHandler.authorizeUrlV2(url, request);
  }
  getAuthRequestV2(id) {
    return this.#authRequestHandler.getAuthRequestV2(id);
  }
  getDAppChainInfo(options) {
    return this.#authRequestHandler.getDAppChainInfo(options);
  }
  get subscribeEvmChainChange() {
    return this.#authRequestHandler.subscribeEvmChainChange;
  }
  get subscribeAuthorizeUrlSubject() {
    return this.#authRequestHandler.subscribeAuthorizeUrlSubject;
  }
  ensureUrlAuthorizedV2(url) {
    return this.#authRequestHandler.ensureUrlAuthorizedV2(url);
  }

  // Substrate requests
  get signSubject() {
    return this.#substrateRequestHandler.signSubject;
  }
  get allSubstrateRequests() {
    return this.#substrateRequestHandler.allSubstrateRequests;
  }
  sign(url, request, account, id) {
    return this.#substrateRequestHandler.sign(url, request, account, id);
  }
  get numSubstrateRequests() {
    return this.#substrateRequestHandler.numSubstrateRequests;
  }

  // Evm requests
  get numEvmRequests() {
    return this.#evmRequestHandler.numEvmRequests;
  }
  get confirmationsQueueSubject() {
    return this.#evmRequestHandler.getConfirmationsQueueSubject();
  }
  getSignRequest(id) {
    return this.#substrateRequestHandler.getSignRequest(id);
  }
  async signInternalTransaction(id, address, url, payload) {
    return this.#substrateRequestHandler.signTransaction(id, address, url, payload);
  }
  addConfirmation(id, url, type, payload, options = {}, validator) {
    return this.#evmRequestHandler.addConfirmation(id, url, type, payload, options, validator);
  }
  async completeConfirmation(request) {
    return await this.#evmRequestHandler.completeConfirmation(request);
  }
  updateConfirmation(id, type, payload, options = {}, validator) {
    return this.#evmRequestHandler.updateConfirmation(id, type, payload, options, validator);
  }

  // WalletConnect Connect requests
  getConnectWCRequest(id) {
    return this.#connectWCRequestHandler.getConnectWCRequest(id);
  }
  get connectWCSubject() {
    return this.#connectWCRequestHandler.connectWCSubject;
  }
  get allConnectWCRequests() {
    return this.#connectWCRequestHandler.allConnectWCRequests;
  }
  get numConnectWCRequests() {
    return this.#connectWCRequestHandler.numConnectWCRequests;
  }
  addConnectWCRequest(request) {
    return this.#connectWCRequestHandler.addConnectWCRequest(request);
  }

  // WalletConnect not support requests
  getNotSupportWCRequest(id) {
    return this.#notSupportWCRequestHandler.getNotSupportWCRequest(id);
  }
  get notSupportWCSubject() {
    return this.#notSupportWCRequestHandler.notSupportWCSubject;
  }
  get allNotSupportWCRequests() {
    return this.#notSupportWCRequestHandler.allNotSupportWCRequests;
  }
  get numNotSupportWCRequests() {
    return this.#notSupportWCRequestHandler.numNotSupportWCRequests;
  }
  addNotSupportWCRequest(request) {
    return this.#notSupportWCRequestHandler.addNotSupportWCRequest(request);
  }

  // General methods
  get numRequests() {
    return this.numMetaRequests + this.numAuthRequests + this.numSubstrateRequests + this.numEvmRequests + this.numConnectWCRequests + this.numNotSupportWCRequests;
  }
  resetWallet() {
    this.#authRequestHandler.resetWallet();
    this.#substrateRequestHandler.resetWallet();
    this.#evmRequestHandler.resetWallet();
    this.#metadataRequestHandler.resetWallet();
    this.#connectWCRequestHandler.resetWallet();
    this.#notSupportWCRequestHandler.resetWallet();
  }
}

/***/ }),

/***/ "../extension-base/src/services/setting-service/SettingService.ts":
/*!************************************************************************!*\
  !*** ../extension-base/src/services/setting-service/SettingService.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SettingService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/storage.ts");
/* harmony import */ var _subwallet_extension_base_stores_PassPhishingStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/stores/PassPhishingStore */ "../extension-base/src/stores/PassPhishingStore.ts");
/* harmony import */ var _subwallet_extension_base_stores_Settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/Settings */ "../extension-base/src/stores/Settings.ts");
/* harmony import */ var _i18n_i18n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./i18n/i18n */ "../extension-base/src/services/setting-service/i18n/i18n.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "../extension-base/src/services/setting-service/constants.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0






class SettingService {
  settingsStore = new _subwallet_extension_base_stores_Settings__WEBPACK_IMPORTED_MODULE_0__["default"]();
  passPhishingStore = new _subwallet_extension_base_stores_PassPhishingStore__WEBPACK_IMPORTED_MODULE_1__["default"]();
  constructor() {
    let old = localStorage.getItem(_subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.LANGUAGE) || 'en';
    const updateLanguage = ({
      language
    }) => {
      if (language !== old) {
        old = language;
        _i18n_i18n__WEBPACK_IMPORTED_MODULE_3__["default"].changeLanguage(language).catch(console.error);
      }
    };
    this.getSettings(updateLanguage);
    this.settingsStore.getSubject().subscribe({
      next: updateLanguage
    });
  }
  getSubject() {
    return this.settingsStore.getSubject();
  }
  getSettings(update) {
    this.settingsStore.get('Settings', value => {
      update({
        ..._constants__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_SETTING,
        ...(value || {})
      });
    });
  }
  setSettings(data, callback) {
    this.settingsStore.set('Settings', data, callback);
  }
  passPhishingSubject() {
    return this.passPhishingStore.getSubject();
  }
  getPassPhishingList(update) {
    this.passPhishingStore.get('PassPhishing', value => {
      update(value || {});
    });
  }
  setPassPhishing(data, callback) {
    this.passPhishingStore.set('PassPhishing', data, callback);
  }

  // Use for mobile only
  get isAlwaysRequired() {
    return new Promise(resolve => {
      this.settingsStore.get('Settings', value => {
        resolve(!value.timeAutoLock);
      });
    });
  }
  resetWallet() {
    this.settingsStore.set('Settings', _constants__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_SETTING);
    this.passPhishingStore.set('PassPhishing', {});
  }
}

/***/ }),

/***/ "../extension-base/src/services/setting-service/i18n/Backend.ts":
/*!**********************************************************************!*\
  !*** ../extension-base/src/services/setting-service/i18n/Backend.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Backend)
/* harmony export */ });
/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cache */ "../extension-base/src/services/setting-service/i18n/cache.ts");
// Copyright 2017-2022 @polkadot/react-components authors & contributors
// SPDX-License-Identifier: Apache-2.0


const loaders = {};
class Backend {
  type = 'backend';
  static type = 'backend';
  async read(lng, _namespace, responder) {
    if (_cache__WEBPACK_IMPORTED_MODULE_0__["default"][lng]) {
      return responder(null, _cache__WEBPACK_IMPORTED_MODULE_0__["default"][lng]);
    }

    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    if (!loaders[lng]) {
      loaders[lng] = this.createLoader(lng);
    }
    const [error, data] = await loaders[lng];
    return responder(error, data);
  }
  async createLoader(lng) {
    try {
      const response = await fetch(`locales/${lng}/translation.json`, {});
      if (!response.ok) {
        return [`i18n: failed loading ${lng}`, response.status >= 500 && response.status < 600];
      } else {
        _cache__WEBPACK_IMPORTED_MODULE_0__["default"][lng] = await response.json();
        return [null, _cache__WEBPACK_IMPORTED_MODULE_0__["default"][lng]];
      }
    } catch (error) {
      return [error.message, false];
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/setting-service/i18n/cache.ts":
/*!********************************************************************!*\
  !*** ../extension-base/src/services/setting-service/i18n/cache.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright 2017-2022 @polkadot/react-components authors & contributors
// SPDX-License-Identifier: Apache-2.0

const languageCache = {};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (languageCache);

/***/ }),

/***/ "../extension-base/src/services/setting-service/i18n/i18n.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/services/setting-service/i18n/i18n.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/storage.ts");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var _Backend__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Backend */ "../extension-base/src/services/setting-service/i18n/Backend.ts");
// Copyright 2019-2022 @polkadot/extension-ui authors & contributors
// SPDX-License-Identifier: Apache-2.0




i18next__WEBPACK_IMPORTED_MODULE_0__["default"].use(_Backend__WEBPACK_IMPORTED_MODULE_1__["default"]).init({
  backend: {},
  debug: false,
  fallbackLng: 'en',
  interpolation: {
    escapeValue: false
  },
  keySeparator: false,
  lng: localStorage.getItem(_subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_2__.LANGUAGE) || 'en',
  load: 'languageOnly',
  nsSeparator: false,
  returnEmptyString: false,
  returnNull: false
}).catch(error => console.log('i18n: failure', error));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (i18next__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "../extension-base/src/services/storage-service/DatabaseService.ts":
/*!*************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/DatabaseService.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DatabaseService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_databases__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/databases */ "../extension-base/src/services/storage-service/databases/index.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Price.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Balance.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Nft.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/NftCollection.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Crowdloan.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Staking.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Transaction.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Migration.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Metadata.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Chain.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores */ "../extension-base/src/services/storage-service/db-stores/Asset.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_ChainStakingMetadata__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/ChainStakingMetadata */ "../extension-base/src/services/storage-service/db-stores/ChainStakingMetadata.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_MantaPay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/MantaPay */ "../extension-base/src/services/storage-service/db-stores/MantaPay.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_NominatorMetadata__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/NominatorMetadata */ "../extension-base/src/services/storage-service/db-stores/NominatorMetadata.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0









class DatabaseService {
  // TODO: might remove this

  constructor(eventService) {
    this.eventService = eventService;
    this.logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__.logger)('DB-Service');
    this._db = new _subwallet_extension_base_services_storage_service_databases__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this._db.on('ready', () => {
      this.eventService.emit('database.ready', true);
    });
    this.stores = {
      price: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_2__["default"](this._db.price),
      balance: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_3__["default"](this._db.balances),
      nft: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_4__["default"](this._db.nfts),
      nftCollection: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_5__["default"](this._db.nftCollections),
      crowdloan: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_6__["default"](this._db.crowdloans),
      staking: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_7__["default"](this._db.stakings),
      transaction: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_8__["default"](this._db.transactions),
      migration: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_9__["default"](this._db.migrations),
      metadata: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_10__["default"](this._db.metadata),
      chain: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_11__["default"](this._db.chain),
      asset: new _subwallet_extension_base_services_storage_service_db_stores__WEBPACK_IMPORTED_MODULE_12__["default"](this._db.asset),
      // staking
      chainStakingMetadata: new _subwallet_extension_base_services_storage_service_db_stores_ChainStakingMetadata__WEBPACK_IMPORTED_MODULE_13__["default"](this._db.chainStakingMetadata),
      nominatorMetadata: new _subwallet_extension_base_services_storage_service_db_stores_NominatorMetadata__WEBPACK_IMPORTED_MODULE_14__["default"](this._db.nominatorMetadata),
      mantaPay: new _subwallet_extension_base_services_storage_service_db_stores_MantaPay__WEBPACK_IMPORTED_MODULE_15__["default"](this._db.mantaPay)
    };
  }
  async updatePriceStore(priceData) {
    await this.stores.price.table.put(priceData);
  }
  async getPriceStore() {
    try {
      const rs = await this.stores.price.table.get('usd');
      return rs;
    } catch (e) {
      this.logger.error(e);
      return undefined;
    }
  }

  // Balance
  async getStoredBalance() {
    return this.stores.balance.table.toArray();
  }
  async updateBalanceStore(address, item) {
    if (item.state === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.APIItemState.READY) {
      return this.stores.balance.upsert({
        address,
        ...item
      });
    }
  }
  async removeFromBalanceStore(assets) {
    return this.stores.balance.removeBySlugs(assets);
  }

  // Crowdloan
  async updateCrowdloanStore(chain, address, item) {
    if (item.state === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.APIItemState.READY && item.contribute !== '0') {
      return this.stores.crowdloan.upsert({
        chain,
        address,
        ...item
      });
    } else {
      return this.stores.crowdloan.deleteByChainAndAddress(chain, address);
    }
  }

  // Staking
  async updateStaking(chain, address, item) {
    if (item.state === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.APIItemState.READY) {
      return this.stores.staking.upsert(item);
    }
  }
  async getStakings(addresses, chains) {
    return this.stores.staking.getStakings(addresses, chains);
  }
  async getStakingsByChains(chains) {
    return this.stores.staking.getStakingsByChains(chains);
  }
  async getPooledStakings(addresses, chainHashes) {
    return this.stores.staking.getPooledStakings(addresses, chainHashes);
  }
  subscribeStaking(addresses, chainList, callback) {
    this.stakingSubscription && this.stakingSubscription.unsubscribe();
    this.stakingSubscription = this.stores.staking.subscribeStaking(addresses, chainList).subscribe({
      next: stakings => callback && callback(stakings)
    });
    return this.stakingSubscription;
  }
  subscribeChainStakingMetadata(chains, callback) {
    this.stores.chainStakingMetadata.subscribeByChain(chains).subscribe({
      next: data => callback && callback(data)
    });
  }
  subscribeNominatorMetadata(addresses, callback) {
    return this.stores.nominatorMetadata.subscribeByAddresses(addresses).subscribe({
      next: data => callback && callback(data)
    });
  }

  // Transaction histories
  async getHistories(query) {
    return this.stores.transaction.queryHistory(query);
  }
  async upsertHistory(histories) {
    const cleanedHistory = histories.filter(x => x && x.address && x.chain && x.extrinsicHash);
    return this.stores.transaction.bulkUpsert(cleanedHistory);
  }
  async updateHistoryByExtrinsicHash(extrinsicHash, updateData) {
    const canUpdate = updateData && extrinsicHash;
    if (!canUpdate) {
      return;
    }
    return this.stores.transaction.updateWithQuery({
      extrinsicHash
    }, updateData);
  }

  // NFT Collection
  async addNftCollection(collection) {
    return this.stores.nftCollection.upsert(collection);
  }
  async deleteNftCollection(chain, collectionId) {
    await this.stores.nftCollection.removeCollection(chain, collectionId);
    await this.stores.nft.deleteNftsByCollection(chain, collectionId);
  }
  getAllNftCollection(chainHashes) {
    return this.stores.nftCollection.getNftCollection(chainHashes);
  }

  // NFT
  subscribeNft(addresses, chainHashes, callback) {
    this.nftSubscription && this.nftSubscription.unsubscribe();
    this.nftSubscription = this.stores.nft.subscribeNft(addresses, chainHashes).subscribe({
      next: nfts => callback && callback(nfts)
    });
    return this.nftSubscription;
  }
  async cleanUpNft(chain, owner, collectionIds, nftIds, ownNothing) {
    if (ownNothing) {
      return this.stores.nft.deleteNftsByChainAndOwner(chain, (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_17__.reformatAddress)(owner, 42), collectionIds);
    }
    return this.stores.nft.cleanUpNfts(chain, (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_17__.reformatAddress)(owner, 42), collectionIds, nftIds);
  }
  async getNft(addresses, chainHashes) {
    return this.stores.nft.getNft(addresses, chainHashes);
  }
  async addNft(address, nft) {
    return this.stores.nft.upsert({
      ...nft,
      address
    });
  }
  handleNftTransfer(chain, addresses, nftItem) {
    return this.stores.nft.deleteNftItem(chain, addresses, nftItem);
  }
  removeNfts(chain, address, collectionId, nftIds) {
    return this.stores.nft.removeNfts(chain, address, collectionId, nftIds);
  }
  removeNftsByAddress(address) {
    return this.stores.nft.removeNftsByAddress([address]);
  }

  // Chain
  async updateChainStore(item) {
    return this.stores.chain.upsert(item);
  }
  async bulkUpdateChainStore(data) {
    return this.stores.chain.bulkUpsert(data);
  }
  async removeFromChainStore(chains) {
    return this.stores.chain.removeChains(chains);
  }
  async getAllChainStore() {
    return this.stores.chain.getAll();
  }

  // Asset
  async updateAssetStore(item) {
    return this.stores.asset.upsert(item);
  }
  async getAllAssetStore() {
    return this.stores.asset.getAll();
  }
  async removeFromAssetStore(items) {
    return this.stores.asset.removeAssets(items);
  }

  // Staking
  async updateChainStakingMetadata(item, changes) {
    const existingRecord = await this.stores.chainStakingMetadata.getByChainAndType(item.chain, item.type);
    if (existingRecord && changes) {
      return this.stores.chainStakingMetadata.updateByChainAndType(item.chain, item.type, changes);
    }
    return this.stores.chainStakingMetadata.upsert(item);
  }
  async getChainStakingMetadata() {
    return this.stores.chainStakingMetadata.getAll();
  }
  async getStakingMetadataByChain(chain, type = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_16__.StakingType.NOMINATED) {
    return this.stores.chainStakingMetadata.getByChainAndType(chain, type);
  }
  async updateNominatorMetadata(item) {
    return this.stores.nominatorMetadata.upsert(item);
  }
  async getNominatorMetadata() {
    return this.stores.nominatorMetadata.getAll();
  }
  async resetWallet(resetAll) {
    return new Promise((resolve, reject) => {
      const stores = [this.stores.balance, this.stores.nft, this.stores.nftCollection, this.stores.crowdloan, this.stores.staking, this.stores.transaction, this.stores.nominatorMetadata];
      if (resetAll) {
        stores.push(this.stores.chain, this.stores.asset);
      }
      const promises = stores.map(store => store.clear());
      Promise.all(promises).then(() => {
        resolve();
      }).catch(e => {
        reject(e);
      });
    });
  }
  async setMantaPayData(data) {
    await this._db.mantaPay.put(data); // just override if exist
  }

  async updateMantaPayData(key, data) {
    await this._db.mantaPay.update(key, data); // just override if exist
  }

  async getMantaPayData(key) {
    return this._db.mantaPay.get({
      key
    });
  }
  async deleteMantaPayConfig(key) {
    return this.stores.mantaPay.deleteRecord(key);
  }
  subscribeMantaPayConfig(chain, callback) {
    this.stores.mantaPay.subscribeMantaPayConfig(chain).subscribe({
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      next: data => callback && callback(data)
    });
  }
  async getMantaPayConfig(chain) {
    return this.stores.mantaPay.getConfig(chain);
  }
  async getMantaPayFirstConfig(chain) {
    return this.stores.mantaPay.getFirstConfig(chain);
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/databases/index.ts":
/*!*************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/databases/index.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KoniDatabase)
/* harmony export */ });
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0


const DEFAULT_DATABASE = 'SubWalletDB_v2';
class KoniDatabase extends dexie__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(name = DEFAULT_DATABASE, schemaVersion = 11) {
    super(name);
    this.schemaVersion = schemaVersion;
    this.conditionalVersion(1, {
      // DO NOT declare all columns, only declare properties to be indexed
      // Read more: https://dexie.org/docs/Version/Version.stores()
      // Primary key is always the first entry
      chain: 'slug',
      asset: 'slug',
      price: 'currency',
      balances: '[tokenSlug+address], tokenSlug, address',
      nfts: '[chain+address+collectionId+id], [address+chain], chain, id, address, collectionId, name',
      nftCollections: '[chain+collectionId], chain, collectionId, collectionName',
      crowdloans: '[chain+address], chain, address',
      stakings: '[chain+address+type], [chain+address], chain, address, type',
      transactions: '[chain+address+extrinsicHash], &[chain+address+extrinsicHash], chain, address, extrinsicHash, action',
      migrations: '[key+name]',
      chainStakingMetadata: '[chain+type], chain, type',
      nominatorMetadata: '[chain+address+type], [chain+address], chain, address, type'
    });
    this.conditionalVersion(2, {
      metadata: 'genesisHash, chain'
    });
    this.conditionalVersion(3, {
      mantaPay: 'key, chain'
    });
  }
  conditionalVersion(version, schema, upgrade) {
    if (this.schemaVersion != null && this.schemaVersion < version) {
      return;
    }
    const dexieVersion = this.version(version).stores(schema);
    if (upgrade != null) {
      dexieVersion.upgrade(upgrade);
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Asset.ts":
/*!*************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Asset.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AssetStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class AssetStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async getAll() {
    return this.table.toArray();
  }
  async removeAssets(keys) {
    return this.table.where('slug').anyOfIgnoreCase(keys).delete();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Balance.ts":
/*!***************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Balance.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BalanceStore)
/* harmony export */ });
/* harmony import */ var _db_stores_BaseStoreWithAddress__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../db-stores/BaseStoreWithAddress */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddress.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class BalanceStore extends _db_stores_BaseStoreWithAddress__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async getBalanceMapByAddress(address) {
    const data = await this.table.where('address').equals(address).toArray();
    const balanceMap = {};
    data.forEach(storedBalance => {
      balanceMap[storedBalance.tokenSlug] = {
        tokenSlug: storedBalance.tokenSlug,
        state: storedBalance.state,
        free: storedBalance.free,
        locked: storedBalance.locked,
        substrateInfo: storedBalance.substrateInfo,
        timestamp: storedBalance.timestamp
      };
    });
    return balanceMap;
  }
  async removeBySlugs(tokenSlugs) {
    return this.table.where('tokenSlug').anyOfIgnoreCase(tokenSlugs).delete();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts":
/*!*****************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/BaseStore.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseStore)
/* harmony export */ });
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/logger.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class BaseStore {
  constructor(table) {
    this._table = table;
    this.logger = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_0__.logger)(this.constructor.name);
  }
  get table() {
    return this._table;
  }
  upsert(record) {
    return this.table.put(record);
  }
  bulkUpsert(records) {
    return this.table.bulkPut(records);
  }
  remove(record) {
    return this.table.delete(record);
  }
  clear() {
    return this.table.clear();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddress.ts":
/*!****************************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddress.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseStoreWithAddress)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class BaseStoreWithAddress extends _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  removeAllByAddress(address) {
    const conditions = {
      address
    };
    return this.table.where(conditions).delete();
  }

  // async getDataByAddressAsObject (address: string) {
  //   const data = await this.table.where('address').equals(address).toArray();
  //
  //   console.log('from store', data);
  //
  //   return {};
  // }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddressAndChain.ts":
/*!************************************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddressAndChain.ts ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseStoreWithAddressAndChain)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class BaseStoreWithAddressAndChain extends _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  convertToJsonObject(items) {
    return items.reduce((a, v) => ({
      ...a,
      [v.chain]: v
    }), {});
  }
  removeAllByAddress(address) {
    return this.table.where('address').equalsIgnoreCase(address).delete();
  }
  async getDataByAddressAsObject(address) {
    const data = await this.table.where('address').equals(address).toArray();
    return this.convertToJsonObject(data);
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithChain.ts":
/*!**************************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/BaseStoreWithChain.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseStoreWithChain)
/* harmony export */ });
/* harmony import */ var _BaseStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class BaseStoreWithChain extends _BaseStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  convertToJsonObject(items) {
    return items.reduce((a, v) => ({
      ...a,
      [v.chain]: v
    }), {});
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Chain.ts":
/*!*************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Chain.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChainStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class ChainStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async getAll() {
    return this.table.toArray();
  }
  async removeChains(chains) {
    return this.table.where('slug').anyOfIgnoreCase(chains).delete();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/ChainStakingMetadata.ts":
/*!****************************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/ChainStakingMetadata.ts ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChainStakingMetadataStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStoreWithChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithChain.ts");
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0




class ChainStakingMetadataStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithChain__WEBPACK_IMPORTED_MODULE_1__["default"] {
  async getAll() {
    return this.table.toArray();
  }
  subscribeByChain(chains) {
    return (0,dexie__WEBPACK_IMPORTED_MODULE_0__.liveQuery)(() => this.getByChains(chains));
  }
  getByChains(chains) {
    if (chains.length === 0) {
      return this.getAll();
    }
    return this.table.where('chain').anyOfIgnoreCase(chains).toArray();
  }
  getByChainAndType(chain, type = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED) {
    return this.table.where({
      chain,
      type
    }).first();
  }
  async removeByChains(chains) {
    return this.table.where('chain').anyOfIgnoreCase(chains).delete();
  }
  updateByChainAndType(chain, type = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.NOMINATED, changes) {
    return this.table.update([chain, type], changes);
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Crowdloan.ts":
/*!*****************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Crowdloan.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CrowdloanStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStoreWithAddressAndChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddressAndChain.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class CrowdloanStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_0__["default"] {
  getCrowdloan(address) {
    return this.table.where('address').equals(address).toArray();
  }
  deleteByChainAndAddress(chain, address) {
    return this.table.where({
      chain,
      address
    }).delete();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/MantaPay.ts":
/*!****************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/MantaPay.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MantaPayStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MantaPayStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStore__WEBPACK_IMPORTED_MODULE_1__["default"] {
  async getAll() {
    return this.table.toArray();
  }
  subscribeMantaPayConfig(chain) {
    return (0,dexie__WEBPACK_IMPORTED_MODULE_0__.liveQuery)(
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
    () => this.table.where({
      chain
    }).filter(data => (data === null || data === void 0 ? void 0 : data.key) && (data === null || data === void 0 ? void 0 : data.key.startsWith('config'))).toArray());
  }
  getConfig(chain) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
    return this.table.where({
      chain
    }).filter(data => (data === null || data === void 0 ? void 0 : data.key) && (data === null || data === void 0 ? void 0 : data.key.startsWith('config'))).toArray();
  }
  getFirstConfig(chain) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
    return this.table.where({
      chain
    }).filter(data => (data === null || data === void 0 ? void 0 : data.key) && (data === null || data === void 0 ? void 0 : data.key.startsWith('config'))).first();
  }
  deleteRecord(key) {
    return this.table.where('key').equals(key).delete();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Metadata.ts":
/*!****************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Metadata.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MetadataStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithChain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStoreWithChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithChain.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class MetadataStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithChain__WEBPACK_IMPORTED_MODULE_0__["default"] {
  getMetadata(chain) {
    return this.table.where('chain').equals(chain).first();
  }
  upsertMetadata(chain, metadata) {
    return this.table.put(metadata, chain);
  }
  getMetadataByGenesisHash(genesisHash) {
    return this.table.get(genesisHash);
  }
  updateMetadataByGenesisHash(genesisHash, metadata) {
    return this.table.put(metadata, genesisHash);
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Migration.ts":
/*!*****************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Migration.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MigrationStore)
/* harmony export */ });
/* harmony import */ var _BaseStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class MigrationStore extends _BaseStore__WEBPACK_IMPORTED_MODULE_0__["default"] {}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Nft.ts":
/*!***********************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Nft.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NftStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStoreWithAddressAndChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddressAndChain.ts");
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class NftStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_1__["default"] {
  getNft(addresses, chainList = []) {
    if (addresses.length) {
      return this.table.where('address').anyOfIgnoreCase(addresses).and(item => chainList && chainList.includes(item.chain)).toArray();
    }

    // return this.table.filter((item) => !chainHashes.length || chainHashes.includes(item.chainHash)).toArray();
    return this.table.filter(item => chainList && chainList.includes(item.chain)).toArray();
  }
  subscribeNft(addresses, chainList = []) {
    return (0,dexie__WEBPACK_IMPORTED_MODULE_0__.liveQuery)(() => this.getNft(addresses, chainList));
  }
  cleanUpNfts(chain, address, collectionIds, nftIds) {
    return this.table.where({
      address,
      chain
    }).and(nft => collectionIds.includes(nft.collectionId) && !nftIds.includes(nft.id)).delete();
  }
  deleteNftsByChainAndOwner(chain, address, collectionIds) {
    return this.table.where({
      address,
      chain
    }).and(nft => collectionIds.includes(nft.collectionId)).delete();
  }
  deleteNftByAddress(addresses) {
    return this.table.where('address').anyOfIgnoreCase(addresses).delete();
  }
  deleteNftItem(chain, addresses, nftItem) {
    return this.table.where('address').anyOfIgnoreCase(addresses).filter(storedItem => storedItem.chain === chain && storedItem.collectionId === nftItem.collectionId && storedItem.id === nftItem.id).delete();
  }
  deleteNftsByCollection(chain, collectionId) {
    return this.table.where({
      chain,
      collectionId
    }).delete();
  }
  removeNfts(chain, address, collectionId, nftIds) {
    return this.table.where({
      chain,
      address,
      collectionId
    }).filter(item => nftIds.includes(item.id || '')).delete();
  }
  removeNftsByAddress(addresses) {
    return this.table.where('address').anyOfIgnoreCase(addresses).delete();
  }

  // reformatCollectionIds (items: INft[]) {
  //   return items.map((item) => {
  //     item.collectionId = item.collectionId?.toLowerCase();

  //     return item;
  //   });
  // }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/NftCollection.ts":
/*!*********************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/NftCollection.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NftCollectionStore)
/* harmony export */ });
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
/* harmony import */ var _BaseStoreWithChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BaseStoreWithChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithChain.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class NftCollectionStore extends _BaseStoreWithChain__WEBPACK_IMPORTED_MODULE_1__["default"] {
  subscribeNftCollection(chains) {
    return (0,dexie__WEBPACK_IMPORTED_MODULE_0__.liveQuery)(() => this.getNftCollection(chains));
  }
  getNftCollection(chainList) {
    if (chainList && chainList.length > 0) {
      return this.table.where('chain').anyOfIgnoreCase(chainList).toArray();
    }
    return this.table.toArray();
  }
  removeCollection(chain, collectionId) {
    return this.table.where({
      chain,
      collectionId
    }).delete();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/NominatorMetadata.ts":
/*!*************************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/NominatorMetadata.ts ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NominatorMetadataStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStoreWithAddressAndChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddressAndChain.ts");
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0




class NominatorMetadataStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_1__["default"] {
  async getAll() {
    return this.table.filter(item => item.status !== _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING).toArray();
  }
  subscribeByAddresses(addresses) {
    return (0,dexie__WEBPACK_IMPORTED_MODULE_0__.liveQuery)(() => this.getByAddress(addresses));
  }
  subscribeAll() {
    return (0,dexie__WEBPACK_IMPORTED_MODULE_0__.liveQuery)(() => this.getAll());
  }
  getByAddress(addresses) {
    return this.table.where('address').anyOfIgnoreCase(addresses).and(item => item.status !== _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingStatus.NOT_STAKING).toArray();
  }
  async removeByAddress(address) {
    return this.table.where('address').anyOfIgnoreCase(address).delete();
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Price.ts":
/*!*************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Price.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Price)
/* harmony export */ });
/* harmony import */ var _BaseStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseStore */ "../extension-base/src/services/storage-service/db-stores/BaseStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class Price extends _BaseStore__WEBPACK_IMPORTED_MODULE_0__["default"] {}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Staking.ts":
/*!***************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Staking.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StakingStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStoreWithAddressAndChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddressAndChain.ts");
/* harmony import */ var dexie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dexie */ "../../node_modules/dexie/dist/modern/dexie.mjs");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0




class StakingStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_1__["default"] {
  getSingleRecord(chain, address, type) {
    return this.table.where('[chain+address+type]').equals([chain, address, type]).first();
  }
  getStakings(addresses, chainList = []) {
    if (addresses.length) {
      return this.table.where('address').anyOfIgnoreCase(addresses).and(item => chainList && chainList.includes(item.chain) && parseFloat(item.balance) > 0).toArray();
    }
    return this.table.filter(item => chainList && chainList.includes(item.chain) && parseFloat(item.balance) > 0).toArray();
  }
  getStakingsByChains(chainList) {
    return this.table.filter(item => chainList.includes(item.chain) && parseFloat(item.balance) > 0).toArray();
  }
  getPooledStakings(addresses, chainList = []) {
    if (addresses.length) {
      return this.table.where('address').anyOfIgnoreCase(addresses).and(item => (!chainList.length || chainList.includes(item.chain)) && parseFloat(item.balance) > 0 && item.type === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.POOLED).toArray();
    }
    return this.table.filter(item => (!chainList.length || chainList.includes(item.chain)) && parseFloat(item.balance) > 0 && item.type === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_2__.StakingType.POOLED).toArray();
  }
  subscribeStaking(addresses, chainList = []) {
    return (0,dexie__WEBPACK_IMPORTED_MODULE_0__.liveQuery)(() => this.getStakings(addresses, chainList));
  }
}

/***/ }),

/***/ "../extension-base/src/services/storage-service/db-stores/Transaction.ts":
/*!*******************************************************************************!*\
  !*** ../extension-base/src/services/storage-service/db-stores/Transaction.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TransactionStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/storage-service/db-stores/BaseStoreWithAddressAndChain */ "../extension-base/src/services/storage-service/db-stores/BaseStoreWithAddressAndChain.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


class TransactionStore extends _subwallet_extension_base_services_storage_service_db_stores_BaseStoreWithAddressAndChain__WEBPACK_IMPORTED_MODULE_0__["default"] {
  async getHistoryByAddressAsObject(address) {
    if (address === 'ALL') {
      // Todo: Migrate to all account key
      return this.table.toArray();
    }
    return this.table.where('address').equals(address).toArray();
  }
  async queryHistory(query) {
    if (!(query !== null && query !== void 0 && query.address) && !(query !== null && query !== void 0 && query.chain)) {
      return this.table.toArray();
    } else {
      const queryObject = {};
      if (query !== null && query !== void 0 && query.chain) {
        queryObject.chain = query === null || query === void 0 ? void 0 : query.chain;
      }
      if (query !== null && query !== void 0 && query.extrinsicHash) {
        queryObject.extrinsicHash = query === null || query === void 0 ? void 0 : query.extrinsicHash;
      }
      if (query !== null && query !== void 0 && query.address) {
        queryObject.address = query === null || query === void 0 ? void 0 : query.address;
      }
      return this.table.where(queryObject).toArray();
    }
  }
  async bulkUpsert(records) {
    await this.table.bulkPut(records);
    return true;
  }
  async updateWithQuery(query, update) {
    await this.table.where(query).modify(record => {
      return Object.assign(record, update);
    });
    return true;
  }
}

/***/ }),

/***/ "../extension-base/src/services/subscan-service/index.ts":
/*!***************************************************************!*\
  !*** ../extension-base/src/services/subscan-service/index.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SubscanService": () => (/* binding */ SubscanService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/SWError */ "../extension-base/src/background/errors/SWError.ts");
/* harmony import */ var _subwallet_extension_base_services_subscan_service_subscan_chain_map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/services/subscan-service/subscan-chain-map */ "../extension-base/src/services/subscan-service/subscan-chain-map.ts");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ "../../node_modules/cross-fetch/dist/browser-ponyfill.js");
/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0




class SubscanService {
  limitRate = 2; // limit per interval check
  intervalCheck = 1000; // interval check in ms
  maxRetry = 9; // interval check in ms
  requestMap = {};
  nextId = 0;
  isRunning = false;
  getId() {
    return this.nextId++;
  }
  constructor(options) {
    this.limitRate = (options === null || options === void 0 ? void 0 : options.limitRate) || this.limitRate;
    this.intervalCheck = (options === null || options === void 0 ? void 0 : options.intervalCheck) || this.intervalCheck;
    this.maxRetry = (options === null || options === void 0 ? void 0 : options.maxRetry) || this.maxRetry;
  }
  getApiUrl(chain, path) {
    const subscanChain = _subwallet_extension_base_services_subscan_service_subscan_chain_map__WEBPACK_IMPORTED_MODULE_1__["default"][chain];
    if (!subscanChain) {
      throw new _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_2__.SWError('NOT_SUPPORTED', 'Chain is not supported');
    }
    return `https://${chain}.api.subscan.io/${path}`;
  }
  postRequest(url, body) {
    return cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    });
  }
  addRequest(run) {
    const newId = this.getId();
    return new Promise((resolve, reject) => {
      this.requestMap[newId] = {
        id: newId,
        status: 'pending',
        retry: -1,
        run,
        resolve,
        reject
      };
      if (!this.isRunning) {
        this.process();
      }
    });
  }
  process() {
    this.isRunning = true;
    const maxRetry = this.maxRetry;
    const interval = setInterval(() => {
      const remainingRequests = Object.values(this.requestMap);
      if (remainingRequests.length === 0) {
        this.isRunning = false;
        clearInterval(interval);
        return;
      }

      // Get first this.limit requests base on id
      const requests = remainingRequests.filter(request => request.status !== 'running').sort((a, b) => a.id - b.id).slice(0, this.limitRate);

      // Start requests
      requests.forEach(request => {
        request.status = 'running';
        request.run().then(rs => {
          request.resolve(rs);
        }).catch(e => {
          if (request.retry < maxRetry) {
            request.status = 'pending';
            request.retry++;
          } else {
            // Reject request
            request.reject(new _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_2__.SWError('MAX_RETRY', String(e)));
          }
        });
      });
    }, this.intervalCheck);
  }

  // Implement Subscan API
  getMultiChainBalance(address) {
    return this.addRequest(async () => {
      const rs = await this.postRequest(this.getApiUrl('polkadot', 'api/scan/multiChain/account'), {
        address
      });
      if (rs.status !== 200) {
        throw new _subwallet_extension_base_background_errors_SWError__WEBPACK_IMPORTED_MODULE_2__.SWError('SubscanService.getMultiChainBalance', await rs.text());
      }
      const jsonData = await rs.json();
      return jsonData.data;
    });
  }
}

/***/ }),

/***/ "../extension-base/src/services/subscan-service/subscan-chain-map.ts":
/*!***************************************************************************!*\
  !*** ../extension-base/src/services/subscan-service/subscan-chain-map.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SUBSCAN_CHAIN_MAP_REVERSE": () => (/* binding */ SUBSCAN_CHAIN_MAP_REVERSE),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0

const SUBSCAN_CHAIN_MAP = {
  polkadot: 'polkadot',
  kusama: 'kusama',
  moonbeam: 'moonbeam',
  acala: 'acala',
  astar: 'astar',
  shiden: 'shiden',
  shibuya: 'shibuya',
  westend: 'westend',
  moonbase: 'moonbase',
  moonriver: 'moonriver',
  turing: 'turing',
  bifrost_testnet: 'bifrost-testnet',
  calamari: 'calamari',
  statemint: 'statemint',
  pioneer: 'pioneer',
  parallel: 'parallel',
  clover: 'clover',
  hydradx_main: 'hydradx',
  edgeware: 'edgeware',
  centrifuge: 'centrifuge',
  interlay: 'interlay',
  nodle: 'nodle',
  darwinia: 'darwinia',
  polkadex: 'polkadex',
  aleph: 'alephzero',
  dolphin: 'dolphin',
  efinity: 'efinity',
  composableFinance: 'composable',
  phala: 'phala',
  crust: 'crust',
  statemine: 'statemine',
  karura: 'karura',
  khala: 'khala',
  kilt: 'spiritnet',
  basilisk: 'basilisk',
  altair: 'altair',
  heiko: 'parallel-heiko',
  kintsugi: 'kintsugi',
  picasso: 'picasso',
  quartz: 'quartz',
  unique_network: 'unique',
  genshiro: 'genshiro',
  zeitgeist: 'zeitgeist',
  sakura: 'sakura',
  shadow: 'shadow',
  robonomics: 'robonomics',
  integritee: 'integritee',
  acala_testnet: 'acala-testnet',
  mangatax: 'mangatax',
  encointer: 'encointer',
  subspace_gemini_2a: 'subspace',
  origintrail: 'origintrail',
  bajun: 'bajun',
  snow: 'snow',
  kilt_peregrine: 'kilt-testnet',
  polymesh: 'polymesh'
};
const SUBSCAN_CHAIN_MAP_REVERSE = Object.fromEntries(Object.entries(SUBSCAN_CHAIN_MAP).map(([k, v]) => [v, k]));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (SUBSCAN_CHAIN_MAP);

/***/ }),

/***/ "../extension-base/src/services/transaction-service/constants.ts":
/*!***********************************************************************!*\
  !*** ../extension-base/src/services/transaction-service/constants.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TRANSACTION_TIMEOUT": () => (/* binding */ TRANSACTION_TIMEOUT)
/* harmony export */ });
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0

const TRANSACTION_TIMEOUT = 2 * 60 * 1000;

/***/ }),

/***/ "../extension-base/src/services/transaction-service/event-parser/index.ts":
/*!********************************************************************************!*\
  !*** ../extension-base/src/services/transaction-service/event-parser/index.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseTransferEventLogs": () => (/* binding */ parseTransferEventLogs),
/* harmony export */   "parseXcmEventLogs": () => (/* binding */ parseXcmEventLogs)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


function parseXcmEventLogs(historyItem, eventLogs, chain, sendingTokenInfo, chainInfo) {
  for (let index = 0; index < eventLogs.length; index++) {
    const record = eventLogs[index];
    const {
      decimals: nativeDecimals,
      symbol: nativeSymbol
    } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfo);
    if (record.event.section === 'balances' && record.event.method.toLowerCase() === 'withdraw') {
      var _record$event$data$;
      if ((_record$event$data$ = record.event.data[1]) !== null && _record$event$data$ !== void 0 && _record$event$data$.toString()) {
        var _record$event$data$2;
        historyItem.fee = {
          value: (_record$event$data$2 = record.event.data[1]) === null || _record$event$data$2 === void 0 ? void 0 : _record$event$data$2.toString(),
          symbol: nativeSymbol,
          decimals: nativeDecimals
        };
      }
    } else if (record.event.section === 'tokens' && record.event.method.toLowerCase() === 'withdrawn') {
      var _record$event$data$3;
      if (!historyItem.fee && (_record$event$data$3 = record.event.data[2]) !== null && _record$event$data$3 !== void 0 && _record$event$data$3.toString()) {
        var _record$event$data$4;
        historyItem.fee = {
          value: (_record$event$data$4 = record.event.data[2]) === null || _record$event$data$4 === void 0 ? void 0 : _record$event$data$4.toString(),
          symbol: nativeSymbol,
          decimals: nativeDecimals
        };
      }
    }
  }
}
function parseTransferEventLogs(historyItem, eventLogs, chain, sendingTokenInfo, chainInfo) {
  for (let index = 0; index < eventLogs.length; index++) {
    const record = eventLogs[index];
    if (['genshiro_testnet', 'genshiro', 'equilibrium_parachain'].includes(chain) && sendingTokenInfo) {
      if (record.event.section === 'transactionPayment' && record.event.method.toLowerCase() === 'transactionfeepaid') {
        var _record$event$data$5;
        if ((_record$event$data$5 = record.event.data[1]) !== null && _record$event$data$5 !== void 0 && _record$event$data$5.toString()) {
          var _record$event$data$6;
          historyItem.fee = {
            value: ((_record$event$data$6 = record.event.data[1]) === null || _record$event$data$6 === void 0 ? void 0 : _record$event$data$6.toString()) || '0',
            symbol: sendingTokenInfo.symbol,
            decimals: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getAssetDecimals)(sendingTokenInfo)
          };
        }
      }
    }
    const {
      decimals: nativeDecimals,
      symbol: nativeSymbol
    } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_0__._getChainNativeTokenBasicInfo)(chainInfo);
    if (record.event.section === 'balances' && record.event.method.toLowerCase() === 'withdraw') {
      var _record$event$data$7;
      if ((_record$event$data$7 = record.event.data[1]) !== null && _record$event$data$7 !== void 0 && _record$event$data$7.toString()) {
        var _record$event$data$8;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        historyItem.fee = {
          value: ((_record$event$data$8 = record.event.data[1]) === null || _record$event$data$8 === void 0 ? void 0 : _record$event$data$8.toString()) || '0',
          symbol: nativeSymbol,
          decimals: nativeDecimals
        };
      }
    }
  }
}

/***/ }),

/***/ "../extension-base/src/services/transaction-service/helpers/index.ts":
/*!***************************************************************************!*\
  !*** ../extension-base/src/services/transaction-service/helpers/index.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getBaseTransactionInfo": () => (/* binding */ getBaseTransactionInfo),
/* harmony export */   "getTransactionId": () => (/* binding */ getTransactionId),
/* harmony export */   "getValidationId": () => (/* binding */ getValidationId),
/* harmony export */   "isSubstrateTransaction": () => (/* binding */ isSubstrateTransaction)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


let transactionCount = 0;
let validationCount = 0;
const getTransactionId = (chainType, chain, isInternal, isWalletConnect = false) => {
  return `${isInternal ? 'internal' : !isWalletConnect ? 'external' : 'wallet-connect'}.${chainType}.${chain}.${Date.now()}.${++transactionCount}`;
};
const getValidationId = (chainType, chain) => {
  return `${chainType}.${chain}.${Date.now()}.${++validationCount}`;
};
const isSubstrateTransaction = tx => {
  return !!tx.send;
};
const typeName = type => {
  switch (type) {
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.TRANSFER_BALANCE:
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.TRANSFER_TOKEN:
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.TRANSFER_XCM:
      return 'Transfer';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.SEND_NFT:
      return 'Send NFT';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.CROWDLOAN:
      return 'Crowdloan contribution';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_JOIN_POOL:
      return 'Join pool';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_LEAVE_POOL:
      return 'Leave pool';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_BOND:
      return 'Bond';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_UNBOND:
      return 'Unbond';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_CLAIM_REWARD:
      return 'Claim reward';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_WITHDRAW:
      return 'Withdraw';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_CANCEL_UNSTAKE:
      return 'Cancel unstake';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_COMPOUNDING:
      return 'Stake compound';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.EVM_EXECUTE:
      return 'EVM execute';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_CANCEL_COMPOUNDING:
      return 'Cancel compounding';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.STAKING_POOL_WITHDRAW:
      return 'Withdraw pool';
    case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_0__.ExtrinsicType.UNKNOWN:
    default:
      return 'unknown';
  }
};
const getBaseTransactionInfo = (transaction, chainInfoMap) => {
  var _chainInfoMap$transac;
  return `${typeName(transaction.extrinsicType)} on ${((_chainInfoMap$transac = chainInfoMap[transaction.chain]) === null || _chainInfoMap$transac === void 0 ? void 0 : _chainInfoMap$transac.name) || 'unknown network'}`;
};

/***/ }),

/***/ "../extension-base/src/services/transaction-service/index.ts":
/*!*******************************************************************!*\
  !*** ../extension-base/src/services/transaction-service/index.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TransactionService)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/EvmProviderError */ "../extension-base/src/background/errors/EvmProviderError.ts");
/* harmony import */ var _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/background/errors/TransactionError */ "../extension-base/src/background/errors/TransactionError.ts");
/* harmony import */ var _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/background/KoniTypes */ "../extension-base/src/background/KoniTypes.ts");
/* harmony import */ var _subwallet_extension_base_background_warnings_TransactionWarning__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @subwallet/extension-base/background/warnings/TransactionWarning */ "../extension-base/src/background/warnings/TransactionWarning.ts");
/* harmony import */ var _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @subwallet/extension-base/constants */ "../extension-base/src/constants/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/constants */ "../extension-base/src/services/chain-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @subwallet/extension-base/services/request-service/constants */ "../extension-base/src/services/request-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_transaction_service_constants__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @subwallet/extension-base/services/transaction-service/constants */ "../extension-base/src/services/transaction-service/constants.ts");
/* harmony import */ var _subwallet_extension_base_services_transaction_service_event_parser__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @subwallet/extension-base/services/transaction-service/event-parser */ "../extension-base/src/services/transaction-service/event-parser/index.ts");
/* harmony import */ var _subwallet_extension_base_services_transaction_service_helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/services/transaction-service/helpers */ "../extension-base/src/services/transaction-service/helpers/index.ts");
/* harmony import */ var _subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @subwallet/extension-base/services/transaction-service/utils */ "../extension-base/src/services/transaction-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/helpers */ "../extension-base/src/services/wallet-connect-service/helpers.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth */ "../extension-base/src/utils/eth.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth_mergeTransactionAndSignature__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth/mergeTransactionAndSignature */ "../extension-base/src/utils/eth/mergeTransactionAndSignature.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth/parseTransaction */ "../extension-base/src/utils/eth/parseTransaction/index.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/index.js");
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ "../../node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethereumjs-util */ "../../node_modules/ethereumjs-util/dist.browser/index.js");
/* harmony import */ var ethereumjs_util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ethers */ "../../node_modules/ethers/lib.esm/transaction/transaction.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eventemitter3 */ "../../node_modules/eventemitter3/index.mjs");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/is/hex.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0

























class TransactionService {
  transactionSubject = new rxjs__WEBPACK_IMPORTED_MODULE_4__.BehaviorSubject({});
  watchTransactionSubscribes = {};
  get transactions() {
    return this.transactionSubject.getValue();
  }
  constructor(chainService, eventService, requestService, balanceService, historyService, notificationService, databaseService) {
    this.chainService = chainService;
    this.eventService = eventService;
    this.requestService = requestService;
    this.balanceService = balanceService;
    this.historyService = historyService;
    this.notificationService = notificationService;
    this.databaseService = databaseService;
  }
  get allTransactions() {
    return Object.values(this.transactions);
  }
  get processingTransactions() {
    return this.allTransactions.filter(t => t.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.QUEUED || t.status === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.SUBMITTING);
  }
  getTransaction(id) {
    return this.transactions[id];
  }
  checkDuplicate(transaction) {
    // Check duplicated transaction
    const existed = this.processingTransactions.filter(item => item.address === transaction.address && item.chain === transaction.chain);
    if (existed.length > 0) {
      return [new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.DUPLICATE_TRANSACTION)];
    }
    return [];
  }
  async generalValidate(validationInput) {
    const validation = {
      ...validationInput,
      errors: validationInput.errors || [],
      warnings: validationInput.warnings || []
    };
    const {
      additionalValidator,
      address,
      chain,
      edAsWarning,
      extrinsicType,
      isTransferAll,
      transaction
    } = validation;

    // Check duplicate transaction
    validation.errors.push(...this.checkDuplicate(validationInput));

    // Return unsupported error if not found transaction
    if (!transaction) {
      if (extrinsicType === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.SEND_NFT) {
        validation.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.UNSUPPORTED, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('This feature is not yet available for this NFT')));
      } else {
        validation.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.UNSUPPORTED));
      }
    }
    const validationResponse = {
      status: undefined,
      ...validation
    };

    // Estimate fee
    const estimateFee = {
      symbol: '',
      decimals: 0,
      value: ''
    };
    const chainInfo = this.chainService.getChainInfoByKey(chain);
    if (!chainInfo) {
      validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.INTERNAL_ERROR, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Cannot find network')));
    } else {
      const {
        decimals,
        symbol
      } = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainNativeTokenBasicInfo)(chainInfo);
      estimateFee.decimals = decimals;
      estimateFee.symbol = symbol;
      if (transaction) {
        try {
          if ((0,_subwallet_extension_base_services_transaction_service_helpers__WEBPACK_IMPORTED_MODULE_8__.isSubstrateTransaction)(transaction)) {
            estimateFee.value = (await transaction.paymentInfo(address)).partialFee.toString();
          } else {
            const web3 = this.chainService.getEvmApi(chain);
            if (!web3) {
              validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.CHAIN_DISCONNECTED, undefined));
            } else {
              const gasPrice = await web3.api.eth.getGasPrice();
              const gasLimit = await web3.api.eth.estimateGas(transaction);
              estimateFee.value = (gasLimit * parseInt(gasPrice)).toString();
            }
          }
        } catch (e) {
          const error = e;
          if (error.message.includes('gas required exceeds allowance') && error.message.includes('insufficient funds')) {
            validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.NOT_ENOUGH_BALANCE));
          }
          estimateFee.value = '0';
        }
      }
    }
    validationResponse.estimateFee = estimateFee;

    // Read-only account
    const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_9__["default"].getPair(address);
    if (!pair) {
      validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.INTERNAL_ERROR, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Unable to find account')));
    } else {
      var _pair$meta;
      if ((_pair$meta = pair.meta) !== null && _pair$meta !== void 0 && _pair$meta.isReadOnly) {
        validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.INTERNAL_ERROR, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('This account is watch-only')));
      }
    }

    // Balance
    const transferNative = validationResponse.transferNativeAmount || '0';
    const nativeTokenInfo = this.chainService.getNativeTokenInfo(chain);
    const balance = await this.balanceService.getTokenFreeBalance(address, chain, nativeTokenInfo.slug);
    const existentialDeposit = nativeTokenInfo.minAmount || '0';
    const feeNum = parseInt(estimateFee.value);
    const balanceNum = parseInt(balance.value);
    const edNum = parseInt(existentialDeposit);
    const transferNativeNum = parseInt(transferNative);
    if (!new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](balance.value).gt(0)) {
      validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.NOT_ENOUGH_BALANCE));
    }
    if (transferNativeNum + feeNum > balanceNum) {
      if (!isTransferAll) {
        validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.NOT_ENOUGH_BALANCE));
      } else {
        if ([..._subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_10__._TRANSFER_CHAIN_GROUP.acala, ..._subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_10__._TRANSFER_CHAIN_GROUP.genshiro, ..._subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_10__._TRANSFER_CHAIN_GROUP.bitcountry, ..._subwallet_extension_base_services_chain_service_constants__WEBPACK_IMPORTED_MODULE_10__._TRANSFER_CHAIN_GROUP.statemine].includes(chain)) {
          // Chain not have transfer all function
          validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.NOT_ENOUGH_BALANCE));
        }
      }
    }
    if (!isTransferAll) {
      if (balanceNum - (transferNativeNum + feeNum) < edNum) {
        if (edAsWarning) {
          validationResponse.warnings.push(new _subwallet_extension_base_background_warnings_TransactionWarning__WEBPACK_IMPORTED_MODULE_11__.TransactionWarning(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxWarningCode.NOT_ENOUGH_EXISTENTIAL_DEPOSIT));
        } else {
          validationResponse.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.NOT_ENOUGH_EXISTENTIAL_DEPOSIT));
        }
      }
    }

    // Validate transaction with additionalValidator method
    additionalValidator && (await additionalValidator(validationResponse));
    return validationResponse;
  }
  getTransactionSubject() {
    return this.transactionSubject;
  }
  fillTransactionDefaultInfo(transaction) {
    const isInternal = !transaction.url;
    const transactionId = (0,_subwallet_extension_base_services_transaction_service_helpers__WEBPACK_IMPORTED_MODULE_8__.getTransactionId)(transaction.chainType, transaction.chain, isInternal, (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_12__.isWalletConnectRequest)(transaction.id));
    return {
      ...transaction,
      createdAt: new Date().getTime(),
      updatedAt: new Date().getTime(),
      errors: transaction.errors || [],
      warnings: transaction.warnings || [],
      url: transaction.url || _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_13__.EXTENSION_REQUEST_URL,
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.QUEUED,
      isInternal,
      id: transactionId,
      extrinsicHash: transactionId
    };
  }
  async addTransaction(inputTransaction) {
    const transactions = this.transactions;
    // Fill transaction default info
    const transaction = this.fillTransactionDefaultInfo(inputTransaction);

    // Add Transaction
    transactions[transaction.id] = transaction;
    this.transactionSubject.next({
      ...transactions
    });
    return await this.sendTransaction(transaction);
  }
  generateBeforeHandleResponseErrors(errors) {
    return {
      errors,
      additionalValidator: undefined,
      address: '',
      chain: '',
      chainType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ChainType.SUBSTRATE,
      data: undefined,
      extrinsicType: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.UNKNOWN,
      transferNativeAmount: undefined,
      url: undefined,
      warnings: []
    };
  }
  async handleTransaction(transaction) {
    const validatedTransaction = await this.generalValidate(transaction);
    const stopByErrors = validatedTransaction.errors.length > 0;
    const stopByWarnings = validatedTransaction.warnings.length > 0 && !validatedTransaction.ignoreWarnings;
    if (stopByErrors || stopByWarnings) {
      // @ts-ignore
      'transaction' in validatedTransaction && delete validatedTransaction.transaction;
      'additionalValidator' in validatedTransaction && delete validatedTransaction.additionalValidator;
      'eventsHandler' in validatedTransaction && delete validatedTransaction.eventsHandler;
      return validatedTransaction;
    }
    validatedTransaction.warnings = [];
    const emitter = await this.addTransaction(validatedTransaction);
    await new Promise(resolve => {
      emitter.on('signed', data => {
        validatedTransaction.id = data.id;
        validatedTransaction.extrinsicHash = data.extrinsicHash;
        resolve();
      });
      emitter.on('error', data => {
        if (data.errors.length > 0) {
          validatedTransaction.errors.push(...data.errors);
          resolve();
        }
      });
    });

    // @ts-ignore
    'transaction' in validatedTransaction && delete validatedTransaction.transaction;
    'additionalValidator' in validatedTransaction && delete validatedTransaction.additionalValidator;
    'eventsHandler' in validatedTransaction && delete validatedTransaction.eventsHandler;
    return validatedTransaction;
  }
  async sendTransaction(transaction) {
    // Send Transaction
    const emitter = transaction.chainType === 'substrate' ? this.signAndSendSubstrateTransaction(transaction) : await this.signAndSendEvmTransaction(transaction);
    const {
      eventsHandler
    } = transaction;
    emitter.on('signed', data => {
      this.onSigned(data);
    });
    emitter.on('send', data => {
      this.onSend(data);
    });
    emitter.on('extrinsicHash', data => {
      this.onHasTransactionHash(data);
    });
    emitter.on('success', data => {
      this.handlePostProcessing(data.id);
      this.onSuccess(data);
    });
    emitter.on('error', data => {
      // this.handlePostProcessing(data.id); // might enable this later
      this.onFailed({
        ...data,
        errors: [...data.errors, new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.INTERNAL_ERROR)]
      });
    });

    // Todo: handle any event with transaction.eventsHandler

    eventsHandler === null || eventsHandler === void 0 ? void 0 : eventsHandler(emitter);
    return emitter;
  }
  removeTransaction(id) {
    if (this.transactions[id]) {
      delete this.transactions[id];
      this.transactionSubject.next({
        ...this.transactions
      });
    }
  }
  updateTransaction(id, data) {
    const transaction = this.transactions[id];
    if (transaction) {
      this.transactions[id] = {
        ...transaction,
        ...data
      };
    }
  }
  getTransactionLink(id) {
    const transaction = this.getTransaction(id);
    const chainInfo = this.chainService.getChainInfoByKey(transaction.chain);
    return (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.getExplorerLink)(chainInfo, transaction.extrinsicHash, 'tx');
  }
  transactionToHistories(id, startBlock, nonce, eventLogs) {
    const transaction = this.getTransaction(id);
    const extrinsicType = transaction.extrinsicType;
    const historyItem = {
      origin: 'app',
      chain: transaction.chain,
      direction: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.TransactionDirection.SEND,
      type: transaction.extrinsicType,
      from: transaction.address,
      to: '',
      chainType: transaction.chainType,
      address: transaction.address,
      status: transaction.status,
      transactionId: transaction.id,
      extrinsicHash: transaction.extrinsicHash,
      time: transaction.createdAt,
      fee: transaction.estimateFee,
      blockNumber: 0,
      // Will be added in next step
      blockHash: '',
      // Will be added in next step
      nonce: nonce !== null && nonce !== void 0 ? nonce : 0,
      startBlock: startBlock || 0
    };
    const chainInfo = this.chainService.getChainInfoByKey(transaction.chain);
    const nativeAsset = (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getChainNativeTokenBasicInfo)(chainInfo);
    const baseNativeAmount = {
      value: '0',
      decimals: nativeAsset.decimals,
      symbol: nativeAsset.symbol
    };

    // Fill data by extrinsicType
    switch (extrinsicType) {
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.TRANSFER_BALANCE:
        {
          const inputData = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.to = inputData.to;
          const sendingTokenInfo = this.chainService.getAssetBySlug(inputData.tokenSlug);
          historyItem.amount = {
            value: inputData.value || '0',
            decimals: sendingTokenInfo.decimals || 0,
            symbol: sendingTokenInfo.symbol
          };
          eventLogs && (0,_subwallet_extension_base_services_transaction_service_event_parser__WEBPACK_IMPORTED_MODULE_15__.parseTransferEventLogs)(historyItem, eventLogs, transaction.chain, sendingTokenInfo, chainInfo);
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.TRANSFER_TOKEN:
        {
          const inputData = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.to = inputData.to;
          const sendingTokenInfo = this.chainService.getAssetBySlug(inputData.tokenSlug);
          historyItem.amount = {
            value: inputData.value || '0',
            decimals: sendingTokenInfo.decimals || 0,
            symbol: sendingTokenInfo.symbol
          };
          eventLogs && (0,_subwallet_extension_base_services_transaction_service_event_parser__WEBPACK_IMPORTED_MODULE_15__.parseTransferEventLogs)(historyItem, eventLogs, transaction.chain, sendingTokenInfo, chainInfo);
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.TRANSFER_XCM:
        {
          const inputData = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.to = inputData.to;
          const sendingTokenInfo = this.chainService.getAssetBySlug(inputData.tokenSlug);
          historyItem.amount = {
            value: inputData.value || '0',
            decimals: sendingTokenInfo.decimals || 0,
            symbol: sendingTokenInfo.symbol
          };

          // @ts-ignore
          historyItem.additionalInfo = {
            destinationChain: (inputData === null || inputData === void 0 ? void 0 : inputData.destinationNetworkKey) || '',
            originalChain: inputData.originNetworkKey || '',
            fee: transaction.estimateFee
          };
          eventLogs && (0,_subwallet_extension_base_services_transaction_service_event_parser__WEBPACK_IMPORTED_MODULE_15__.parseXcmEventLogs)(historyItem, eventLogs, transaction.chain, sendingTokenInfo, chainInfo);
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.SEND_NFT:
        {
          const inputData = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.to = inputData.recipientAddress;
          historyItem.amount = {
            decimals: 0,
            symbol: 'NFT',
            value: '1'
          };
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_BOND:
        {
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.amount = {
            ...baseNativeAmount,
            value: data.amount || '0'
          };
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_JOIN_POOL:
        {
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.amount = {
            ...baseNativeAmount,
            value: data.amount || '0'
          };
          historyItem.to = data.selectedPool.name || data.selectedPool.id.toString();
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_UNBOND:
        {
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.to = data.validatorAddress || '';
          historyItem.amount = {
            ...baseNativeAmount,
            value: data.amount || '0'
          };
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_LEAVE_POOL:
        {
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.to = data.nominatorMetadata.address || '';
          historyItem.amount = {
            ...baseNativeAmount,
            value: data.amount || '0'
          };
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_CLAIM_REWARD:
        {
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.amount = {
            ...baseNativeAmount,
            value: data.unclaimedReward || '0'
          };
        }
        break;
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_WITHDRAW:
        {
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.to = data.validatorAddress || '';
          historyItem.amount = {
            ...baseNativeAmount,
            value: data.unstakingInfo.claimable || '0'
          };
          break;
        }
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_CANCEL_UNSTAKE:
        {
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
          historyItem.amount = {
            ...baseNativeAmount,
            value: data.selectedUnstaking.claimable || '0'
          };
          break;
        }
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.EVM_EXECUTE:
        {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
          const data = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);

          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access
          historyItem.to = (data === null || data === void 0 ? void 0 : data.to) || '';
          break;
        }
      case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.UNKNOWN:
        break;
    }
    try {
      // Return one more history record if transaction send to account in the wallets
      const toAccount = (historyItem === null || historyItem === void 0 ? void 0 : historyItem.to) && _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_9__["default"].getPair(historyItem.to);
      if (toAccount) {
        const receiverHistory = {
          ...historyItem,
          address: toAccount.address,
          direction: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.TransactionDirection.RECEIVED
        };
        switch (extrinsicType) {
          case _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.TRANSFER_XCM:
            {
              const inputData = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
              receiverHistory.chain = inputData.destinationNetworkKey;
              break;
            }
          default:
            break;
        }
        return [historyItem, receiverHistory];
      }
    } catch (e) {
      console.warn(e);
    }
    return [historyItem];
  }
  onSigned({
    id
  }) {
    console.debug(`Transaction "${id}" is signed`);
  }
  onSend({
    id,
    nonce,
    startBlock
  }) {
    // Update transaction status
    this.updateTransaction(id, {
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.SUBMITTING
    });

    // Create Input History Transaction History
    this.historyService.insertHistories(this.transactionToHistories(id, startBlock, nonce)).catch(console.error);
    console.debug(`Transaction "${id}" is sent`);
  }
  onHasTransactionHash({
    blockHash,
    extrinsicHash,
    id
  }) {
    // Write processing transaction history
    const updateData = {
      extrinsicHash,
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.PROCESSING,
      blockHash: blockHash || ''
    };
    this.updateTransaction(id, updateData);

    // In this case transaction id is the same as extrinsic hash and will change after below update
    this.historyService.updateHistoryByExtrinsicHash(id, updateData).catch(console.error);
    console.debug(`Transaction "${id}" is submitted with hash ${extrinsicHash || ''}`);
  }
  handlePostProcessing(id) {
    // must be done after success/failure to make sure the transaction is finalized
    const transaction = this.getTransaction(id);
    if (transaction.extrinsicType === _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.SEND_NFT) {
      const inputData = (0,_subwallet_extension_base_services_transaction_service_utils__WEBPACK_IMPORTED_MODULE_14__.parseTransactionData)(transaction.data);
      try {
        const sender = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_9__["default"].getPair(inputData.senderAddress);
        sender && this.databaseService.handleNftTransfer(transaction.chain, [sender.address, _subwallet_extension_base_constants__WEBPACK_IMPORTED_MODULE_16__.ALL_ACCOUNT_KEY], inputData.nftItem).then(() => {
          this.eventService.emit('transaction.transferNft', undefined);
        }).catch(console.error);
      } catch (e) {
        console.error(e);
      }
      try {
        const recipient = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_9__["default"].getPair(inputData.recipientAddress);
        recipient && this.databaseService.addNft(recipient.address, {
          ...inputData.nftItem,
          owner: recipient.address
        }).catch(console.error);
      } catch (e) {
        console.error(e);
      }
    } else if ([_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_BOND, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_UNBOND, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_WITHDRAW, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_CANCEL_UNSTAKE, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_CLAIM_REWARD, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_JOIN_POOL, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_POOL_WITHDRAW, _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicType.STAKING_LEAVE_POOL].includes(transaction.extrinsicType)) {
      this.eventService.emit('transaction.submitStaking', transaction.chain);
    }
  }
  onSuccess({
    blockHash,
    blockNumber,
    extrinsicHash,
    id
  }) {
    const transaction = this.getTransaction(id);
    this.updateTransaction(id, {
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.SUCCESS,
      extrinsicHash
    });

    // Write success transaction history
    this.historyService.updateHistoryByExtrinsicHash(transaction.extrinsicHash, {
      extrinsicHash,
      status: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.SUCCESS,
      blockNumber: blockNumber || 0,
      blockHash: blockHash || ''
    }).catch(console.error);
    const info = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__.isHex)(extrinsicHash) ? extrinsicHash : (0,_subwallet_extension_base_services_transaction_service_helpers__WEBPACK_IMPORTED_MODULE_8__.getBaseTransactionInfo)(transaction, this.chainService.getChainInfoMap());
    this.notificationService.notify({
      type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.NotificationType.SUCCESS,
      title: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Transaction completed'),
      message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Transaction {{info}} completed', {
        replace: {
          info
        }
      }),
      action: {
        url: this.getTransactionLink(id)
      },
      notifyViaBrowser: true
    });
    this.eventService.emit('transaction.done', transaction);
  }
  onFailed({
    blockHash,
    blockNumber,
    errors,
    extrinsicHash,
    id
  }) {
    const transaction = this.getTransaction(id);
    const nextStatus = _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.FAIL;
    if (transaction) {
      this.updateTransaction(id, {
        status: nextStatus,
        errors,
        extrinsicHash
      });

      // Write failed transaction history
      this.historyService.updateHistoryByExtrinsicHash(transaction.extrinsicHash, {
        extrinsicHash: extrinsicHash || transaction.extrinsicHash,
        status: nextStatus,
        blockNumber: blockNumber || 0,
        blockHash: blockHash || ''
      }).catch(console.error);
      const info = (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__.isHex)(transaction === null || transaction === void 0 ? void 0 : transaction.extrinsicHash) ? transaction === null || transaction === void 0 ? void 0 : transaction.extrinsicHash : (0,_subwallet_extension_base_services_transaction_service_helpers__WEBPACK_IMPORTED_MODULE_8__.getBaseTransactionInfo)(transaction, this.chainService.getChainInfoMap());
      this.notificationService.notify({
        type: _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.NotificationType.ERROR,
        title: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Transaction failed'),
        message: (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Transaction {{info}} failed', {
          replace: {
            info
          }
        }),
        action: {
          url: this.getTransactionLink(id)
        },
        notifyViaBrowser: true
      });
    }
    this.eventService.emit('transaction.failed', transaction);
  }
  generateHashPayload(chain, transaction) {
    var _transaction$nonce;
    const chainInfo = this.chainService.getChainInfoByKey(chain);
    const txObject = {
      nonce: (_transaction$nonce = transaction.nonce) !== null && _transaction$nonce !== void 0 ? _transaction$nonce : 0,
      gasPrice: (0,ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.addHexPrefix)((0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_18__.anyNumberToBN)(transaction.gasPrice).toString(16)),
      gasLimit: (0,ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.addHexPrefix)((0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_18__.anyNumberToBN)(transaction.gas).toString(16)),
      to: transaction.to !== undefined ? transaction.to : '',
      value: (0,ethereumjs_util__WEBPACK_IMPORTED_MODULE_1__.addHexPrefix)((0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_18__.anyNumberToBN)(transaction.value).toString(16)),
      data: transaction.data,
      chainId: (0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_7__._getEvmChainId)(chainInfo)
    };
    return ethers__WEBPACK_IMPORTED_MODULE_19__.Transaction.from(txObject).unsignedSerialized;
  }
  async signAndSendEvmTransaction({
    address,
    chain,
    id,
    transaction,
    url
  }) {
    var _payload$nonce;
    const payload = transaction;
    const evmApi = this.chainService.getEvmApi(chain);
    const chainInfo = this.chainService.getChainInfoByKey(chain);
    const accountPair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_9__["default"].getPair(address);
    const account = {
      address,
      ...accountPair.meta
    };
    if (!payload.account) {
      payload.account = account;
    }

    // Allow sign transaction
    payload.canSign = true;

    // Fill contract info
    if (!payload.parseData) {
      const isToContract = await (0,_subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_20__.isContractAddress)(payload.to || '', evmApi);
      payload.isToContract = isToContract;
      try {
        payload.parseData = isToContract ? payload.data ? (await (0,_subwallet_extension_base_utils_eth_parseTransaction__WEBPACK_IMPORTED_MODULE_20__.parseContractInput)(payload.data || '', payload.to || '', chainInfo)).result : '' : payload.data || '';
      } catch (e) {
        console.warn('Unable to parse contract input data');
        payload.parseData = payload.data;
      }
    }
    if ('data' in payload && payload.data === undefined) {
      delete payload.data;
    }

    // Set unique nonce to avoid transaction errors
    if (!payload.nonce) {
      const evmApi = this.chainService.getEvmApi(chain);
      payload.nonce = await evmApi.api.eth.getTransactionCount(address);
    }
    if (!payload.chainId) {
      var _chainInfo$evmInfo$ev, _chainInfo$evmInfo;
      payload.chainId = (_chainInfo$evmInfo$ev = (_chainInfo$evmInfo = chainInfo.evmInfo) === null || _chainInfo$evmInfo === void 0 ? void 0 : _chainInfo$evmInfo.evmChainId) !== null && _chainInfo$evmInfo$ev !== void 0 ? _chainInfo$evmInfo$ev : 1;
    }

    // Autofill from
    if (!payload.from) {
      payload.from = address;
    }
    const isExternal = !!account.isExternal;
    const isInjected = !!account.isInjected;

    // generate hashPayload for EVM transaction
    payload.hashPayload = this.generateHashPayload(chain, payload);
    const emitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_2__["default"]();
    const txObject = {
      nonce: (_payload$nonce = payload.nonce) !== null && _payload$nonce !== void 0 ? _payload$nonce : 0,
      from: payload.from,
      gasPrice: (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_18__.anyNumberToBN)(payload.gasPrice).toNumber(),
      gasLimit: (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_18__.anyNumberToBN)(payload.gas).toNumber(),
      to: payload.to !== undefined ? payload.to : '',
      value: (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_18__.anyNumberToBN)(payload.value).toNumber(),
      data: payload.data,
      chainId: payload.chainId
    };
    const eventData = {
      id,
      errors: [],
      warnings: [],
      extrinsicHash: id
    };
    if (isInjected) {
      this.requestService.addConfirmation(id, url || _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_13__.EXTENSION_REQUEST_URL, 'evmWatchTransactionRequest', payload, {}).then(async ({
        isApproved,
        payload
      }) => {
        if (isApproved) {
          if (!payload) {
            throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_21__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.EvmProviderErrorType.UNAUTHORIZED, 'Bad signature');
          }
          const web3Api = this.chainService.getEvmApi(chain).api;

          // Emit signed event
          emitter.emit('signed', eventData);
          eventData.nonce = txObject.nonce;
          eventData.startBlock = (await web3Api.eth.getBlockNumber()) - 3;
          // Add start info
          emitter.emit('send', eventData); // This event is needed after sending transaction with queue

          const txHash = payload;
          eventData.extrinsicHash = txHash;
          emitter.emit('extrinsicHash', eventData);
          this.watchTransactionSubscribes[id] = new Promise((resolve, reject) => {
            // eslint-disable-next-line prefer-const
            let subscribe;
            const onComplete = () => {
              var _subscribe, _subscribe$unsubscrib, _subscribe$unsubscrib2;
              (_subscribe = subscribe) === null || _subscribe === void 0 ? void 0 : (_subscribe$unsubscrib = _subscribe.unsubscribe) === null || _subscribe$unsubscrib === void 0 ? void 0 : (_subscribe$unsubscrib2 = _subscribe$unsubscrib.call(_subscribe)) === null || _subscribe$unsubscrib2 === void 0 ? void 0 : _subscribe$unsubscrib2.then(console.debug).catch(console.debug);
              delete this.watchTransactionSubscribes[id];
            };
            const onSuccess = rs => {
              if (rs) {
                eventData.extrinsicHash = rs.transactionHash;
                eventData.blockHash = rs.blockHash;
                eventData.blockNumber = rs.blockNumber;
                emitter.emit('success', eventData);
                onComplete();
                resolve();
              }
            };
            const onError = error => {
              if (error) {
                // TODO: Change type and message
                eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.UNABLE_TO_SEND, error.message));
                emitter.emit('error', eventData);
                onComplete();
                reject(error);
              }
            };
            const onCheck = () => {
              web3Api.eth.getTransactionReceipt(txHash).then(onSuccess).catch(onError);
            };
            subscribe = web3Api.eth.subscribe('newBlockHeaders', onCheck);
          });
        } else {
          this.removeTransaction(id);
          eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.USER_REJECT_REQUEST));
          emitter.emit('error', eventData);
        }
      }).catch(e => {
        this.removeTransaction(id);
        // TODO: Change type
        eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.UNABLE_TO_SIGN, e.message));
        emitter.emit('error', eventData);
      });
    } else {
      this.requestService.addConfirmation(id, url || _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_13__.EXTENSION_REQUEST_URL, 'evmSendTransactionRequest', payload, {}).then(async ({
        isApproved,
        payload
      }) => {
        if (isApproved) {
          let signedTransaction;
          if (!payload) {
            throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_21__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.EvmProviderErrorType.UNAUTHORIZED, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Failed to sign'));
          }
          const web3Api = this.chainService.getEvmApi(chain).api;
          if (!isExternal) {
            signedTransaction = payload;
          } else {
            const signed = (0,_subwallet_extension_base_utils_eth_mergeTransactionAndSignature__WEBPACK_IMPORTED_MODULE_22__.mergeTransactionAndSignature)(txObject, payload);
            const recover = web3Api.eth.accounts.recoverTransaction(signed);
            if (recover.toLowerCase() !== account.address.toLowerCase()) {
              throw new _subwallet_extension_base_background_errors_EvmProviderError__WEBPACK_IMPORTED_MODULE_21__.EvmProviderError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.EvmProviderErrorType.UNAUTHORIZED, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Wrong signature. Please sign with the account you use in dApp'));
            }
            signedTransaction = signed;
          }

          // Emit signed event
          emitter.emit('signed', eventData);

          // Send transaction
          this.handleTransactionTimeout(emitter, eventData);

          // Add start info
          eventData.nonce = txObject.nonce;
          eventData.startBlock = await web3Api.eth.getBlockNumber();
          emitter.emit('send', eventData); // This event is needed after sending transaction with queue
          signedTransaction && web3Api.eth.sendSignedTransaction(signedTransaction).once('transactionHash', hash => {
            eventData.extrinsicHash = hash;
            emitter.emit('extrinsicHash', eventData);
          }).once('receipt', rs => {
            eventData.extrinsicHash = rs.transactionHash;
            eventData.blockHash = rs.blockHash;
            eventData.blockNumber = rs.blockNumber;
            emitter.emit('success', eventData);
          }).once('error', e => {
            eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.SEND_TRANSACTION_FAILED, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)(e.message)));
            emitter.emit('error', eventData);
          }).catch(e => {
            eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.UNABLE_TO_SEND, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)(e.message)));
            emitter.emit('error', eventData);
          });
        } else {
          this.removeTransaction(id);
          eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.USER_REJECT_REQUEST));
          emitter.emit('error', eventData);
        }
      }).catch(e => {
        this.removeTransaction(id);
        eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.UNABLE_TO_SIGN, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)(e.message)));
        emitter.emit('error', eventData);
      });
    }
    return emitter;
  }
  signAndSendSubstrateTransaction({
    address,
    chain,
    id,
    transaction,
    url
  }) {
    const emitter = new eventemitter3__WEBPACK_IMPORTED_MODULE_2__["default"]();
    const eventData = {
      id,
      errors: [],
      warnings: [],
      extrinsicHash: id
    };
    transaction.signAsync(address, {
      signer: {
        signPayload: async payload => {
          const signing = await this.requestService.signInternalTransaction(id, address, url || _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_13__.EXTENSION_REQUEST_URL, payload);
          return {
            id: new Date().getTime(),
            signature: signing.signature
          };
        }
      }
    }).then(async rs => {
      // Emit signed event
      emitter.emit('signed', eventData);

      // Send transaction
      const api = this.chainService.getSubstrateApi(chain);
      eventData.nonce = rs.nonce.toNumber();
      eventData.startBlock = (await api.api.query.system.number()).toPrimitive();
      this.handleTransactionTimeout(emitter, eventData);
      emitter.emit('send', eventData); // This event is needed after sending transaction with queue

      rs.send(txState => {
        // handle events, logs, history
        if (!txState || !txState.status) {
          return;
        }
        if (txState.status.isInBlock) {
          eventData.eventLogs = txState.events;
          if (!eventData.extrinsicHash || eventData.extrinsicHash === '' || !(0,_polkadot_util__WEBPACK_IMPORTED_MODULE_17__.isHex)(eventData.extrinsicHash)) {
            eventData.extrinsicHash = txState.txHash.toHex();
            eventData.blockHash = txState.status.asInBlock.toHex();
            emitter.emit('extrinsicHash', eventData);
          }
        }
        if (txState.status.isFinalized) {
          eventData.extrinsicHash = txState.txHash.toHex();
          eventData.eventLogs = txState.events;
          // TODO: push block hash and block number into eventData
          txState.events.filter(({
            event: {
              section
            }
          }) => section === 'system').forEach(({
            event: {
              method,
              data: [error]
            }
          }) => {
            if (method === 'ExtrinsicFailed') {
              eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.SEND_TRANSACTION_FAILED, error.toString()));
              emitter.emit('error', eventData);
            } else if (method === 'ExtrinsicSuccess') {
              emitter.emit('success', eventData);
            }
          });
        }
      }).catch(e => {
        eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.SEND_TRANSACTION_FAILED, e.message));
        emitter.emit('error', eventData);
      });
    }).catch(e => {
      this.removeTransaction(id);
      eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.UNABLE_TO_SIGN, e.message));
      emitter.emit('error', eventData);
    });
    return emitter;
  }
  handleTransactionTimeout(emitter, eventData) {
    const timeout = setTimeout(() => {
      const transaction = this.getTransaction(eventData.id);
      if (transaction.status !== _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.SUCCESS && transaction.status !== _subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.ExtrinsicStatus.FAIL) {
        eventData.errors.push(new _subwallet_extension_base_background_errors_TransactionError__WEBPACK_IMPORTED_MODULE_6__.TransactionError(_subwallet_extension_base_background_KoniTypes__WEBPACK_IMPORTED_MODULE_5__.BasicTxErrorType.TIMEOUT, (0,i18next__WEBPACK_IMPORTED_MODULE_3__.t)('Transaction timeout')));
        emitter.emit('error', eventData);
        clearTimeout(timeout);
      }
    }, _subwallet_extension_base_services_transaction_service_constants__WEBPACK_IMPORTED_MODULE_23__.TRANSACTION_TIMEOUT);
    emitter.once('success', () => {
      clearTimeout(timeout);
    });
    emitter.once('error', () => {
      clearTimeout(timeout);
    });
  }
  resetWallet() {
    this.transactionSubject.next({});
  }
}

/***/ }),

/***/ "../extension-base/src/services/wallet-connect-service/handler/Eip155RequestHandler.ts":
/*!*********************************************************************************************!*\
  !*** ../extension-base/src/services/wallet-connect-service/handler/Eip155RequestHandler.ts ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Eip155RequestHandler)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classPrivateFieldLooseBase */ "../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js");
/* harmony import */ var _babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classPrivateFieldLooseKey */ "../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js");
/* harmony import */ var _json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @json-rpc-tools/utils */ "../../node_modules/@json-rpc-tools/utils/dist/cjs/index.js");
/* harmony import */ var _json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/helpers */ "../extension-base/src/services/wallet-connect-service/helpers.ts");
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/types */ "../extension-base/src/services/wallet-connect-service/types.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/utils */ "../../node_modules/@walletconnect/utils/dist/index.es.js");


// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0






var _walletConnectService = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("walletConnectService");
var _koniState = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("koniState");
var _checkAccount = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("checkAccount");
var _handleError = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("handleError");
class Eip155RequestHandler {
  constructor(koniState, walletConnectService) {
    Object.defineProperty(this, _handleError, {
      value: _handleError2
    });
    Object.defineProperty(this, _checkAccount, {
      value: _checkAccount2
    });
    Object.defineProperty(this, _walletConnectService, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _koniState, {
      writable: true,
      value: void 0
    });
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState] = koniState;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService] = walletConnectService;
  }
  handleRequest(requestEvent) {
    const {
      id,
      params,
      topic
    } = requestEvent;
    const {
      chainId: _chainId,
      request
    } = params;
    const method = request.method;
    const requestSession = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].getSession(topic);
    const url = requestSession.peer.metadata.url;
    const sessionAccounts = requestSession.namespaces.eip155.accounts.map(account => account.split(':')[2]);
    if ([_subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.PERSONAL_SIGN, _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.ETH_SIGN, _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA, _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V3, _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V4].includes(method)) {
      const address = (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.getEip155MessageAddress)(method, request.params);
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkAccount)[_checkAccount](address, sessionAccounts);
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState].evmSign((0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.getWCId)(id), url, method === _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA ? _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V4 : method, request.params, sessionAccounts).then(async signature => {
        await (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].responseRequest({
          topic: topic,
          response: (0,_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcResult)(id, signature)
        });
      }).catch(e => {
        (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _handleError)[_handleError](topic, id, e);
      });
    } else if (method === _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.EIP155_SIGNING_METHODS.ETH_SEND_TRANSACTION) {
      const [tx] = (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.parseRequestParams)(request.params);
      const address = tx.from;
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkAccount)[_checkAccount](address, sessionAccounts);
      const chainId = parseInt(_chainId.split(':')[1]);
      const [networkKey, chainInfo] = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState].findNetworkKeyByChainId(chainId);
      if (!networkKey || !chainInfo) {
        throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNSUPPORTED_CHAINS').message + ' ' + address);
      }
      const chainState = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState].getChainStateByKey(networkKey);
      const createRequest = () => {
        (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState].evmSendTransaction((0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.getWCId)(id), url, networkKey, sessionAccounts, tx).then(async signature => {
          await (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].responseRequest({
            topic: topic,
            response: (0,_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcResult)(id, signature)
          });
        }).catch(e => {
          (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _handleError)[_handleError](topic, id, e);
        });
      };
      if (!chainState.active) {
        (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState].chainService.enableChain(networkKey).then(createRequest).catch(() => {
          throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('USER_REJECTED').message + ' Can not active chain: ' + chainInfo.name);
        });
      } else {
        createRequest();
      }
    } else {
      throw Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('INVALID_METHOD').message + ' ' + method);
    }
  }
}
function _checkAccount2(address, accounts) {
  if (!accounts.find(account => (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_6__.isSameAddress)(account, address))) {
    throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNSUPPORTED_ACCOUNTS').message + ' ' + address);
  }
}
function _handleError2(topic, id, e) {
  console.log(e);
  let message = e.message;
  if (message.includes('User Rejected Request')) {
    message = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('USER_REJECTED').message;
  }
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].responseRequest({
    topic: topic,
    response: (0,_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(id, message)
  }).catch(console.error);
}

/***/ }),

/***/ "../extension-base/src/services/wallet-connect-service/handler/PolkadotRequestHandler.ts":
/*!***********************************************************************************************!*\
  !*** ../extension-base/src/services/wallet-connect-service/handler/PolkadotRequestHandler.ts ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PolkadotRequestHandler)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classPrivateFieldLooseBase */ "../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js");
/* harmony import */ var _babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classPrivateFieldLooseKey */ "../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js");
/* harmony import */ var _json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @json-rpc-tools/utils */ "../../node_modules/@json-rpc-tools/utils/dist/cjs/index.js");
/* harmony import */ var _json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _subwallet_extension_base_background_RequestBytesSign__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/background/RequestBytesSign */ "../extension-base/src/background/RequestBytesSign.ts");
/* harmony import */ var _subwallet_extension_base_background_RequestExtrinsicSign__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/background/RequestExtrinsicSign */ "../extension-base/src/background/RequestExtrinsicSign.ts");
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/helpers */ "../extension-base/src/services/wallet-connect-service/helpers.ts");
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/types */ "../extension-base/src/services/wallet-connect-service/types.ts");
/* harmony import */ var _subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @subwallet/extension-base/utils */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/index.js");
/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/utils */ "../../node_modules/@walletconnect/utils/dist/index.es.js");


// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0









var _walletConnectService = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("walletConnectService");
var _requestService = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("requestService");
var _checkAccount = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("checkAccount");
var _handleError = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("handleError");
class PolkadotRequestHandler {
  constructor(walletConnectService, requestService) {
    Object.defineProperty(this, _handleError, {
      value: _handleError2
    });
    Object.defineProperty(this, _checkAccount, {
      value: _checkAccount2
    });
    Object.defineProperty(this, _walletConnectService, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _requestService, {
      writable: true,
      value: void 0
    });
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService] = walletConnectService;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _requestService)[_requestService] = requestService;
  }
  handleRequest(requestEvent) {
    const {
      id,
      params,
      topic
    } = requestEvent;
    const {
      request
    } = params;
    const method = request.method;
    const requestSession = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].getSession(topic);
    const url = requestSession.peer.metadata.url;
    const sessionAccounts = requestSession.namespaces.polkadot.accounts.map(account => account.split(':')[2]);
    if (method === _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.POLKADOT_SIGNING_METHODS.POLKADOT_SIGN_MESSAGE) {
      const param = (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.parseRequestParams)(request.params);
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkAccount)[_checkAccount](param.address, sessionAccounts);
      const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_6__["default"].getPair(param.address);
      const address = pair.address;
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _requestService)[_requestService].sign(url, new _subwallet_extension_base_background_RequestBytesSign__WEBPACK_IMPORTED_MODULE_7__["default"]({
        address: address,
        data: param.message,
        type: 'bytes'
      }), {
        address,
        ...pair.meta
      }, (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.getWCId)(id)).then(async ({
        signature
      }) => {
        await (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].responseRequest({
          topic: topic,
          response: (0,_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcResult)(id, {
            signature
          })
        });
      }).catch(e => {
        (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _handleError)[_handleError](topic, id, e);
      });
    } else if (method === _subwallet_extension_base_services_wallet_connect_service_types__WEBPACK_IMPORTED_MODULE_4__.POLKADOT_SIGNING_METHODS.POLKADOT_SIGN_TRANSACTION) {
      const param = (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.parseRequestParams)(request.params);
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkAccount)[_checkAccount](param.address, sessionAccounts);
      const pair = _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_6__["default"].getPair(param.address);
      const address = pair.address;
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _requestService)[_requestService].sign(url, new _subwallet_extension_base_background_RequestExtrinsicSign__WEBPACK_IMPORTED_MODULE_8__["default"](param.transactionPayload), {
        address,
        ...pair.meta
      }, (0,_subwallet_extension_base_services_wallet_connect_service_helpers__WEBPACK_IMPORTED_MODULE_5__.getWCId)(id)).then(async ({
        signature
      }) => {
        await (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].responseRequest({
          topic: topic,
          response: (0,_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcResult)(id, {
            signature
          })
        });
      }).catch(e => {
        (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _handleError)[_handleError](topic, id, e);
      });
    } else {
      throw Error(`${(0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('INVALID_METHOD').message} ${method}`);
    }
  }
}
function _checkAccount2(address, accounts) {
  if (!accounts.find(account => (0,_subwallet_extension_base_utils__WEBPACK_IMPORTED_MODULE_9__.isSameAddress)(account, address))) {
    throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNSUPPORTED_ACCOUNTS').message + ' ' + address);
  }
}
function _handleError2(topic, id, e) {
  let message = e.message;
  if (message.includes('User Rejected Request')) {
    message = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('USER_REJECTED').message;
  }
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _walletConnectService)[_walletConnectService].responseRequest({
    topic: topic,
    response: (0,_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(id, message)
  }).catch(console.error);
}

/***/ }),

/***/ "../extension-base/src/services/wallet-connect-service/index.ts":
/*!**********************************************************************!*\
  !*** ../extension-base/src/services/wallet-connect-service/index.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WalletConnectService)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classPrivateFieldLooseBase */ "../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js");
/* harmony import */ var _babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/classPrivateFieldLooseKey */ "../../node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js");
/* harmony import */ var _json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @json-rpc-tools/utils */ "../../node_modules/@json-rpc-tools/utils/dist/cjs/index.js");
/* harmony import */ var _json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _subwallet_extension_base_services_wallet_connect_service_handler_Eip155RequestHandler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/services/wallet-connect-service/handler/Eip155RequestHandler */ "../extension-base/src/services/wallet-connect-service/handler/Eip155RequestHandler.ts");
/* harmony import */ var _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @walletconnect/sign-client */ "../../node_modules/@walletconnect/sign-client/dist/index.es.js");
/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @walletconnect/utils */ "../../node_modules/@walletconnect/utils/dist/index.es.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js");
/* harmony import */ var _handler_PolkadotRequestHandler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./handler/PolkadotRequestHandler */ "../extension-base/src/services/wallet-connect-service/handler/PolkadotRequestHandler.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants */ "../extension-base/src/services/wallet-connect-service/constants.ts");
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers */ "../extension-base/src/services/wallet-connect-service/helpers.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types */ "../extension-base/src/services/wallet-connect-service/types.ts");


// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0










var _requestService = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("requestService");
var _polkadotRequestHandler = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("polkadotRequestHandler");
var _eip155RequestHandler = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("eip155RequestHandler");
var _koniState = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("koniState");
var _client = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("client");
var _option = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("option");
var _haveData = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("haveData");
var _initClient = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("initClient");
var _updateSessions = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("updateSessions");
var _onSessionProposal = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("onSessionProposal");
var _onSessionRequest = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("onSessionRequest");
var _createListener = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("createListener");
var _removeListener = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("removeListener");
var _checkClient = /*#__PURE__*/(0,_babel_runtime_helpers_esm_classPrivateFieldLooseKey__WEBPACK_IMPORTED_MODULE_1__["default"])("checkClient");
class WalletConnectService {
  constructor(koniState, requestService, option = _constants__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_WALLET_CONNECT_OPTIONS) {
    Object.defineProperty(this, _checkClient, {
      value: _checkClient2
    });
    Object.defineProperty(this, _removeListener, {
      value: _removeListener2
    });
    Object.defineProperty(this, _createListener, {
      value: _createListener2
    });
    Object.defineProperty(this, _onSessionRequest, {
      value: _onSessionRequest2
    });
    Object.defineProperty(this, _onSessionProposal, {
      value: _onSessionProposal2
    });
    Object.defineProperty(this, _updateSessions, {
      value: _updateSessions2
    });
    Object.defineProperty(this, _initClient, {
      value: _initClient2
    });
    Object.defineProperty(this, _haveData, {
      get: _get_haveData,
      set: void 0
    });
    Object.defineProperty(this, _requestService, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _polkadotRequestHandler, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _eip155RequestHandler, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _koniState, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _client, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _option, {
      writable: true,
      value: void 0
    });
    this.sessionSubject = new rxjs__WEBPACK_IMPORTED_MODULE_5__.BehaviorSubject([]);
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState] = koniState;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _requestService)[_requestService] = requestService;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _option)[_option] = option;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _polkadotRequestHandler)[_polkadotRequestHandler] = new _handler_PolkadotRequestHandler__WEBPACK_IMPORTED_MODULE_6__["default"](this, requestService);
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _eip155RequestHandler)[_eip155RequestHandler] = new _subwallet_extension_base_services_wallet_connect_service_handler_Eip155RequestHandler__WEBPACK_IMPORTED_MODULE_7__["default"]((0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState], this);
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _initClient)[_initClient]().catch(console.error);
  }
  get sessions() {
    var _classPrivateFieldLoo;
    return ((_classPrivateFieldLoo = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo === void 0 ? void 0 : _classPrivateFieldLoo.session.values) || [];
  }
  getSession(topic) {
    var _classPrivateFieldLoo2;
    const session = (_classPrivateFieldLoo2 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo2 === void 0 ? void 0 : _classPrivateFieldLoo2.session.get(topic);
    if (!session) {
      throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getInternalError)('MISMATCHED_TOPIC').message);
    } else {
      return session;
    }
  }
  async changeOption(newOption) {
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _option)[_option] = Object.assign({}, (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _option)[_option], newOption);
    await (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _initClient)[_initClient]();
  }
  async connect(uri) {
    var _classPrivateFieldLoo3;
    if (!(0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _haveData)[_haveData]) {
      await (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _initClient)[_initClient](true);
    }
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkClient)[_checkClient]();
    await ((_classPrivateFieldLoo3 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo3 === void 0 ? void 0 : _classPrivateFieldLoo3.pair({
      uri
    }));
  }
  async approveSession(result) {
    var _classPrivateFieldLoo4;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkClient)[_checkClient]();
    await ((_classPrivateFieldLoo4 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo4 === void 0 ? void 0 : _classPrivateFieldLoo4.approve(result));
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _updateSessions)[_updateSessions]();
  }
  async rejectSession(id) {
    var _classPrivateFieldLoo5;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkClient)[_checkClient]();
    await ((_classPrivateFieldLoo5 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo5 === void 0 ? void 0 : _classPrivateFieldLoo5.reject({
      id: id,
      reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('USER_REJECTED')
    }));
  }
  async responseRequest(response) {
    var _classPrivateFieldLoo6;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkClient)[_checkClient]();
    await ((_classPrivateFieldLoo6 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo6 === void 0 ? void 0 : _classPrivateFieldLoo6.respond(response));
  }
  async resetWallet(resetAll) {
    var _classPrivateFieldLoo7, _classPrivateFieldLoo9, _classPrivateFieldLoo11;
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _removeListener)[_removeListener]();

    // Disconnect session
    const sessions = ((_classPrivateFieldLoo7 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo7 === void 0 ? void 0 : _classPrivateFieldLoo7.session.values) || [];
    for (const session of sessions) {
      try {
        var _classPrivateFieldLoo8;
        await ((_classPrivateFieldLoo8 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo8 === void 0 ? void 0 : _classPrivateFieldLoo8.disconnect({
          topic: session.topic,
          reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('USER_DISCONNECTED')
        }));
      } catch (e) {
        console.error(e);
      }
    }

    // Disconnect pair
    const pairs = ((_classPrivateFieldLoo9 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo9 === void 0 ? void 0 : _classPrivateFieldLoo9.pairing.values) || [];
    for (const pair of pairs) {
      try {
        var _classPrivateFieldLoo10;
        await ((_classPrivateFieldLoo10 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo10 === void 0 ? void 0 : _classPrivateFieldLoo10.disconnect({
          topic: pair.topic,
          reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('USER_DISCONNECTED')
        }));
      } catch (e) {
        console.error(e);
      }
    }
    const keys = (await ((_classPrivateFieldLoo11 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo11 === void 0 ? void 0 : _classPrivateFieldLoo11.core.storage.getKeys())) || [];
    const deleteKeys = resetAll ? keys : keys.filter(key => key.startsWith('wc@'));
    for (const key of deleteKeys) {
      try {
        var _classPrivateFieldLoo12;
        await ((_classPrivateFieldLoo12 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo12 === void 0 ? void 0 : _classPrivateFieldLoo12.core.storage.removeItem(key));
      } catch (e) {
        console.error(e);
      }
    }
    await (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _initClient)[_initClient]();
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _updateSessions)[_updateSessions]();
  }
  async disconnect(topic) {
    var _classPrivateFieldLoo13;
    await ((_classPrivateFieldLoo13 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo13 === void 0 ? void 0 : _classPrivateFieldLoo13.disconnect({
      topic: topic,
      reason: (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('USER_DISCONNECTED')
    }));
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _updateSessions)[_updateSessions]();
  }
}
function _get_haveData() {
  const sessionStorage = localStorage.getItem('wc@2:client:0.3//session');
  const pairingStorage = localStorage.getItem('wc@2:core:0.3//pairing');
  const subscriptionStorage = localStorage.getItem('wc@2:core:0.3//subscription');
  const sessions = sessionStorage ? JSON.parse(sessionStorage) : [];
  const pairings = pairingStorage ? JSON.parse(pairingStorage) : [];
  const subscriptions = subscriptionStorage ? JSON.parse(subscriptionStorage) : [];
  return !!sessions.length || !!pairings.length || !!subscriptions.length;
}
async function _initClient2(force) {
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _removeListener)[_removeListener]();
  if (force || (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _haveData)[_haveData]) {
    (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client] = await _walletconnect_sign_client__WEBPACK_IMPORTED_MODULE_8__["default"].init((0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _option)[_option]);
  }
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _updateSessions)[_updateSessions]();
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _createListener)[_createListener]();
}
function _updateSessions2() {
  this.sessionSubject.next(this.sessions);
}
function _onSessionProposal2(proposal) {
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkClient)[_checkClient]();
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _requestService)[_requestService].addConnectWCRequest((0,_helpers__WEBPACK_IMPORTED_MODULE_9__.convertConnectRequest)(proposal));
}
function _onSessionRequest2(requestEvent) {
  (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _checkClient)[_checkClient]();
  const {
    id,
    params,
    topic
  } = requestEvent;
  const {
    chainId,
    request
  } = params;
  const method = request.method;
  try {
    const requestSession = this.getSession(topic);
    const namespaces = Object.keys(requestSession.namespaces);
    const chains = Object.values(requestSession.namespaces).map(namespace => namespace.chains).flat();
    const methods = Object.values(requestSession.namespaces).map(namespace => namespace.methods).flat();
    const chainInfoMap = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _koniState)[_koniState].getChainInfoMap();
    const [requestNamespace] = chainId.split(':');
    if (!namespaces.includes(requestNamespace)) {
      throw Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNSUPPORTED_NAMESPACE_KEY').message);
    }
    if (!chains.includes(chainId)) {
      throw Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNSUPPORTED_CHAINS').message + ' ' + chainId);
    }
    if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_9__.isSupportWalletConnectChain)(chainId, chainInfoMap)) {
      throw Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNSUPPORTED_CHAINS').message + ' ' + chainId);
    }
    if (!methods.includes(method)) {
      throw Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNAUTHORIZED_METHOD').message + ' ' + method);
    }
    if (!_constants__WEBPACK_IMPORTED_MODULE_4__.WALLET_CONNECT_SUPPORTED_METHODS.includes(method)) {
      throw Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('UNSUPPORTED_METHODS').message + ' ' + method);
    }
    switch (method) {
      case _types__WEBPACK_IMPORTED_MODULE_10__.POLKADOT_SIGNING_METHODS.POLKADOT_SIGN_MESSAGE:
      case _types__WEBPACK_IMPORTED_MODULE_10__.POLKADOT_SIGNING_METHODS.POLKADOT_SIGN_TRANSACTION:
        (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _polkadotRequestHandler)[_polkadotRequestHandler].handleRequest(requestEvent);
        break;
      case _types__WEBPACK_IMPORTED_MODULE_10__.EIP155_SIGNING_METHODS.ETH_SEND_TRANSACTION:
      case _types__WEBPACK_IMPORTED_MODULE_10__.EIP155_SIGNING_METHODS.PERSONAL_SIGN:
      case _types__WEBPACK_IMPORTED_MODULE_10__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA:
      case _types__WEBPACK_IMPORTED_MODULE_10__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V3:
      case _types__WEBPACK_IMPORTED_MODULE_10__.EIP155_SIGNING_METHODS.ETH_SIGN_TYPED_DATA_V4:
      case _types__WEBPACK_IMPORTED_MODULE_10__.EIP155_SIGNING_METHODS.ETH_SIGN:
        (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _eip155RequestHandler)[_eip155RequestHandler].handleRequest(requestEvent);
        break;
      default:
        throw Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getSdkError)('INVALID_METHOD').message + ' ' + method);
    }
  } catch (e) {
    console.log(e);
    try {
      const requestSession = this.getSession(topic);
      const notSupportRequest = (0,_helpers__WEBPACK_IMPORTED_MODULE_9__.convertNotSupportRequest)(requestEvent, requestSession.peer.metadata.url);
      (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _requestService)[_requestService].addNotSupportWCRequest(notSupportRequest);
    } catch (e) {}
    this.responseRequest({
      topic: topic,
      response: (0,_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_2__.formatJsonRpcError)(id, e.message)
    }).catch(console.error);
  }
}
function _createListener2() {
  var _classPrivateFieldLoo14, _classPrivateFieldLoo15, _classPrivateFieldLoo16, _classPrivateFieldLoo17, _classPrivateFieldLoo18, _classPrivateFieldLoo19;
  (_classPrivateFieldLoo14 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo14 === void 0 ? void 0 : _classPrivateFieldLoo14.on('session_proposal', (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _onSessionProposal)[_onSessionProposal].bind(this));
  (_classPrivateFieldLoo15 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo15 === void 0 ? void 0 : _classPrivateFieldLoo15.on('session_request', (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _onSessionRequest)[_onSessionRequest].bind(this));
  (_classPrivateFieldLoo16 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo16 === void 0 ? void 0 : _classPrivateFieldLoo16.on('session_ping', data => console.log('ping', data));
  (_classPrivateFieldLoo17 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo17 === void 0 ? void 0 : _classPrivateFieldLoo17.on('session_event', data => console.log('event', data));
  (_classPrivateFieldLoo18 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo18 === void 0 ? void 0 : _classPrivateFieldLoo18.on('session_update', data => console.log('update', data));
  (_classPrivateFieldLoo19 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo19 === void 0 ? void 0 : _classPrivateFieldLoo19.on('session_delete', (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _updateSessions)[_updateSessions].bind(this));
}
function _removeListener2() {
  _constants__WEBPACK_IMPORTED_MODULE_4__.ALL_WALLET_CONNECT_EVENT.forEach(event => {
    var _classPrivateFieldLoo20;
    (_classPrivateFieldLoo20 = (0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) === null || _classPrivateFieldLoo20 === void 0 ? void 0 : _classPrivateFieldLoo20.removeAllListeners(event);
  });
}
function _checkClient2() {
  if (!(0,_babel_runtime_helpers_esm_classPrivateFieldLooseBase__WEBPACK_IMPORTED_MODULE_0__["default"])(this, _client)[_client]) {
    throw new Error((0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_3__.getInternalError)('NOT_INITIALIZED').message);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/AccountRef.ts":
/*!**************************************************!*\
  !*** ../extension-base/src/stores/AccountRef.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AccountRefStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/SubscribableStore */ "../extension-base/src/stores/SubscribableStore.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class AccountRefStore extends _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX ? `${_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}account_link` : null);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/Accounts.ts":
/*!************************************************!*\
  !*** ../extension-base/src/stores/Accounts.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AccountsStore)
/* harmony export */ });
/* harmony import */ var _defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base */ "../extension-base/src/stores/Base.ts");
// Copyright 2019-2022 @polkadot/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class AccountsStore extends _Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX ? `${_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}accounts` : null);
  }
  set(key, value, update) {
    // shortcut, don't save testing accounts in extension storage
    if (key.startsWith('account:') && value.meta && value.meta.isTesting) {
      update && update();
      return;
    }
    super.set(key, value, update);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/AssetSetting.ts":
/*!****************************************************!*\
  !*** ../extension-base/src/stores/AssetSetting.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AssetSettingStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/SubscribableStore */ "../extension-base/src/stores/SubscribableStore.ts");
// Copyright 2019-2022 @polkadot/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0




// Not every asset has its setting stored, if not in store then it has default value (visible = false)
class AssetSettingStore extends _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX ? `${_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}asset-setting` : null);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/Authorize.ts":
/*!*************************************************!*\
  !*** ../extension-base/src/stores/Authorize.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AuthorizeStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/SubscribableStore */ "../extension-base/src/stores/SubscribableStore.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class AuthorizeStore extends _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX ? `${_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}authorize` : null);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/Base.ts":
/*!********************************************!*\
  !*** ../extension-base/src/stores/Base.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BaseStore)
/* harmony export */ });
// Copyright 2019-2022 @polkadot/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0

const lastError = type => {
  const error = chrome.runtime.lastError;
  if (error) {
    console.error(`BaseStore.${type}:: runtime.lastError:`, error);
  }
};
class BaseStore {
  #prefix;
  constructor(prefix) {
    this.#prefix = prefix ? `${prefix}:` : '';
  }
  getPrefix() {
    return this.#prefix;
  }
  all(update) {
    this.allMap(map => {
      Object.entries(map).forEach(([key, value]) => {
        update(key, value);
      });
    });
  }
  allMap(update) {
    chrome.storage.local.get(null, result => {
      lastError('all');
      const entries = Object.entries(result);
      const map = {};
      for (let i = 0; i < entries.length; i++) {
        const [key, value] = entries[i];
        if (key.startsWith(this.#prefix)) {
          map[key.replace(this.#prefix, '')] = value;
        }
      }
      update(map);
    });
  }
  get(_key, update) {
    const key = `${this.#prefix}${_key}`;
    chrome.storage.local.get([key], result => {
      lastError('get');
      update(result[key]);
    });
  }
  remove(_key, update) {
    const key = `${this.#prefix}${_key}`;
    chrome.storage.local.remove(key, () => {
      lastError('remove');
      update && update();
    });
  }
  set(_key, value, update) {
    const key = `${this.#prefix}${_key}`;
    chrome.storage.local.set({
      [key]: value
    }, () => {
      lastError('set');
      update && update();
    });
  }
}

/***/ }),

/***/ "../extension-base/src/stores/CurrentAccountStore.ts":
/*!***********************************************************!*\
  !*** ../extension-base/src/stores/CurrentAccountStore.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CurrentAccountStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/SubscribableStore */ "../extension-base/src/stores/SubscribableStore.ts");
// Copyright 2019-2022 @subwallet/extension-koni-ui authors & contributors
// SPDX-License-Identifier: Apache-2.0



class CurrentAccountStore extends _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX ? `${_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}current_account` : null);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/Keyring.ts":
/*!***********************************************!*\
  !*** ../extension-base/src/stores/Keyring.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KeyringStore)
/* harmony export */ });
/* harmony import */ var _subwallet_ui_keyring_defaults__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/ui-keyring/defaults */ "../../node_modules/@subwallet/ui-keyring/defaults.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0


const lastError = type => {
  const error = chrome.runtime.lastError;
  if (error) {
    console.error(`KeyringStore.${type}:: runtime.lastError:`, error);
  }
};
class KeyringStore {
  get(update) {
    chrome.storage.local.get([_subwallet_ui_keyring_defaults__WEBPACK_IMPORTED_MODULE_0__.SUBWALLET_KEYRING], result => {
      lastError('get');
      update(result[_subwallet_ui_keyring_defaults__WEBPACK_IMPORTED_MODULE_0__.SUBWALLET_KEYRING]);
    });
  }
  remove(update) {
    chrome.storage.local.remove(_subwallet_ui_keyring_defaults__WEBPACK_IMPORTED_MODULE_0__.SUBWALLET_KEYRING, () => {
      lastError('remove');
      update && update();
    });
  }
  set(value, update) {
    chrome.storage.local.set({
      [_subwallet_ui_keyring_defaults__WEBPACK_IMPORTED_MODULE_0__.SUBWALLET_KEYRING]: value
    }, () => {
      lastError('set');
      update && update();
    });
  }
}

/***/ }),

/***/ "../extension-base/src/stores/Metadata.ts":
/*!************************************************!*\
  !*** ../extension-base/src/stores/Metadata.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MetadataStore)
/* harmony export */ });
/* harmony import */ var _defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Base */ "../extension-base/src/stores/Base.ts");
// Copyright 2019-2022 @polkadot/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class MetadataStore extends _Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(`${_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}metadata`);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/PassPhishingStore.ts":
/*!*********************************************************!*\
  !*** ../extension-base/src/stores/PassPhishingStore.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PassPhishingStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/SubscribableStore */ "../extension-base/src/stores/SubscribableStore.ts");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0



class PassPhishingStore extends _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX ? `${_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}subwallet-pass-phishing-list` : null);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/Settings.ts":
/*!************************************************!*\
  !*** ../extension-base/src/stores/Settings.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SettingsStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/SubscribableStore */ "../extension-base/src/stores/SubscribableStore.ts");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class SettingsStore extends _subwallet_extension_base_stores_SubscribableStore__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX ? `${_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_PREFIX}settings` : null);
  }
}

/***/ }),

/***/ "../extension-base/src/stores/SubscribableStore.ts":
/*!*********************************************************!*\
  !*** ../extension-base/src/stores/SubscribableStore.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SubscribableStore)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_stores_Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/stores/Base */ "../extension-base/src/stores/Base.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/dist/esm5/internal/Subject.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



class SubscribableStore extends _subwallet_extension_base_stores_Base__WEBPACK_IMPORTED_MODULE_0__["default"] {
  subject = new rxjs__WEBPACK_IMPORTED_MODULE_1__.Subject();
  getSubject() {
    return this.subject;
  }
  set(_key, value, update) {
    super.set(_key, value, () => {
      this.subject.next(value);
      update && update();
    });
  }
  asyncGet = async key => {
    return new Promise(resolve => {
      this.get(key, resolve);
    });
  };
  removeAll() {
    return this.all(key => this.remove(key));
  }
}

/***/ }),

/***/ "../extension-base/src/utils/address.ts":
/*!**********************************************!*\
  !*** ../extension-base/src/utils/address.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convertSubjectInfoToAddresses": () => (/* binding */ convertSubjectInfoToAddresses),
/* harmony export */   "quickFormatAddressToCompare": () => (/* binding */ quickFormatAddressToCompare),
/* harmony export */   "simpleAddress": () => (/* binding */ simpleAddress)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_utils_index__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/utils/index */ "../extension-base/src/utils/index.ts");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/ethereum/isAddress.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/encode.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/decode.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/address/is.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



const simpleAddress = address => {
  if ((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_0__.isEthereumAddress)(address)) {
    return address;
  }
  return (0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_1__.encodeAddress)((0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_2__.decodeAddress)(address));
};
function quickFormatAddressToCompare(address) {
  if (!(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_3__.isAddress)(address)) {
    return address;
  }
  return (0,_subwallet_extension_base_utils_index__WEBPACK_IMPORTED_MODULE_4__.reformatAddress)(address, 42).toLowerCase();
}
const convertSubjectInfoToAddresses = subjectInfo => {
  return Object.values(subjectInfo).map(info => ({
    address: info.json.address,
    type: info.type,
    ...info.json.meta
  }));
};

/***/ }),

/***/ "../extension-base/src/utils/eth/mergeTransactionAndSignature.ts":
/*!***********************************************************************!*\
  !*** ../extension-base/src/utils/eth/mergeTransactionAndSignature.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "mergeTransactionAndSignature": () => (/* binding */ mergeTransactionAndSignature)
/* harmony export */ });
/* harmony import */ var ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethereumjs-util */ "../../node_modules/ethereumjs-util/dist.browser/index.js");
/* harmony import */ var ethereumjs_util__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ "../../node_modules/ethers/lib.esm/transaction/transaction.js");
// Copyright 2019-2022 @subwallet/extension-base authors & contributors
// SPDX-License-Identifier: Apache-2.0



const mergeTransactionAndSignature = (tx, _rawSignature) => {
  const _signature = _rawSignature.slice(2);
  const signature = {
    r: `0x${_signature.substring(0, 64)}`,
    s: `0x${_signature.substring(64, 128)}`,
    v: parseInt(`0x${_signature.substring(128)}`)
  };
  const transaction = {
    nonce: tx.nonce,
    gasPrice: (0,ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(tx.gasPrice.toString(16)),
    gasLimit: (0,ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(tx.gasLimit.toString(16)),
    to: tx.to,
    value: (0,ethereumjs_util__WEBPACK_IMPORTED_MODULE_0__.addHexPrefix)(tx.value.toString(16)),
    data: tx.data,
    chainId: tx.chainId,
    signature: signature
  };
  return ethers__WEBPACK_IMPORTED_MODULE_1__.Transaction.from(transaction).serialized;
};

/***/ }),

/***/ "../extension-base/src/utils/eth/parseTransaction/base.ts":
/*!****************************************************************!*\
  !*** ../extension-base/src/utils/eth/parseTransaction/base.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InputDataDecoder": () => (/* binding */ InputDataDecoder)
/* harmony export */ });
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ "../../node_modules/buffer/index.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ "../../node_modules/ethers/lib.esm/abi/abi-coder.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ "../../node_modules/ethers/lib.esm/abi/interface.js");
/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ethers */ "../../node_modules/ethers/lib.esm/abi/fragments.js");
/* harmony import */ var is_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! is-buffer */ "../../node_modules/is-buffer/index.js");
/* harmony import */ var is_buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(is_buffer__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3-utils */ "../../node_modules/web3-utils/lib/index.js");
/* harmony import */ var web3_utils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3_utils__WEBPACK_IMPORTED_MODULE_2__);
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0




// @ts-ignore

const ABI_TYPES = ['function', 'constructor', 'event', 'fallback'];
const instanceOfAbiItem = object => {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access
  return 'type' in object && ABI_TYPES.includes(object.type);
};
const checkArrayAbiItems = data => {
  if (Array.isArray(data)) {
    return data.length > 0 && data.every(value => instanceOfAbiItem(value));
  } else {
    return false;
  }
};
const genType = type => {
  if (typeof type === 'string') {
    return type;
  } else {
    if (type.components) {
      var _type$components;
      const arr = (_type$components = type.components) === null || _type$components === void 0 ? void 0 : _type$components.map(genType);
      const tupleStr = `(${arr.join(',')})`;
      if (type.type === 'tuple[]') {
        return tupleStr + '[]';
      } else {
        return tupleStr;
      }
    } else {
      return type.type;
    }
  }
};
const getMethodId = abi => {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-call
  return (0,web3_utils__WEBPACK_IMPORTED_MODULE_2__.keccak256)((0,web3_utils__WEBPACK_IMPORTED_MODULE_2__._jsonInterfaceMethodToString)(abi)).slice(2, 10);
};
const getMethodName = abi => {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-call
  return (0,web3_utils__WEBPACK_IMPORTED_MODULE_2__._jsonInterfaceMethodToString)(abi);
};
const deepRemoveUnwantedArrayProperties = arr => {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-return
  return [...arr.map(item => {
    if (Array.isArray(item)) {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-return
      return deepRemoveUnwantedArrayProperties(item);
    }

    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return item;
  })];
};

// remove 0x from addresses
const deepStripTupleAddresses = (input, tupleTypes) => input.map((item, i) => {
  // We find tupleTypes to not be an array where internalType is present in the ABI indicating item is a structure
  const type = tupleTypes[i] ? tupleTypes[i].type : null;
  if (type === 'address' && typeof item === 'string') {
    return item;
  }
  if (type === 'address[]' && Array.isArray(item)) {
    return item.map(a => a);
  }
  if (Array.isArray(item)) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-return
    return deepStripTupleAddresses(item, tupleTypes);
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  return item;
});
const toHexString = byteArray => {
  return Array.from(byteArray, function (byte) {
    return ('0' + (byte & 0xFF).toString(16)).slice(-2);
  }).join('');
};
class InputDataDecoder {
  constructor(prop) {
    this.abi = [];
    if (typeof prop === 'string') {
      try {
        this.abi = JSON.parse(prop);
      } catch (err) {
        throw new Error('Invalid ABI: ' + err.message);
      }
    } else if (checkArrayAbiItems(prop)) {
      this.abi = prop;
    } else {
      throw new TypeError('Must pass ABI array object or file path to constructor');
    }
  }
  decodeConstructor(data) {
    if (is_buffer__WEBPACK_IMPORTED_MODULE_1___default()(data)) {
      data = data.toString('utf8');
    }
    if (typeof data !== 'string') {
      data = '';
    }
    data = data.trim();
    for (let i = 0; i < this.abi.length; i++) {
      const obj = this.abi[i];
      if (obj.type !== 'constructor') {
        continue;
      }
      const method = obj.name || null;
      const methodName = getMethodName(obj);
      const types = obj.inputs ? obj.inputs.map(x => x.type) : [];
      const names = obj.inputs ? obj.inputs.map(x => x.name) : [];

      // take last 32 bytes
      data = data.slice(-256);
      if (data.length !== 256) {
        throw new Error('fail');
      }
      if (data.indexOf('0x') !== 0) {
        data = `0x${data}`;
      }
      const _inputs = ethers__WEBPACK_IMPORTED_MODULE_3__.AbiCoder.defaultAbiCoder().decode(types, data);
      const inputs = deepRemoveUnwantedArrayProperties(_inputs);
      return {
        methodName,
        method,
        types,
        inputs,
        names
      };
    }
    throw new Error('not found');
  }
  decodeData(data) {
    if (is_buffer__WEBPACK_IMPORTED_MODULE_1___default()(data)) {
      data = data.toString('utf8');
    }
    if (typeof data !== 'string') {
      data = '';
    }
    data = data.trim();
    const dataBuf = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(data.replace(/^0x/, ''), 'hex');
    const methodId = toHexString(dataBuf.subarray(0, 4));
    const inputsBuf = dataBuf.subarray(4);
    let result = {
      method: null,
      methodName: null,
      types: [],
      inputs: [],
      names: []
    };
    for (const abi of this.abi) {
      try {
        if (abi.type === 'constructor') {
          continue;
        }
        if (abi.type === 'event') {
          continue;
        }
        const method = abi.name || null;
        const methodName = getMethodName(abi);
        const types = abi.inputs ? abi.inputs.map(x => {
          if (x.type.includes('tuple')) {
            return x;
          } else {
            return x.type;
          }
        }) : [];
        const names = abi.inputs ? abi.inputs.map(x => {
          if (x.type.includes('tuple') && x.components) {
            return [x.name, x.components.map(a => a.name)];
          } else {
            return x.name;
          }
        }) : [];
        const hash = getMethodId(abi);
        if (hash === methodId) {
          let inputs = [];
          try {
            // @ts-ignore
            inputs = ethers__WEBPACK_IMPORTED_MODULE_3__.AbiCoder.defaultAbiCoder().decode(types, inputsBuf);
          } catch (err) {
            try {
              const ifc = new ethers__WEBPACK_IMPORTED_MODULE_4__.Interface([]);
              inputs = ifc.decodeFunctionData(ethers__WEBPACK_IMPORTED_MODULE_5__.FunctionFragment.from(abi), data);
            } catch (err) {}
          }

          // TODO: do this normalization into normalizeAddresses
          let _inputs = [];
          _inputs = inputs.map((input, i) => {
            if (types[i].components) {
              const tupleTypes = types[i].components;

              // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument
              return deepStripTupleAddresses(input, tupleTypes);
            }
            if (types[i] === 'address' && typeof input === 'string') {
              return input;
            }
            if (types[i] === 'address[]' && Array.isArray(input)) {
              return input.map(address => address);
            }

            // eslint-disable-next-line @typescript-eslint/no-unsafe-return
            return input;
          });

          // Map any tuple types into arrays
          const typesToReturn = types.map(genType);

          // defaultAbiCoder attaches some unwanted properties to the list object
          _inputs = deepRemoveUnwantedArrayProperties(_inputs);
          result = {
            methodName,
            method,
            types: typesToReturn,
            inputs: _inputs,
            names
          };
        }
      } catch (err) {
        console.log(err);
      }
    }
    if (!result.method) {
      for (const obj of this.abi) {
        if (obj.type === 'constructor') {
          continue;
        }
        if (obj.type === 'event') {
          continue;
        }
        const method = obj.name || null;
        try {
          const ifc = new ethers__WEBPACK_IMPORTED_MODULE_4__.Interface([]);
          const _result = ifc.decodeFunctionData(ethers__WEBPACK_IMPORTED_MODULE_5__.FunctionFragment.from(obj), data);
          const inputs = deepRemoveUnwantedArrayProperties(_result);
          result.method = method;
          result.methodName = getMethodName(obj);
          result.inputs = inputs;
          result.names = obj.inputs ? obj.inputs.map(x => {
            if (x.type.includes('tuple')) {
              var _x$components;
              return [x.name, ((_x$components = x.components) === null || _x$components === void 0 ? void 0 : _x$components.map(a => a.name)) || ''];
            } else {
              return x.name;
            }
          }) : [];
          const types = obj.inputs ? obj.inputs.map(x => {
            if (x.type.includes('tuple')) {
              return x;
            } else {
              return x.type;
            }
          }) : [];
          result.types = types.map(genType);
        } catch (err) {}
      }
    }
    if (!result.method) {
      try {
        const decoded = this.decodeConstructor(data);
        if (decoded) {
          return decoded;
        }
      } catch (err) {}
    }
    return result;
  }
}

/***/ }),

/***/ "../extension-base/src/utils/eth/parseTransaction/index.ts":
/*!*****************************************************************!*\
  !*** ../extension-base/src/utils/eth/parseTransaction/index.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isContractAddress": () => (/* binding */ isContractAddress),
/* harmony export */   "parseContractInput": () => (/* binding */ parseContractInput),
/* harmony export */   "parseEvmRlp": () => (/* binding */ parseEvmRlp)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/helper */ "../extension-base/src/services/chain-service/helper/index.ts");
/* harmony import */ var _subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/services/chain-service/utils */ "../extension-base/src/services/chain-service/utils.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth */ "../extension-base/src/utils/eth.ts");
/* harmony import */ var _subwallet_extension_base_utils_eth_parseTransaction_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @subwallet/extension-base/utils/eth/parseTransaction/base */ "../extension-base/src/utils/eth/parseTransaction/base.ts");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ "../../node_modules/axios/lib/axios.js");
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ "../../node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var i18next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18next */ "../../node_modules/i18next/dist/esm/i18next.js");
// Copyright 2019-2022 @subwallet/extension-koni authors & contributors
// SPDX-License-Identifier: Apache-2.0









// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
const ABIs = [_subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_2__._ERC20_ABI, _subwallet_extension_base_services_chain_service_helper__WEBPACK_IMPORTED_MODULE_2__._ERC721_ABI];
const genName = name => {
  if (typeof name === 'string') {
    return name;
  } else {
    if (Array.isArray(name[1])) {
      const _name = name[0];
      const children = genName(name[1]);
      return `${_name}(${children})`;
    } else {
      return name.join(', ');
    }
  }
};
const genInput = input => {
  if (Array.isArray(input)) {
    const arr = input.map(genInput);
    return `[${arr.join(', ')}]`;
  } else {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
    return input.toString();
  }
};
const parseType = _types => {
  const types = _types.trim();
  if (types.indexOf('(') !== 0) {
    if (!types.includes(',')) {
      return types.trim();
    } else {
      const arr = [];
      let s = types;
      do {
        if (s.indexOf('(') === 0) {
          const start = s.indexOf('(');
          const end = s.lastIndexOf(')');
          const _new = s.slice(start, end + 1);
          arr.push(_new);
          s = s.replace(_new, '');
        } else {
          const start = s.indexOf(',');
          if (start !== -1) {
            const str = s.slice(0, start);
            arr.push(str);
            s = s.slice(start + 1).trim();
          } else {
            arr.push(s);
            s = '';
          }
        }
      } while (s.length);
      return arr.map(s => s.trim());
    }
  } else {
    const start = types.indexOf('(');
    const end = types.lastIndexOf(')');
    const _new = types.slice(start + 1, end);
    return parseType(_new);
  }
};
const parseResult = (type, input, name) => {
  const types = parseType(type);
  if (Array.isArray(types)) {
    const inputs = input;
    const _name = name[0];
    const names = name[1];
    const children = [];
    types.forEach((type, index) => {
      children.push(parseResult(type, inputs[index], names[index]));
    });
    return {
      type: type,
      name: _name,
      value: genInput(input),
      children: children
    };
  } else {
    return {
      type: types,
      name: genName(name),
      value: genInput(input)
    };
  }
};
const isContractAddress = async (address, evmApi) => {
  if (!evmApi) {
    return false;
  } else {
    const code = await evmApi.api.eth.getCode(address);
    return code !== '0x';
  }
};
const parseInputWithAbi = (input, abi) => {
  const decoder = new _subwallet_extension_base_utils_eth_parseTransaction_base__WEBPACK_IMPORTED_MODULE_3__.InputDataDecoder(abi);
  const raw = decoder.decodeData(input);
  if (raw.method && raw.methodName) {
    const temp = {
      method: raw.method,
      methodName: raw.methodName,
      args: []
    };
    raw.types.forEach((type, index) => {
      temp.args.push(parseResult(type, raw.inputs[index], raw.names[index]));
    });
    return temp;
  } else {
    return null;
  }
};
const parseContractInput = async (input, contractAddress, network) => {
  for (const abi of ABIs) {
    const temp = parseInputWithAbi(input, abi);
    if (temp) {
      return {
        result: temp
      };
    }
  }
  if (contractAddress && network) {
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._getEvmAbiExplorer)(network)) {
      try {
        const res = await axios__WEBPACK_IMPORTED_MODULE_5__["default"].get((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._getEvmAbiExplorer)(network), {
          params: {
            address: contractAddress
          },
          timeout: 3000
        });

        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (res.status === 200 && res.data.status === '1') {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
          const abi = res.data.result;
          const temp = parseInputWithAbi(input, abi);
          if (temp) {
            return {
              result: temp
            };
          }
        }
      } catch (e) {}
    }
  }
  return {
    result: input
  };
};
const getChainInfoByChainId = (networkMap, chainId) => {
  if (!chainId) {
    for (const n in networkMap) {
      if (!Object.prototype.hasOwnProperty.call(networkMap, n)) {
        continue;
      }
      const networkInfo = networkMap[n];
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._isChainEvmCompatible)(networkInfo)) {
        return networkInfo;
      }
    }
    return null;
  }
  for (const n in networkMap) {
    if (!Object.prototype.hasOwnProperty.call(networkMap, n)) {
      continue;
    }
    const networkInfo = networkMap[n];
    if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._getEvmChainId)(networkInfo) === chainId) {
      return networkInfo;
    }
  }
  return null;
};
const parseEvmRlp = async (data, networkMap, evmApiMap) => {
  const tx = (0,_subwallet_extension_base_utils_eth__WEBPACK_IMPORTED_MODULE_6__.createTransactionFromRLP)(data);
  if (!tx) {
    throw new Error((0,i18next__WEBPACK_IMPORTED_MODULE_1__.t)('Failed to decode data. Please use a valid QR code'));
  }
  const result = {
    input: tx.data,
    data: tx.data,
    gasPrice: new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](tx.gasPrice).toNumber(),
    gas: new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](tx.gas).toNumber(),
    to: tx.to,
    value: new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](tx.value).toNumber(),
    nonce: new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](tx.nonce).toNumber()
  };
  const network = getChainInfoByChainId(networkMap, parseInt(tx.ethereumChainId));
  for (const abi of ABIs) {
    const temp = parseInputWithAbi(tx.data, abi);
    if (temp) {
      result.data = temp;
      return result;
    }
  }
  if (tx.to && network) {
    if (await isContractAddress(tx.to, evmApiMap[network.slug])) {
      if ((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._getEvmAbiExplorer)(network) !== '') {
        try {
          const res = await axios__WEBPACK_IMPORTED_MODULE_5__["default"].get((0,_subwallet_extension_base_services_chain_service_utils__WEBPACK_IMPORTED_MODULE_4__._getEvmAbiExplorer)(network), {
            params: {
              address: tx.to
            },
            timeout: 2000
          });

          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          if (res.status === 200 && res.data.status === '1') {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
            const abi = res.data.result;
            const temp = parseInputWithAbi(tx.data, abi);
            if (temp) {
              result.data = temp;
              return result;
            }
          }
        } catch (e) {}
      }
    }
  }
  return result;
};

/***/ }),

/***/ "../extension-base/src/utils/request.ts":
/*!**********************************************!*\
  !*** ../extension-base/src/utils/request.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isInternalRequest": () => (/* binding */ isInternalRequest)
/* harmony export */ });
/* harmony import */ var _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/services/request-service/constants */ "../extension-base/src/services/request-service/constants.ts");
// Copyright 2019-2022 @subwallet/extension-base
// SPDX-License-Identifier: Apache-2.0


function isInternalRequest(url) {
  return url === _subwallet_extension_base_services_request_service_constants__WEBPACK_IMPORTED_MODULE_0__.EXTENSION_REQUEST_URL;
}

/***/ }),

/***/ "./src/background.ts":
/*!***************************!*\
  !*** ./src/background.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _subwallet_extension_inject_crossenv__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-inject/crossenv */ "../extension-inject/src/crossenv.ts");
/* harmony import */ var _subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/helpers */ "../extension-base/src/background/handlers/helpers.ts");
/* harmony import */ var _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @subwallet/extension-base/defaults */ "../extension-base/src/defaults.ts");
/* harmony import */ var _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @subwallet/extension-base/koni/background/handlers */ "../extension-base/src/koni/background/handlers/index.ts");
/* harmony import */ var _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @subwallet/extension-base/stores */ "../extension-base/src/stores/Accounts.ts");
/* harmony import */ var _subwallet_extension_base_stores_Keyring__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @subwallet/extension-base/stores/Keyring */ "../extension-base/src/stores/Keyring.ts");
/* harmony import */ var _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @subwallet/ui-keyring */ "../../node_modules/@subwallet/ui-keyring/index.js");
/* harmony import */ var _polkadot_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @polkadot/util */ "../../node_modules/@polkadot/util/assert.js");
/* harmony import */ var _polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @polkadot/util-crypto */ "../../node_modules/@polkadot/util-crypto/crypto.js");
var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__]);
_subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];
// Copyright 2019-2022 @polkadot/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0

// Runs in the extension background, handling all keyring access









const IDLE_TIME = 60000 * 2; // 2 minutes

let idleTimer;
let waitingToStop = false;
let openCount = 0;

// setup the notification (same a FF default background, white text)
(0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_1__.withErrorLog)(() => chrome.browserAction.setBadgeBackgroundColor({
  color: '#d90000'
}));
function handleExtensionIdling() {
  // handle extension being idle since the init of the extension/browser
  waitingToStop = true;
  idleTimer = setTimeout(() => {
    if (openCount <= 0) {
      _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__.state.sleep().then(() => {
        waitingToStop = false;
      }).catch(err => console.warn(err));
    }
  }, IDLE_TIME);
}

// listen to all messages and handle appropriately
chrome.runtime.onConnect.addListener(port => {
  // shouldn't happen, however... only listen to what we know about
  (0,_polkadot_util__WEBPACK_IMPORTED_MODULE_3__.assert)([_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_4__.PORT_CONTENT, _subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_4__.PORT_EXTENSION].includes(port.name), `Unknown connection from ${port.name}`);
  if (_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_4__.PORT_EXTENSION === port.name) {
    openCount += 1;
    _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__.state.wakeup().catch(err => console.warn(err));
    if (waitingToStop) {
      clearTimeout(idleTimer);
      waitingToStop = false;
    }
  }

  // message and disconnect handlers
  port.onMessage.addListener(data => (0,_subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__["default"])(data, port));
  port.onDisconnect.addListener(() => {
    if (_subwallet_extension_base_defaults__WEBPACK_IMPORTED_MODULE_4__.PORT_EXTENSION === port.name) {
      openCount -= 1;
      if (openCount <= 0) {
        waitingToStop = true;
        idleTimer = setTimeout(() => {
          _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__.state.sleep().then(() => {
            waitingToStop = false;
          }).catch(err => console.warn(err));
        }, IDLE_TIME);
      }
    }
  });
});

// Trigger single mode
// chrome.runtime.onInstalled.addListener(function (details) {
//   if (details.reason === 'install') {
//     onExtensionInstall();
//   }
// });

// Setup uninstall URL every background start
chrome.runtime.setUninstallURL('https://slink.subwallet.app/uninstall-feedback');
chrome.runtime.onStartup.addListener(function () {
  handleExtensionIdling();
});

// initial setup
(0,_polkadot_util_crypto__WEBPACK_IMPORTED_MODULE_5__.cryptoWaitReady)().then(() => {
  // load all the keyring data
  _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_6__["default"].loadAll({
    store: new _subwallet_extension_base_stores__WEBPACK_IMPORTED_MODULE_7__["default"](),
    type: 'sr25519',
    password_store: new _subwallet_extension_base_stores_Keyring__WEBPACK_IMPORTED_MODULE_8__["default"]()
  });
  _subwallet_ui_keyring__WEBPACK_IMPORTED_MODULE_6__["default"].restoreKeyringPassword().finally(() => {
    _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__.state.updateKeyringState();
  });
  _subwallet_extension_base_koni_background_handlers__WEBPACK_IMPORTED_MODULE_2__.state.eventService.emit('crypto.ready', true);

  // Sleep extension after 2 minutes of inactivity or without any action
  handleExtensionIdling();
}).catch(error => {
  console.error('initialization failed', error);
});
__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } });

/***/ }),

/***/ "./src/installation.ts":
/*!*****************************!*\
  !*** ./src/installation.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @subwallet/extension-base/background/handlers/helpers */ "../extension-base/src/background/handlers/helpers.ts");
// Copyright 2019-2022 @subwallet/extension authors & contributors
// SPDX-License-Identifier: Apache-2.0


chrome.runtime.onInstalled.addListener(function (details) {
  if (details.reason === 'install') {
    // Add small timeout to avoid unwanted problems with the extension popup in the first time loaded
    setTimeout(() => {
      try {
        // Open expand page
        const url = `${chrome.extension.getURL('index.html')}#/`;
        (0,_subwallet_extension_base_background_handlers_helpers__WEBPACK_IMPORTED_MODULE_0__.withErrorLog)(() => chrome.tabs.create({
          url
        }));
      } catch (e) {
        console.error(e);
      }
    }, 900);
  }
});

/***/ }),

/***/ "?98fd":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?0749":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?e376":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?7dc1":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f84f":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?777e":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?8740":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f54d":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?fa5e":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4c42":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?c86f":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?1dff":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?983a":
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?109b":
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/azero_domain_registry_abi.json":
/*!******************************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/azero_domain_registry_abi.json ***!
  \******************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"source":{"hash":"0x60863fb70e2f5f55ba58c96eb4bea9e8d1ee9066d130f99cd6ff76e2f4e8624b","language":"ink! 4.2.1","compiler":"rustc 1.68.0-nightly","build_info":{"build_mode":"Release","cargo_contract_version":"3.0.1","rust_toolchain":"nightly-aarch64-apple-darwin","wasm_opt_settings":{"keep_debug_symbols":false,"optimization_passes":"Z"}}},"contract":{"name":"azns_registry","version":"1.0.0","authors":["AZERO.ID <hello@azero.id>"]},"spec":{"constructors":[{"args":[{"label":"admin","type":{"displayName":["AccountId"],"type":0}},{"label":"name_checker_addr","type":{"displayName":["Option"],"type":9}},{"label":"fee_calculator_addr","type":{"displayName":["Option"],"type":9}},{"label":"merkle_verifier_addr","type":{"displayName":["Option"],"type":9}},{"label":"tld","type":{"displayName":["String"],"type":3}},{"label":"base_uri","type":{"displayName":["String"],"type":3}}],"default":false,"docs":["Creates a new AZNS contract."],"label":"new","payable":false,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":10},"selector":"0x9bae9d5e"}],"docs":[],"environment":{"accountId":{"displayName":["AccountId"],"type":0},"balance":{"displayName":["Balance"],"type":4},"blockNumber":{"displayName":["BlockNumber"],"type":5},"chainExtension":{"displayName":["ChainExtension"],"type":72},"hash":{"displayName":["Hash"],"type":71},"maxEventTopics":4,"timestamp":{"displayName":["Timestamp"],"type":6}},"events":[{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":true,"label":"from","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":false,"label":"registration_timestamp","type":{"displayName":["u64"],"type":6}},{"docs":[],"indexed":false,"label":"expiration_timestamp","type":{"displayName":["u64"],"type":6}}],"docs":["Emitted whenever a new name is registered."],"label":"Register"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":true,"label":"from","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"referrer","type":{"displayName":["Option"],"type":13}},{"docs":[],"indexed":false,"label":"referrer_addr","type":{"displayName":["Option"],"type":9}},{"docs":[],"indexed":false,"label":"received_fee","type":{"displayName":["Balance"],"type":4}},{"docs":[],"indexed":false,"label":"forwarded_referrer_fee","type":{"displayName":["Balance"],"type":4}}],"docs":[],"label":"FeeReceived"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":true,"label":"from","type":{"displayName":["AccountId"],"type":0}}],"docs":["Emitted whenever a name is released"],"label":"Release"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":false,"label":"from","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"old_address","type":{"displayName":["Option"],"type":9}},{"docs":[],"indexed":true,"label":"new_address","type":{"displayName":["AccountId"],"type":0}}],"docs":["Emitted whenever an address changes."],"label":"SetAddress"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":false,"label":"from","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"old_controller","type":{"displayName":["Option"],"type":9}},{"docs":[],"indexed":true,"label":"new_controller","type":{"displayName":["AccountId"],"type":0}}],"docs":["Emitted whenever controller changes."],"label":"SetController"},{"args":[{"docs":[],"indexed":true,"label":"account","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"primary_name","type":{"displayName":["Option"],"type":13}}],"docs":[],"label":"SetPrimaryName"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":false,"label":"from","type":{"displayName":["AccountId"],"type":0}}],"docs":[],"label":"RecordsUpdated"},{"args":[{"docs":[],"indexed":true,"label":"from","type":{"displayName":["Option"],"type":9}},{"docs":[],"indexed":true,"label":"to","type":{"displayName":["Option"],"type":9}},{"docs":[],"indexed":true,"label":"id","type":{"displayName":["Id"],"type":60}}],"docs":["Event emitted when a token transfer occurs."],"label":"Transfer"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":true,"label":"caller","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"unlocker","type":{"displayName":["AccountId"],"type":0}}],"docs":["Event emitted when a token is locked."],"label":"Lock"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}}],"docs":["Event emitted when a token is unlocked."],"label":"Unlock"},{"args":[{"docs":[],"indexed":true,"label":"owner","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"operator","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"id","type":{"displayName":["Option"],"type":63}},{"docs":[],"indexed":false,"label":"approved","type":{"displayName":["bool"],"type":20}}],"docs":["Event emitted when a token approve occurs."],"label":"Approval"},{"args":[],"docs":["Emitted when switching from whitelist-phase to public-phase"],"label":"PublicPhaseActivated"},{"args":[{"docs":[],"indexed":true,"label":"name","type":{"displayName":["String"],"type":3}},{"docs":[],"indexed":true,"label":"account_id","type":{"displayName":["Option"],"type":9}},{"docs":[],"indexed":false,"label":"action","type":{"displayName":["bool"],"type":20}}],"docs":["Emitted when a name is reserved or removed from the reservation list"],"label":"Reserve"}],"lang_error":{"displayName":["ink","LangError"],"type":12},"messages":[{"args":[{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"recipient","type":{"displayName":["AccountId"],"type":0}},{"label":"years_to_register","type":{"displayName":["u8"],"type":2}},{"label":"referrer","type":{"displayName":["Option"],"type":13}},{"label":"merkle_proof","type":{"displayName":["Option"],"type":14}}],"default":false,"docs":[" Register specific name on behalf of some other address."," Pay the fee, but forward the ownership of the name to the provided recipient",""," NOTE: During the whitelist phase, use `register()` method instead."],"label":"register_on_behalf_of","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x7aa26a96"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"years_to_register","type":{"displayName":["u8"],"type":2}},{"label":"referrer","type":{"displayName":["Option"],"type":13}},{"label":"merkle_proof","type":{"displayName":["Option"],"type":14}},{"label":"set_as_primary_name","type":{"displayName":["bool"],"type":20}}],"default":false,"docs":[" Register specific name with caller as owner.",""," NOTE: Whitelisted addresses can buy one name during the whitelist phase by submitting its proof"],"label":"register","mutates":true,"payable":true,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x229b553f"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Allows users to claim their reserved name at zero cost"],"label":"claim_reserved_name","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x2251f2bc"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Release name from registration."],"label":"release","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x3f2be152"},{"args":[{"label":"to","type":{"displayName":["AccountId"],"type":0}},{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"keep_records","type":{"displayName":["bool"],"type":20}},{"label":"keep_controller","type":{"displayName":["bool"],"type":20}},{"label":"keep_resolving","type":{"displayName":["bool"],"type":20}},{"label":"data","type":{"displayName":["Vec"],"type":21}}],"default":false,"docs":[" Transfer owner to another address."],"label":"transfer","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":22},"selector":"0x84a15da1"},{"args":[{"label":"names","type":{"displayName":["Vec"],"type":25}}],"default":false,"docs":[" Removes the associated state of expired-names from storage"],"label":"clear_expired_names","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":26},"selector":"0xd00a53e5"},{"args":[{"label":"primary_name","type":{"displayName":["Option"],"type":13}}],"default":false,"docs":[" Set primary name of an address (reverse record)"," @note if name is set to None then the primary-name for the caller will be removed (if exists)"],"label":"set_primary_name","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0xad11843c"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"new_address","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[" Set resolved address for specific name."],"label":"set_address","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0xb8a4d3d9"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"new_controller","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"set_controller","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0xc5e161ea"},{"args":[{"label":"names","type":{"displayName":["Vec"],"type":25}}],"default":false,"docs":[],"label":"reset_resolved_address","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x955299c9"},{"args":[{"label":"names","type":{"displayName":["Vec"],"type":25}}],"default":false,"docs":[],"label":"reset_controller","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x1dffd33a"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"records","type":{"displayName":["Vec"],"type":28}},{"label":"remove_rest","type":{"displayName":["bool"],"type":20}}],"default":false,"docs":[],"label":"update_records","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0xde84a1ba"},{"args":[{"label":"names","type":{"displayName":["Vec"],"type":25}}],"default":false,"docs":[" Returns the current status of the name"],"label":"get_name_status","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0x964d7612"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Get the addresses related to specific name"],"label":"get_address_dict","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":34},"selector":"0xf069dff3"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Get owner of specific name."],"label":"get_owner","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":36},"selector":"0x07fcd0b1"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Get controller of specific name."],"label":"get_controller","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":36},"selector":"0x0abf0e97"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Get address for specific name."],"label":"get_address","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":36},"selector":"0xd259f7ba"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[],"label":"get_registration_period","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":38},"selector":"0x61437185"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Gets all records"],"label":"get_all_records","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":41},"selector":"0x528be9f1"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"key","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[" Gets an arbitrary record by key"],"label":"get_record","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":42},"selector":"0x7e6cb4ce"},{"args":[{"label":"owner","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[" Returns all names the address owns"],"label":"get_owned_names_of_address","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":44},"selector":"0xe413b13a"},{"args":[{"label":"controller","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_controlled_names_of_address","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":44},"selector":"0x9f25301e"},{"args":[{"label":"address","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_resolving_names_of_address","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":44},"selector":"0xadd2f457"},{"args":[{"label":"address","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_primary_name","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":42},"selector":"0x404f1d73"},{"args":[{"label":"address","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_primary_domain","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":45},"selector":"0xbf5b5677"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[],"label":"get_lock_info","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":46},"selector":"0x5974dd04"},{"args":[{"label":"address","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_names_of_address","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":44},"selector":"0xf82caf60"},{"args":[{"label":"user","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_owner_to_name_count","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":47},"selector":"0xb779edfe"},{"args":[{"label":"user","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_controller_to_name_count","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":47},"selector":"0xf5e0d676"},{"args":[{"label":"user","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"get_resolving_to_name_count","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":47},"selector":"0x28610555"},{"args":[],"default":false,"docs":[],"label":"get_records_size_limit","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":48},"selector":"0x8405efa0"},{"args":[],"default":false,"docs":[],"label":"get_tld","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":50},"selector":"0xd61daed4"},{"args":[],"default":false,"docs":[],"label":"get_base_uri","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":50},"selector":"0x6e06617c"},{"args":[],"default":false,"docs":[" Returns `true` when contract is in whitelist-phase"," and `false` when it is in public-phase"],"label":"is_whitelist_phase","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":51},"selector":"0x59d8255b"},{"args":[{"label":"account","type":{"displayName":["AccountId"],"type":0}},{"label":"merkle_proof","type":{"displayName":["Option"],"type":14}}],"default":false,"docs":[],"label":"verify_proof","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":51},"selector":"0x71c9d9ba"},{"args":[{"label":"beneficiary","type":{"displayName":["Option"],"type":9}},{"label":"value","type":{"displayName":["Option"],"type":52}}],"default":false,"docs":[" (ADMIN-OPERATION)"," Transfers `value` amount of tokens to the caller."],"label":"withdraw","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x410fcc9d"},{"args":[],"default":false,"docs":[" (ADMIN-OPERATION)"," Switch from whitelist-phase to public-phase"],"label":"switch_to_public_phase","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x17257477"},{"args":[{"label":"set","type":{"displayName":["Vec"],"type":53}}],"default":false,"docs":[" (ADMIN-OPERATION)"," Reserve name name for specific addresses"],"label":"add_reserved_names","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x6e0d3fa8"},{"args":[{"label":"set","type":{"displayName":["Vec"],"type":25}}],"default":false,"docs":[" (ADMIN-OPERATION)"," Remove given names from the list of reserved names"],"label":"remove_reserved_name","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x9ccff6c5"},{"args":[{"label":"limit","type":{"displayName":["Option"],"type":49}}],"default":false,"docs":[" (ADMIN-OPERATION)"," Update the limit of records allowed to store per name"],"label":"set_records_size_limit","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x7c9baef6"},{"args":[{"label":"name","type":{"displayName":["String"],"type":3}},{"label":"recipient","type":{"displayName":["AccountId"],"type":0}},{"label":"years_to_register","type":{"displayName":["u8"],"type":2}},{"label":"referrer","type":{"displayName":["Option"],"type":13}}],"default":false,"docs":[],"label":"get_name_price","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":55},"selector":"0xb565be46"},{"args":[{"label":"recipient","type":{"displayName":["AccountId"],"type":0}},{"label":"referrer_name","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[],"label":"validate_referrer","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":51},"selector":"0x30fc989d"},{"args":[],"default":false,"docs":[],"label":"get_admin","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":58},"selector":"0x57b8a8a7"},{"args":[],"default":false,"docs":[],"label":"get_pending_admin","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":46},"selector":"0xbcd31d76"},{"args":[{"label":"account","type":{"displayName":["Option"],"type":9}}],"default":false,"docs":[],"label":"transfer_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x107e33ea"},{"args":[],"default":false,"docs":[],"label":"accept_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0xb55be9f0"},{"args":[{"label":"code_hash","type":{"displayName":[],"type":1}}],"default":false,"docs":[],"label":"upgrade_contract","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x1345543d"},{"args":[],"default":false,"docs":[],"label":"PSP34::collection_id","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":59},"selector":"0xffa27a5f"},{"args":[{"label":"owner","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"PSP34::balance_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":62},"selector":"0xcde7e55f"},{"args":[{"label":"id","type":{"displayName":["Id"],"type":60}}],"default":false,"docs":[],"label":"PSP34::owner_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":46},"selector":"0x1168624d"},{"args":[{"label":"owner","type":{"displayName":["AccountId"],"type":0}},{"label":"operator","type":{"displayName":["AccountId"],"type":0}},{"label":"id","type":{"displayName":["Option"],"type":63}}],"default":false,"docs":[],"label":"PSP34::allowance","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":51},"selector":"0x4790f55a"},{"args":[{"label":"operator","type":{"displayName":["AccountId"],"type":0}},{"label":"id","type":{"displayName":["Option"],"type":63}},{"label":"approved","type":{"displayName":["bool"],"type":20}}],"default":false,"docs":[],"label":"PSP34::approve","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":22},"selector":"0x1932a8b0"},{"args":[{"label":"to","type":{"displayName":["AccountId"],"type":0}},{"label":"id","type":{"displayName":["Id"],"type":60}},{"label":"data","type":{"displayName":["Vec"],"type":21}}],"default":false,"docs":[],"label":"PSP34::transfer","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":22},"selector":"0x3128d61b"},{"args":[],"default":false,"docs":[],"label":"PSP34::total_supply","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":47},"selector":"0x628413fe"},{"args":[{"label":"owner","type":{"displayName":["AccountId"],"type":0}},{"label":"index","type":{"displayName":["u128"],"type":4}}],"default":false,"docs":[],"label":"PSP34Enumerable::owners_token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":64},"selector":"0x3bcfb511"},{"args":[{"label":"_index","type":{"displayName":["u128"],"type":4}}],"default":false,"docs":[],"label":"PSP34Enumerable::token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":64},"selector":"0xcd0340d0"},{"args":[{"label":"id","type":{"displayName":["Id"],"type":60}},{"label":"key","type":{"displayName":["Vec"],"type":21}}],"default":false,"docs":[],"label":"PSP34Metadata::get_attribute","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":66},"selector":"0xf19d48d1"},{"args":[],"default":false,"docs":[],"label":"Psp34Traits::get_owner","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":58},"selector":"0x8e1d8d71"},{"args":[{"label":"token_id","type":{"displayName":["Id"],"type":60}}],"default":false,"docs":[],"label":"Psp34Traits::token_uri","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":50},"selector":"0x249dfd4f"},{"args":[{"label":"uri","type":{"displayName":["String"],"type":3}}],"default":false,"docs":[],"label":"Psp34Traits::set_base_uri","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":68},"selector":"0x4de6850b"},{"args":[],"default":false,"docs":[],"label":"Psp34Traits::get_attribute_count","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":62},"selector":"0x61c50d69"},{"args":[{"label":"index","type":{"displayName":["u32"],"type":5}}],"default":false,"docs":[],"label":"Psp34Traits::get_attribute_name","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":50},"selector":"0xfcfe34de"},{"args":[{"label":"token_id","type":{"displayName":["Id"],"type":60}},{"label":"attributes","type":{"displayName":["Vec"],"type":25}}],"default":false,"docs":[],"label":"Psp34Traits::get_attributes","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":44},"selector":"0x18209102"},{"args":[{"label":"_token_id","type":{"displayName":["Id"],"type":60}},{"label":"_metadata","type":{"displayName":["Vec"],"type":7}}],"default":false,"docs":[],"label":"Psp34Traits::set_multiple_attributes","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":68},"selector":"0x5bf8416b"}]},"storage":{"root":{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":0}},"name":"admin"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":0}},"name":"0"}],"name":"Some"}}}},"name":"pending_admin"},{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"tld"},{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"base_uri"},{"layout":{"leaf":{"key":"0x00000000","ty":4}},"name":"total_supply"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":5}},"name":"0"}],"name":"Some"}}}},"name":"records_size_limit"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":0}},"name":"account_id"}],"name":"CallBuilder"}},"name":"inner"}],"name":"NameCheckerRef"}},"name":"0"}],"name":"Some"}}}},"name":"name_checker"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":0}},"name":"account_id"}],"name":"CallBuilder"}},"name":"inner"}],"name":"FeeCalculatorRef"}},"name":"0"}],"name":"Some"}}}},"name":"fee_calculator"},{"layout":{"root":{"layout":{"enum":{"dispatchKey":"0x00000064","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000064","ty":0}},"name":"0"}],"name":"Some"}}}},"root_key":"0x00000064"}},"name":"reserved_names"},{"layout":{"root":{"layout":{"leaf":{"key":"0x00000065","ty":6}},"root_key":"0x00000065"}},"name":"operator_approvals"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x000000c8","ty":0}},"name":"owner"},{"layout":{"leaf":{"key":"0x000000c8","ty":0}},"name":"controller"},{"layout":{"leaf":{"key":"0x000000c8","ty":0}},"name":"resolved"}],"name":"AddressDict"}},"root_key":"0x000000c8"}},"name":"name_to_address_dict"},{"layout":{"root":{"layout":{"leaf":{"key":"0x000000c9","ty":0}},"root_key":"0x000000c9"}},"name":"name_to_lock"},{"layout":{"root":{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x000000ca","ty":6}},"name":"0"},{"layout":{"leaf":{"key":"0x000000ca","ty":6}},"name":"1"}],"name":"(A, B)"}},"root_key":"0x000000ca"}},"name":"name_to_period"},{"layout":{"root":{"layout":{"leaf":{"key":"0x000000cb","ty":7}},"root_key":"0x000000cb"}},"name":"records"},{"layout":{"root":{"layout":{"leaf":{"key":"0x0000012c","ty":4}},"root_key":"0x0000012c"}},"name":"owner_to_name_count"},{"layout":{"root":{"layout":{"leaf":{"key":"0x0000012d","ty":3}},"root_key":"0x0000012d"}},"name":"owner_to_names"},{"layout":{"root":{"layout":{"leaf":{"key":"0x0000012e","ty":4}},"root_key":"0x0000012e"}},"name":"name_to_owner_index"},{"layout":{"root":{"layout":{"leaf":{"key":"0x00000136","ty":4}},"root_key":"0x00000136"}},"name":"controller_to_name_count"},{"layout":{"root":{"layout":{"leaf":{"key":"0x00000137","ty":3}},"root_key":"0x00000137"}},"name":"controller_to_names"},{"layout":{"root":{"layout":{"leaf":{"key":"0x00000138","ty":4}},"root_key":"0x00000138"}},"name":"name_to_controller_index"},{"layout":{"root":{"layout":{"leaf":{"key":"0x00000140","ty":4}},"root_key":"0x00000140"}},"name":"resolving_to_name_count"},{"layout":{"root":{"layout":{"leaf":{"key":"0x00000141","ty":3}},"root_key":"0x00000141"}},"name":"resolving_to_names"},{"layout":{"root":{"layout":{"leaf":{"key":"0x00000143","ty":4}},"root_key":"0x00000143"}},"name":"name_to_resolving_index"},{"layout":{"root":{"layout":{"leaf":{"key":"0x0000018f","ty":3}},"root_key":"0x0000018f"}},"name":"address_to_primary_name"},{"layout":{"root":{"layout":{"enum":{"dispatchKey":"0x000003e7","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x000003e7","ty":0}},"name":"account_id"}],"name":"CallBuilder"}},"name":"inner"}],"name":"MerkleVerifierRef"}},"name":"0"}],"name":"Some"}}}},"root_key":"0x000003e7"}},"name":"whitelisted_address_verifier"}],"name":"Registry"}},"root_key":"0x00000000"}},"types":[{"id":0,"type":{"def":{"composite":{"fields":[{"type":1,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","AccountId"]}},{"id":1,"type":{"def":{"array":{"len":32,"type":2}}}},{"id":2,"type":{"def":{"primitive":"u8"}}},{"id":3,"type":{"def":{"primitive":"str"}}},{"id":4,"type":{"def":{"primitive":"u128"}}},{"id":5,"type":{"def":{"primitive":"u32"}}},{"id":6,"type":{"def":{"primitive":"u64"}}},{"id":7,"type":{"def":{"sequence":{"type":8}}}},{"id":8,"type":{"def":{"tuple":[3,3]}}},{"id":9,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":0}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":0}],"path":["Option"]}},{"id":10,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":12}],"path":["Result"]}},{"id":11,"type":{"def":{"tuple":[]}}},{"id":12,"type":{"def":{"variant":{"variants":[{"index":1,"name":"CouldNotReadInput"}]}},"path":["ink_primitives","LangError"]}},{"id":13,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":3}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":3}],"path":["Option"]}},{"id":14,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":15}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":15}],"path":["Option"]}},{"id":15,"type":{"def":{"sequence":{"type":1}}}},{"id":16,"type":{"def":{"variant":{"variants":[{"fields":[{"type":17}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":17},{"name":"E","type":12}],"path":["Result"]}},{"id":17,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":18}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":18}],"path":["Result"]}},{"id":18,"type":{"def":{"variant":{"variants":[{"index":0,"name":"NotAdmin"},{"index":1,"name":"NameAlreadyExists"},{"index":2,"name":"NameDoesntExist"},{"index":3,"name":"NameNotAllowed"},{"index":4,"name":"CallerIsNotOwner"},{"index":5,"name":"CallerIsNotController"},{"index":6,"name":"FeeNotPaid"},{"index":7,"name":"NameEmpty"},{"index":8,"name":"RecordNotFound"},{"index":9,"name":"WithdrawFailed"},{"index":10,"name":"InsufficientBalance"},{"index":11,"name":"NoResolvedAddress"},{"index":12,"name":"AlreadyClaimed"},{"index":13,"name":"InvalidMerkleProof"},{"index":14,"name":"CannotBuyReservedName"},{"index":15,"name":"NotReservedName"},{"index":16,"name":"NotAuthorised"},{"index":17,"name":"ZeroAddress"},{"index":18,"name":"RecordsOverflow"},{"fields":[{"type":19,"typeName":"azns_fee_calculator::Error"}],"index":19,"name":"FeeError"},{"index":20,"name":"OnlyDuringWhitelistPhase"},{"index":21,"name":"RestrictedDuringWhitelistPhase"}]}},"path":["azns_registry","azns_registry","Error"]}},{"id":19,"type":{"def":{"variant":{"variants":[{"index":0,"name":"NotAdmin"},{"index":1,"name":"InvalidDuration"},{"index":2,"name":"ZeroLength"},{"index":3,"name":"ZeroPrice"}]}},"path":["azns_fee_calculator","Error"]}},{"id":20,"type":{"def":{"primitive":"bool"}}},{"id":21,"type":{"def":{"sequence":{"type":2}}}},{"id":22,"type":{"def":{"variant":{"variants":[{"fields":[{"type":23}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":23},{"name":"E","type":12}],"path":["Result"]}},{"id":23,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":24}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":24}],"path":["Result"]}},{"id":24,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3,"typeName":"String"}],"index":0,"name":"Custom"},{"index":1,"name":"SelfApprove"},{"index":2,"name":"NotApproved"},{"index":3,"name":"TokenExists"},{"index":4,"name":"TokenNotExists"},{"fields":[{"type":3,"typeName":"String"}],"index":5,"name":"SafeTransferCheckFailed"}]}},"path":["interfaces","psp34_standard","PSP34Error"]}},{"id":25,"type":{"def":{"sequence":{"type":3}}}},{"id":26,"type":{"def":{"variant":{"variants":[{"fields":[{"type":27}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":27},{"name":"E","type":12}],"path":["Result"]}},{"id":27,"type":{"def":{"variant":{"variants":[{"fields":[{"type":4}],"index":0,"name":"Ok"},{"fields":[{"type":18}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":4},{"name":"E","type":18}],"path":["Result"]}},{"id":28,"type":{"def":{"sequence":{"type":29}}}},{"id":29,"type":{"def":{"tuple":[3,13]}}},{"id":30,"type":{"def":{"variant":{"variants":[{"fields":[{"type":31}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":31},{"name":"E","type":12}],"path":["Result"]}},{"id":31,"type":{"def":{"sequence":{"type":32}}}},{"id":32,"type":{"def":{"variant":{"variants":[{"fields":[{"type":33,"typeName":"AddressDict"},{"type":9,"typeName":"Option<AccountId>"}],"index":0,"name":"Registered"},{"fields":[{"type":9,"typeName":"Option<AccountId>"}],"index":1,"name":"Reserved"},{"index":2,"name":"Available"},{"index":3,"name":"Unavailable"}]}},"path":["azns_registry","azns_registry","NameStatus"]}},{"id":33,"type":{"def":{"composite":{"fields":[{"name":"owner","type":0,"typeName":"AccountId"},{"name":"controller","type":0,"typeName":"AccountId"},{"name":"resolved","type":0,"typeName":"AccountId"}]}},"path":["azns_registry","address_dict","AddressDict"]}},{"id":34,"type":{"def":{"variant":{"variants":[{"fields":[{"type":35}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":35},{"name":"E","type":12}],"path":["Result"]}},{"id":35,"type":{"def":{"variant":{"variants":[{"fields":[{"type":33}],"index":0,"name":"Ok"},{"fields":[{"type":18}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":33},{"name":"E","type":18}],"path":["Result"]}},{"id":36,"type":{"def":{"variant":{"variants":[{"fields":[{"type":37}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":37},{"name":"E","type":12}],"path":["Result"]}},{"id":37,"type":{"def":{"variant":{"variants":[{"fields":[{"type":0}],"index":0,"name":"Ok"},{"fields":[{"type":18}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":0},{"name":"E","type":18}],"path":["Result"]}},{"id":38,"type":{"def":{"variant":{"variants":[{"fields":[{"type":39}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":39},{"name":"E","type":12}],"path":["Result"]}},{"id":39,"type":{"def":{"variant":{"variants":[{"fields":[{"type":40}],"index":0,"name":"Ok"},{"fields":[{"type":18}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":40},{"name":"E","type":18}],"path":["Result"]}},{"id":40,"type":{"def":{"tuple":[6,6]}}},{"id":41,"type":{"def":{"variant":{"variants":[{"fields":[{"type":7}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":7},{"name":"E","type":12}],"path":["Result"]}},{"id":42,"type":{"def":{"variant":{"variants":[{"fields":[{"type":43}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":43},{"name":"E","type":12}],"path":["Result"]}},{"id":43,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":18}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":18}],"path":["Result"]}},{"id":44,"type":{"def":{"variant":{"variants":[{"fields":[{"type":25}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":25},{"name":"E","type":12}],"path":["Result"]}},{"id":45,"type":{"def":{"variant":{"variants":[{"fields":[{"type":13}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":13},{"name":"E","type":12}],"path":["Result"]}},{"id":46,"type":{"def":{"variant":{"variants":[{"fields":[{"type":9}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":9},{"name":"E","type":12}],"path":["Result"]}},{"id":47,"type":{"def":{"variant":{"variants":[{"fields":[{"type":4}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":4},{"name":"E","type":12}],"path":["Result"]}},{"id":48,"type":{"def":{"variant":{"variants":[{"fields":[{"type":49}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":49},{"name":"E","type":12}],"path":["Result"]}},{"id":49,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":5}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":5}],"path":["Option"]}},{"id":50,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":12}],"path":["Result"]}},{"id":51,"type":{"def":{"variant":{"variants":[{"fields":[{"type":20}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":20},{"name":"E","type":12}],"path":["Result"]}},{"id":52,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":4}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":4}],"path":["Option"]}},{"id":53,"type":{"def":{"sequence":{"type":54}}}},{"id":54,"type":{"def":{"tuple":[3,9]}}},{"id":55,"type":{"def":{"variant":{"variants":[{"fields":[{"type":56}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":56},{"name":"E","type":12}],"path":["Result"]}},{"id":56,"type":{"def":{"variant":{"variants":[{"fields":[{"type":57}],"index":0,"name":"Ok"},{"fields":[{"type":18}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":57},{"name":"E","type":18}],"path":["Result"]}},{"id":57,"type":{"def":{"tuple":[4,4,4,9]}}},{"id":58,"type":{"def":{"variant":{"variants":[{"fields":[{"type":0}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":0},{"name":"E","type":12}],"path":["Result"]}},{"id":59,"type":{"def":{"variant":{"variants":[{"fields":[{"type":60}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":60},{"name":"E","type":12}],"path":["Result"]}},{"id":60,"type":{"def":{"variant":{"variants":[{"fields":[{"type":2,"typeName":"u8"}],"index":0,"name":"U8"},{"fields":[{"type":61,"typeName":"u16"}],"index":1,"name":"U16"},{"fields":[{"type":5,"typeName":"u32"}],"index":2,"name":"U32"},{"fields":[{"type":6,"typeName":"u64"}],"index":3,"name":"U64"},{"fields":[{"type":4,"typeName":"u128"}],"index":4,"name":"U128"},{"fields":[{"type":21,"typeName":"Vec<u8>"}],"index":5,"name":"Bytes"}]}},"path":["interfaces","psp34_standard","Id"]}},{"id":61,"type":{"def":{"primitive":"u16"}}},{"id":62,"type":{"def":{"variant":{"variants":[{"fields":[{"type":5}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":5},{"name":"E","type":12}],"path":["Result"]}},{"id":63,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":60}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":60}],"path":["Option"]}},{"id":64,"type":{"def":{"variant":{"variants":[{"fields":[{"type":65}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":65},{"name":"E","type":12}],"path":["Result"]}},{"id":65,"type":{"def":{"variant":{"variants":[{"fields":[{"type":60}],"index":0,"name":"Ok"},{"fields":[{"type":24}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":60},{"name":"E","type":24}],"path":["Result"]}},{"id":66,"type":{"def":{"variant":{"variants":[{"fields":[{"type":67}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":67},{"name":"E","type":12}],"path":["Result"]}},{"id":67,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":21}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":21}],"path":["Option"]}},{"id":68,"type":{"def":{"variant":{"variants":[{"fields":[{"type":69}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":69},{"name":"E","type":12}],"path":["Result"]}},{"id":69,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":70}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":70}],"path":["Result"]}},{"id":70,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3,"typeName":"String"}],"index":0,"name":"Custom"}]}},"path":["interfaces","art_zero_traits","ArtZeroError"]}},{"id":71,"type":{"def":{"composite":{"fields":[{"type":1,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","Hash"]}},{"id":72,"type":{"def":{"variant":{}},"path":["ink_env","types","NoChainExtension"]}}],"version":"4"}');

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/erc20_abi.json":
/*!**************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/erc20_abi.json ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"who","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/erc721_abi.json":
/*!***************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/erc721_abi.json ***!
  \***************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"constant":true,"inputs":[{"name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"constant":true,"anonymous":true,"inputs":[{"indexed":true,"name":"tokenId","type":"uint256"}],"outputs":[{"name":"","type":"string"}],"name":"tokenURI","payable":false,"stateMutability":"view","type":"function"},{"constant":true,"anonymous":true,"inputs":[],"outputs":[{"name":"","type":"uint256"}],"name":"totalSupply","payable":false,"stateMutability":"view","type":"function"},{"anonymous":true,"inputs":[],"outputs":[{"name":"_name","type":"string"}],"name":"name","payable":false,"stateMutability":"view","type":"function"},{"anonymous":true,"inputs":[],"outputs":[{"name":"_symbol","type":"string"}],"name":"symbol","payable":false,"stateMutability":"view","type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"approved","type":"address"},{"indexed":true,"name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"operator","type":"address"},{"indexed":false,"name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"tokenId","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]');

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/neuroguns_psp34_abi.json":
/*!************************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/neuroguns_psp34_abi.json ***!
  \************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"source":{"hash":"0x80f9d65ac1c9eb4f4c515ccad19453d742da69121ddfaac06b4eee98225f7ff7","language":"ink! 4.2.1","compiler":"rustc 1.69.0","build_info":{"build_mode":"Release","cargo_contract_version":"3.0.1","rust_toolchain":"stable-x86_64-pc-windows-msvc","wasm_opt_settings":{"keep_debug_symbols":false,"optimization_passes":"Z"}}},"contract":{"name":"neuroguns","version":"3.1.0","authors":["Wolfer"]},"spec":{"constructors":[{"args":[{"label":"base_uri","type":{"displayName":["String"],"type":6}}],"default":false,"docs":[],"label":"new","payable":false,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":10},"selector":"0x9bae9d5e"}],"docs":[],"environment":{"accountId":{"displayName":["AccountId"],"type":0},"balance":{"displayName":["Balance"],"type":5},"blockNumber":{"displayName":["BlockNumber"],"type":4},"chainExtension":{"displayName":["ChainExtension"],"type":33},"hash":{"displayName":["Hash"],"type":32},"maxEventTopics":4,"timestamp":{"displayName":["Timestamp"],"type":8}},"events":[],"lang_error":{"displayName":["ink","LangError"],"type":11},"messages":[{"args":[{"label":"new_base_uri","type":{"displayName":["String"],"type":6}}],"default":false,"docs":[],"label":"set_base_uri","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":12},"selector":"0xec403dee"},{"args":[{"label":"token_id","type":{"displayName":["u64"],"type":8}}],"default":false,"docs":[],"label":"token_uri","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":15},"selector":"0x5b64e66a"},{"args":[{"label":"operator","type":{"displayName":["psp34_external","ApproveInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","ApproveInput2"],"type":16}},{"label":"approved","type":{"displayName":["psp34_external","ApproveInput3"],"type":18}}],"default":false,"docs":[],"label":"PSP34::approve","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":12},"selector":"0x1932a8b0"},{"args":[{"label":"owner","type":{"displayName":["psp34_external","AllowanceInput1"],"type":0}},{"label":"operator","type":{"displayName":["psp34_external","AllowanceInput2"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","AllowanceInput3"],"type":16}}],"default":false,"docs":[],"label":"PSP34::allowance","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":19},"selector":"0x4790f55a"},{"args":[],"default":false,"docs":[],"label":"PSP34::collection_id","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":20},"selector":"0xffa27a5f"},{"args":[{"label":"to","type":{"displayName":["psp34_external","TransferInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","TransferInput2"],"type":17}},{"label":"data","type":{"displayName":["psp34_external","TransferInput3"],"type":9}}],"default":false,"docs":[],"label":"PSP34::transfer","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":12},"selector":"0x3128d61b"},{"args":[],"default":false,"docs":[],"label":"PSP34::total_supply","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":21},"selector":"0x628413fe"},{"args":[{"label":"owner","type":{"displayName":["psp34_external","BalanceOfInput1"],"type":0}}],"default":false,"docs":[],"label":"PSP34::balance_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":22},"selector":"0xcde7e55f"},{"args":[{"label":"id","type":{"displayName":["psp34_external","OwnerOfInput1"],"type":17}}],"default":false,"docs":[],"label":"PSP34::owner_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":23},"selector":"0x1168624d"},{"args":[],"default":false,"docs":[],"label":"Ownable::owner","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":23},"selector":"0x4fa43c8c"},{"args":[],"default":false,"docs":[],"label":"Ownable::renounce_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0x5e228753"},{"args":[{"label":"new_owner","type":{"displayName":["ownable_external","TransferOwnershipInput1"],"type":0}}],"default":false,"docs":[],"label":"Ownable::transfer_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0x11f43efd"},{"args":[{"label":"owner","type":{"displayName":["psp34enumerable_external","OwnersTokenByIndexInput1"],"type":0}},{"label":"index","type":{"displayName":["psp34enumerable_external","OwnersTokenByIndexInput2"],"type":5}}],"default":false,"docs":[],"label":"PSP34Enumerable::owners_token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":28},"selector":"0x3bcfb511"},{"args":[{"label":"index","type":{"displayName":["psp34enumerable_external","TokenByIndexInput1"],"type":5}}],"default":false,"docs":[],"label":"PSP34Enumerable::token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":28},"selector":"0xcd0340d0"},{"args":[{"label":"id","type":{"displayName":["psp34metadata_external","GetAttributeInput1"],"type":17}},{"label":"key","type":{"displayName":["psp34metadata_external","GetAttributeInput2"],"type":6}}],"default":false,"docs":[],"label":"PSP34Metadata::get_attribute","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0xf19d48d1"},{"args":[{"label":"account","type":{"displayName":["psp34mintable_external","MintInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34mintable_external","MintInput2"],"type":17}}],"default":false,"docs":[],"label":"PSP34Mintable::mint","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":12},"selector":"0x6c41f2ec"}]},"storage":{"root":{"layout":{"struct":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"leaf":{"key":"0x252d8eda","ty":0}},"root_key":"0x252d8eda"}},"name":"token_owner"},{"layout":{"root":{"layout":{"leaf":{"key":"0xcb1393da","ty":3}},"root_key":"0xcb1393da"}},"name":"operator_approvals"},{"layout":{"root":{"layout":{"leaf":{"key":"0xf957bbd8","ty":4}},"root_key":"0xf957bbd8"}},"name":"owned_tokens_count"},{"layout":{"root":{"layout":{"leaf":{"key":"0xe3d7d04e","ty":5}},"root_key":"0xe3d7d04e"}},"name":"total_supply"}],"name":"Data"}},"name":"psp34"},{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"enum":{"dispatchKey":"0x6f713913","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x6f713913","ty":0}},"name":"0"}],"name":"Some"}}}},"root_key":"0x6f713913"}},"name":"owner"}],"name":"Data"}},"name":"ownable"},{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"leaf":{"key":"0xdc803caf","ty":6}},"root_key":"0xdc803caf"}},"name":"attributes"}],"name":"Data"}},"name":"metadata"},{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"leaf":{"key":"0x2d2b79f3","ty":0}},"root_key":"0x2d2b79f3"}},"name":"token_owner"},{"layout":{"root":{"layout":{"leaf":{"key":"0x5b0030d8","ty":3}},"root_key":"0x5b0030d8"}},"name":"operator_approvals"},{"layout":{"root":{"layout":{"enum":{"dispatchKey":"0x1bd7db1e","name":"Id","variants":{"0":{"fields":[{"layout":{"leaf":{"key":"0x1bd7db1e","ty":2}},"name":"0"}],"name":"U8"},"1":{"fields":[{"layout":{"leaf":{"key":"0x1bd7db1e","ty":7}},"name":"0"}],"name":"U16"},"2":{"fields":[{"layout":{"leaf":{"key":"0x1bd7db1e","ty":4}},"name":"0"}],"name":"U32"},"3":{"fields":[{"layout":{"leaf":{"key":"0x1bd7db1e","ty":8}},"name":"0"}],"name":"U64"},"4":{"fields":[{"layout":{"leaf":{"key":"0x1bd7db1e","ty":5}},"name":"0"}],"name":"U128"},"5":{"fields":[{"layout":{"leaf":{"key":"0x1bd7db1e","ty":9}},"name":"0"}],"name":"Bytes"}}}},"root_key":"0x1bd7db1e"}},"name":"balances"}],"name":"Data"}},"name":"enumerable"}],"name":"NeuroGuns"}},"root_key":"0x00000000"}},"types":[{"id":0,"type":{"def":{"composite":{"fields":[{"type":1,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","AccountId"]}},{"id":1,"type":{"def":{"array":{"len":32,"type":2}}}},{"id":2,"type":{"def":{"primitive":"u8"}}},{"id":3,"type":{"def":{"tuple":[]}}},{"id":4,"type":{"def":{"primitive":"u32"}}},{"id":5,"type":{"def":{"primitive":"u128"}}},{"id":6,"type":{"def":{"primitive":"str"}}},{"id":7,"type":{"def":{"primitive":"u16"}}},{"id":8,"type":{"def":{"primitive":"u64"}}},{"id":9,"type":{"def":{"sequence":{"type":2}}}},{"id":10,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":11}],"path":["Result"]}},{"id":11,"type":{"def":{"variant":{"variants":[{"index":1,"name":"CouldNotReadInput"}]}},"path":["ink_primitives","LangError"]}},{"id":12,"type":{"def":{"variant":{"variants":[{"fields":[{"type":13}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":13},{"name":"E","type":11}],"path":["Result"]}},{"id":13,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":14}],"path":["Result"]}},{"id":14,"type":{"def":{"variant":{"variants":[{"fields":[{"type":6,"typeName":"String"}],"index":0,"name":"Custom"},{"index":1,"name":"SelfApprove"},{"index":2,"name":"NotApproved"},{"index":3,"name":"TokenExists"},{"index":4,"name":"TokenNotExists"},{"fields":[{"type":6,"typeName":"String"}],"index":5,"name":"SafeTransferCheckFailed"}]}},"path":["openbrush_contracts","traits","errors","psp34","PSP34Error"]}},{"id":15,"type":{"def":{"variant":{"variants":[{"fields":[{"type":6}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":6},{"name":"E","type":11}],"path":["Result"]}},{"id":16,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":17}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":17}],"path":["Option"]}},{"id":17,"type":{"def":{"variant":{"variants":[{"fields":[{"type":2,"typeName":"u8"}],"index":0,"name":"U8"},{"fields":[{"type":7,"typeName":"u16"}],"index":1,"name":"U16"},{"fields":[{"type":4,"typeName":"u32"}],"index":2,"name":"U32"},{"fields":[{"type":8,"typeName":"u64"}],"index":3,"name":"U64"},{"fields":[{"type":5,"typeName":"u128"}],"index":4,"name":"U128"},{"fields":[{"type":9,"typeName":"Vec<u8>"}],"index":5,"name":"Bytes"}]}},"path":["openbrush_contracts","traits","types","Id"]}},{"id":18,"type":{"def":{"primitive":"bool"}}},{"id":19,"type":{"def":{"variant":{"variants":[{"fields":[{"type":18}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":18},{"name":"E","type":11}],"path":["Result"]}},{"id":20,"type":{"def":{"variant":{"variants":[{"fields":[{"type":17}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":17},{"name":"E","type":11}],"path":["Result"]}},{"id":21,"type":{"def":{"variant":{"variants":[{"fields":[{"type":5}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":5},{"name":"E","type":11}],"path":["Result"]}},{"id":22,"type":{"def":{"variant":{"variants":[{"fields":[{"type":4}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":4},{"name":"E","type":11}],"path":["Result"]}},{"id":23,"type":{"def":{"variant":{"variants":[{"fields":[{"type":24}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":24},{"name":"E","type":11}],"path":["Result"]}},{"id":24,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":0}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":0}],"path":["Option"]}},{"id":25,"type":{"def":{"variant":{"variants":[{"fields":[{"type":26}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":26},{"name":"E","type":11}],"path":["Result"]}},{"id":26,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":27}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":27}],"path":["Result"]}},{"id":27,"type":{"def":{"variant":{"variants":[{"index":0,"name":"CallerIsNotOwner"},{"index":1,"name":"NewOwnerIsZero"}]}},"path":["openbrush_contracts","traits","errors","ownable","OwnableError"]}},{"id":28,"type":{"def":{"variant":{"variants":[{"fields":[{"type":29}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":29},{"name":"E","type":11}],"path":["Result"]}},{"id":29,"type":{"def":{"variant":{"variants":[{"fields":[{"type":17}],"index":0,"name":"Ok"},{"fields":[{"type":14}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":17},{"name":"E","type":14}],"path":["Result"]}},{"id":30,"type":{"def":{"variant":{"variants":[{"fields":[{"type":31}],"index":0,"name":"Ok"},{"fields":[{"type":11}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":31},{"name":"E","type":11}],"path":["Result"]}},{"id":31,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":6}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":6}],"path":["Option"]}},{"id":32,"type":{"def":{"composite":{"fields":[{"type":1,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","Hash"]}},{"id":33,"type":{"def":{"variant":{}},"path":["ink_env","types","NoChainExtension"]}}],"version":"4"}');

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/pink_psp34_abi.json":
/*!*******************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/pink_psp34_abi.json ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"source":{"hash":"0xd9678c9068ae65df331f084be77e9efd059493e99a26e0ce28d81cf5c5edf9db","language":"ink! 4.2.0","compiler":"rustc 1.68.0-nightly","build_info":{"build_mode":"Release","cargo_contract_version":"2.2.1","rust_toolchain":"nightly-aarch64-apple-darwin","wasm_opt_settings":{"keep_debug_symbols":false,"optimization_passes":"Z"}}},"contract":{"name":"pinkpsp34","version":"0.1.0","authors":["[Mario] <[mario@arrakis.com]>"]},"spec":{"constructors":[{"args":[{"label":"name","type":{"displayName":["String"],"type":8}},{"label":"symbol","type":{"displayName":["String"],"type":8}},{"label":"max_supply","type":{"displayName":["u64"],"type":6}},{"label":"owner","type":{"displayName":["Option"],"type":11}}],"default":false,"docs":[],"label":"new","payable":false,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":12},"selector":"0x9bae9d5e"}],"docs":[],"environment":{"accountId":{"displayName":["AccountId"],"type":0},"balance":{"displayName":["Balance"],"type":7},"blockNumber":{"displayName":["BlockNumber"],"type":5},"chainExtension":{"displayName":["ChainExtension"],"type":45},"hash":{"displayName":["Hash"],"type":44},"maxEventTopics":4,"timestamp":{"displayName":["Timestamp"],"type":6}},"events":[{"args":[{"docs":[],"indexed":true,"label":"from","type":{"displayName":["Option"],"type":11}},{"docs":[],"indexed":true,"label":"to","type":{"displayName":["Option"],"type":11}},{"docs":[],"indexed":true,"label":"id","type":{"displayName":["Id"],"type":10}}],"docs":["Event emitted when a token transfer occurs."],"label":"Transfer"},{"args":[{"docs":[],"indexed":true,"label":"from","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"to","type":{"displayName":["AccountId"],"type":0}},{"docs":[],"indexed":true,"label":"id","type":{"displayName":["Option"],"type":18}},{"docs":[],"indexed":false,"label":"approved","type":{"displayName":["bool"],"type":20}}],"docs":["Event emitted when a token approve occurs."],"label":"Approval"}],"lang_error":{"displayName":["ink","LangError"],"type":13},"messages":[{"args":[{"label":"holder","type":{"displayName":["AccountId"],"type":0}}],"default":false,"docs":[],"label":"total_balance","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":14},"selector":"0xf3361760"},{"args":[{"label":"code_hash","type":{"displayName":[],"type":1}}],"default":false,"docs":[" Modifies the code which is used to execute calls to this contract address (`AccountId`).",""," We use this to upgrade the contract logic. We don\'t do any authorization here, any caller"," can execute this method. In a production contract you would do some authorization here."],"label":"set_code","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":12},"selector":"0x694fb50f"},{"args":[],"default":false,"docs":[" Returns the collection `Id` of the NFT token.",""," This can represents the relationship between tokens/contracts/pallets."],"label":"PSP34::collection_id","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":15},"selector":"0xffa27a5f"},{"args":[],"default":false,"docs":[" Returns current NFT total supply."],"label":"PSP34::total_supply","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":16},"selector":"0x628413fe"},{"args":[{"label":"id","type":{"displayName":["psp34_external","OwnerOfInput1"],"type":10}}],"default":false,"docs":[" Returns the owner of the token if any."],"label":"PSP34::owner_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":17},"selector":"0x1168624d"},{"args":[{"label":"owner","type":{"displayName":["psp34_external","AllowanceInput1"],"type":0}},{"label":"operator","type":{"displayName":["psp34_external","AllowanceInput2"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","AllowanceInput3"],"type":18}}],"default":false,"docs":[" Returns `true` if the operator is approved by the owner to withdraw `id` token."," If `id` is `None`, returns `true` if the operator is approved to withdraw all owner\'s tokens."],"label":"PSP34::allowance","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":19},"selector":"0x4790f55a"},{"args":[{"label":"operator","type":{"displayName":["psp34_external","ApproveInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","ApproveInput2"],"type":18}},{"label":"approved","type":{"displayName":["psp34_external","ApproveInput3"],"type":20}}],"default":false,"docs":[" Approves `operator` to withdraw the `id` token from the caller\'s account."," If `id` is `None` approves or disapproves the operator for all tokens of the caller.",""," On success a `Approval` event is emitted.",""," # Errors",""," Returns `SelfApprove` error if it is self approve.",""," Returns `NotApproved` error if caller is not owner of `id`."],"label":"PSP34::approve","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":21},"selector":"0x1932a8b0"},{"args":[{"label":"owner","type":{"displayName":["psp34_external","BalanceOfInput1"],"type":0}}],"default":false,"docs":[" Returns the balance of the owner.",""," This represents the amount of unique tokens the owner has."],"label":"PSP34::balance_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":24},"selector":"0xcde7e55f"},{"args":[{"label":"to","type":{"displayName":["psp34_external","TransferInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","TransferInput2"],"type":10}},{"label":"data","type":{"displayName":["psp34_external","TransferInput3"],"type":8}}],"default":false,"docs":[" Transfer approved or owned token from caller.",""," On success a `Transfer` event is emitted.",""," # Errors",""," Returns `TokenNotExists` error if `id` does not exist.",""," Returns `NotApproved` error if `from` doesn\'t have allowance for transferring.",""," Returns `SafeTransferCheckFailed` error if `to` doesn\'t accept transfer."],"label":"PSP34::transfer","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":21},"selector":"0x3128d61b"},{"args":[{"label":"account","type":{"displayName":["psp34burnable_external","BurnInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34burnable_external","BurnInput2"],"type":10}}],"default":false,"docs":[" Destroys token with id equal to `id` from `account`",""," Caller must be approved to transfer tokens from `account`"," or to transfer token with `id`"],"label":"PSP34Burnable::burn","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":21},"selector":"0x63c9877a"},{"args":[{"label":"index","type":{"displayName":["psp34enumerable_external","TokenByIndexInput1"],"type":7}}],"default":false,"docs":[" Returns a token `Id` at a given `index` of all the tokens stored by the contract."," Use along with `total_supply` to enumerate all tokens.",""," The start index is zero."],"label":"PSP34Enumerable::token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0xcd0340d0"},{"args":[{"label":"owner","type":{"displayName":["psp34enumerable_external","OwnersTokenByIndexInput1"],"type":0}},{"label":"index","type":{"displayName":["psp34enumerable_external","OwnersTokenByIndexInput2"],"type":7}}],"default":false,"docs":[" Returns a token `Id` owned by `owner` at a given `index` of its token list."," Use along with `balance_of` to enumerate all of ``owner``\'s tokens.",""," The start index is zero."],"label":"PSP34Enumerable::owners_token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0x3bcfb511"},{"args":[{"label":"new_owner","type":{"displayName":["ownable_external","TransferOwnershipInput1"],"type":0}}],"default":false,"docs":[" Transfers ownership of the contract to a `new_owner`."," Can only be called by the current owner.",""," On success a `OwnershipTransferred` event is emitted.",""," # Errors",""," Panics with `CallerIsNotOwner` error if caller is not owner.",""," Panics with `NewOwnerIsZero` error if new owner\'s address is zero."],"label":"Ownable::transfer_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x11f43efd"},{"args":[],"default":false,"docs":[" Returns the address of the current owner."],"label":"Ownable::owner","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0x4fa43c8c"},{"args":[],"default":false,"docs":[" Leaves the contract without owner. It will not be possible to call"," owner\'s functions anymore. Can only be called by the current owner.",""," NOTE: Renouncing ownership will leave the contract without an owner,"," thereby removing any functionality that is only available to the owner.",""," On success a `OwnershipTransferred` event is emitted.",""," # Errors",""," Panics with `CallerIsNotOwner` error if caller is not owner"],"label":"Ownable::renounce_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x5e228753"},{"args":[{"label":"id","type":{"displayName":["psp34metadata_external","GetAttributeInput1"],"type":10}},{"label":"key","type":{"displayName":["psp34metadata_external","GetAttributeInput2"],"type":8}}],"default":false,"docs":[" Returns the attribute of `id` for the given `key`.",""," If `id` is a collection id of the token, it returns attributes for collection."],"label":"PSP34Metadata::get_attribute","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":31},"selector":"0xf19d48d1"},{"args":[{"label":"token_id","type":{"displayName":["pinkmint_external","TokenUriInput1"],"type":6}}],"default":false,"docs":[" Get URI for the token Id."],"label":"PinkMint::token_uri","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":33},"selector":"0x5b903a36"},{"args":[{"label":"to","type":{"displayName":["pinkmint_external","MintInput1"],"type":0}},{"label":"metadata","type":{"displayName":["pinkmint_external","MintInput2"],"type":8}}],"default":false,"docs":[" Mint one or more tokens."],"label":"PinkMint::mint","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":38},"selector":"0x5efd98d7"},{"args":[{"label":"max_supply","type":{"displayName":["pinkmint_external","SetMaxSupplyInput1"],"type":40}}],"default":false,"docs":[" Set max supply of tokens."],"label":"PinkMint::set_max_supply","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":41},"selector":"0x4f50f3ce"},{"args":[],"default":false,"docs":[" Get max supply of tokens."],"label":"PinkMint::max_supply","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":43},"selector":"0x667a6c97"}]},"storage":{"root":{"layout":{"struct":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"leaf":{"key":"0x1cc80634","ty":0}},"root_key":"0x1cc80634"}},"name":"token_owner"},{"layout":{"root":{"layout":{"leaf":{"key":"0x7e3fae6b","ty":3}},"root_key":"0x7e3fae6b"}},"name":"operator_approvals"},{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"enum":{"dispatchKey":"0xca32a240","name":"Id","variants":{"0":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":2}},"name":"0"}],"name":"U8"},"1":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":4}},"name":"0"}],"name":"U16"},"2":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":5}},"name":"0"}],"name":"U32"},"3":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":6}},"name":"0"}],"name":"U64"},"4":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":7}},"name":"0"}],"name":"U128"},"5":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":8}},"name":"0"}],"name":"Bytes"}}}},"root_key":"0xca32a240"}},"name":"enumerable"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Balances"}},"name":"balances"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"psp34"},{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":0}},"name":"owner"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"ownable"},{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"leaf":{"key":"0x9b2d2382","ty":8}},"root_key":"0x9b2d2382"}},"name":"attributes"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"metadata"},{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":6}},"name":"last_token_id"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":6}},"name":"0"}],"name":"Some"}}}},"name":"max_supply"},{"layout":{"leaf":{"key":"0x00000000","ty":7}},"name":"price_per_mint"},{"layout":{"root":{"layout":{"leaf":{"key":"0x63eb77ea","ty":8}},"root_key":"0x63eb77ea"}},"name":"nft_metadata"}],"name":"MintingData"}},"name":"pinkmint"},{"layout":{"root":{"layout":{"leaf":{"key":"0x5ce6c6c4","ty":9}},"root_key":"0x5ce6c6c4"}},"name":"holders"}],"name":"PinkPsp34"}},"root_key":"0x00000000"}},"types":[{"id":0,"type":{"def":{"composite":{"fields":[{"type":1,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","AccountId"]}},{"id":1,"type":{"def":{"array":{"len":32,"type":2}}}},{"id":2,"type":{"def":{"primitive":"u8"}}},{"id":3,"type":{"def":{"tuple":[]}}},{"id":4,"type":{"def":{"primitive":"u16"}}},{"id":5,"type":{"def":{"primitive":"u32"}}},{"id":6,"type":{"def":{"primitive":"u64"}}},{"id":7,"type":{"def":{"primitive":"u128"}}},{"id":8,"type":{"def":{"sequence":{"type":2}}}},{"id":9,"type":{"def":{"sequence":{"type":10}}}},{"id":10,"type":{"def":{"variant":{"variants":[{"fields":[{"type":2,"typeName":"u8"}],"index":0,"name":"U8"},{"fields":[{"type":4,"typeName":"u16"}],"index":1,"name":"U16"},{"fields":[{"type":5,"typeName":"u32"}],"index":2,"name":"U32"},{"fields":[{"type":6,"typeName":"u64"}],"index":3,"name":"U64"},{"fields":[{"type":7,"typeName":"u128"}],"index":4,"name":"U128"},{"fields":[{"type":8,"typeName":"Vec<u8>"}],"index":5,"name":"Bytes"}]}},"path":["openbrush_contracts","traits","types","Id"]}},{"id":11,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":0}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":0}],"path":["Option"]}},{"id":12,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":13}],"path":["Result"]}},{"id":13,"type":{"def":{"variant":{"variants":[{"index":1,"name":"CouldNotReadInput"}]}},"path":["ink_primitives","LangError"]}},{"id":14,"type":{"def":{"variant":{"variants":[{"fields":[{"type":9}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":9},{"name":"E","type":13}],"path":["Result"]}},{"id":15,"type":{"def":{"variant":{"variants":[{"fields":[{"type":10}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":10},{"name":"E","type":13}],"path":["Result"]}},{"id":16,"type":{"def":{"variant":{"variants":[{"fields":[{"type":7}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":7},{"name":"E","type":13}],"path":["Result"]}},{"id":17,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":13}],"path":["Result"]}},{"id":18,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":10}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":10}],"path":["Option"]}},{"id":19,"type":{"def":{"variant":{"variants":[{"fields":[{"type":20}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":20},{"name":"E","type":13}],"path":["Result"]}},{"id":20,"type":{"def":{"primitive":"bool"}}},{"id":21,"type":{"def":{"variant":{"variants":[{"fields":[{"type":22}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":22},{"name":"E","type":13}],"path":["Result"]}},{"id":22,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":23}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":23}],"path":["Result"]}},{"id":23,"type":{"def":{"variant":{"variants":[{"fields":[{"type":8,"typeName":"String"}],"index":0,"name":"Custom"},{"index":1,"name":"SelfApprove"},{"index":2,"name":"NotApproved"},{"index":3,"name":"TokenExists"},{"index":4,"name":"TokenNotExists"},{"fields":[{"type":8,"typeName":"String"}],"index":5,"name":"SafeTransferCheckFailed"}]}},"path":["openbrush_contracts","traits","errors","psp34","PSP34Error"]}},{"id":24,"type":{"def":{"variant":{"variants":[{"fields":[{"type":5}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":5},{"name":"E","type":13}],"path":["Result"]}},{"id":25,"type":{"def":{"variant":{"variants":[{"fields":[{"type":26}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":26},{"name":"E","type":13}],"path":["Result"]}},{"id":26,"type":{"def":{"variant":{"variants":[{"fields":[{"type":10}],"index":0,"name":"Ok"},{"fields":[{"type":23}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":10},{"name":"E","type":23}],"path":["Result"]}},{"id":27,"type":{"def":{"variant":{"variants":[{"fields":[{"type":28}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":28},{"name":"E","type":13}],"path":["Result"]}},{"id":28,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":29}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":29}],"path":["Result"]}},{"id":29,"type":{"def":{"variant":{"variants":[{"index":0,"name":"CallerIsNotOwner"},{"index":1,"name":"NewOwnerIsZero"}]}},"path":["openbrush_contracts","traits","errors","ownable","OwnableError"]}},{"id":30,"type":{"def":{"variant":{"variants":[{"fields":[{"type":0}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":0},{"name":"E","type":13}],"path":["Result"]}},{"id":31,"type":{"def":{"variant":{"variants":[{"fields":[{"type":32}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":32},{"name":"E","type":13}],"path":["Result"]}},{"id":32,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":8}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":8}],"path":["Option"]}},{"id":33,"type":{"def":{"variant":{"variants":[{"fields":[{"type":34}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":34},{"name":"E","type":13}],"path":["Result"]}},{"id":34,"type":{"def":{"variant":{"variants":[{"fields":[{"type":35}],"index":0,"name":"Ok"},{"fields":[{"type":36}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":35},{"name":"E","type":36}],"path":["Result"]}},{"id":35,"type":{"def":{"primitive":"str"}}},{"id":36,"type":{"def":{"variant":{"variants":[{"fields":[{"type":37,"typeName":"PinkError"}],"index":0,"name":"Pink"},{"fields":[{"type":29,"typeName":"OwnableError"}],"index":1,"name":"Ownable"}]}},"path":["psp34_minting","internal","Error"]}},{"id":37,"type":{"def":{"variant":{"variants":[{"index":0,"name":"CannotMintZeroTokens"},{"index":1,"name":"CollectionIsFull"},{"index":2,"name":"UriNotFound"},{"index":3,"name":"TokenExists"},{"index":4,"name":"TokenNotFound"}]}},"path":["psp34_minting","internal","PinkError"]}},{"id":38,"type":{"def":{"variant":{"variants":[{"fields":[{"type":39}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":39},{"name":"E","type":13}],"path":["Result"]}},{"id":39,"type":{"def":{"variant":{"variants":[{"fields":[{"type":10}],"index":0,"name":"Ok"},{"fields":[{"type":36}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":10},{"name":"E","type":36}],"path":["Result"]}},{"id":40,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":6}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":6}],"path":["Option"]}},{"id":41,"type":{"def":{"variant":{"variants":[{"fields":[{"type":42}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":42},{"name":"E","type":13}],"path":["Result"]}},{"id":42,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":36}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":36}],"path":["Result"]}},{"id":43,"type":{"def":{"variant":{"variants":[{"fields":[{"type":40}],"index":0,"name":"Ok"},{"fields":[{"type":13}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":40},{"name":"E","type":13}],"path":["Result"]}},{"id":44,"type":{"def":{"composite":{"fields":[{"type":1,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","Hash"]}},{"id":45,"type":{"def":{"variant":{}},"path":["ink_env","types","NoChainExtension"]}}],"version":"4"}');

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/psp22_abi.json":
/*!**************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/psp22_abi.json ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"source":{"hash":"0xdb433067f226daf1542d03cfb9fb40560381fee51ac41a1fe2344cef297f18e9","language":"ink! 4.0.0","compiler":"rustc 1.65.0","build_info":{"build_mode":"Debug","cargo_contract_version":"2.0.0-beta","rust_toolchain":"stable-aarch64-apple-darwin","wasm_opt_settings":{"keep_debug_symbols":false,"optimization_passes":"Z"}}},"contract":{"name":"psp22","version":"0.9.6","authors":["Yonatan Hornstein <yonatan@panoramaswap.com>"]},"spec":{"constructors":[{"args":[{"label":"total_supply","type":{"displayName":["Balance"],"type":0}},{"label":"name","type":{"displayName":["Option"],"type":4}},{"label":"symbol","type":{"displayName":["Option"],"type":4}},{"label":"decimal","type":{"displayName":["u8"],"type":3}}],"docs":[],"label":"new","payable":false,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":5},"selector":"0x9bae9d5e"}],"docs":[],"events":[],"lang_error":{"displayName":["ink","LangError"],"type":6},"messages":[{"args":[{"label":"owner","type":{"displayName":["psp22_external","BalanceOfInput1"],"type":7}}],"docs":[" Returns the account Balance for the specified `owner`.",""," Returns `0` if the account is non-existent."],"label":"PSP22::balance_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":9},"selector":"0x6568382f"},{"args":[{"label":"from","type":{"displayName":["psp22_external","TransferFromInput1"],"type":7}},{"label":"to","type":{"displayName":["psp22_external","TransferFromInput2"],"type":7}},{"label":"value","type":{"displayName":["psp22_external","TransferFromInput3"],"type":0}},{"label":"data","type":{"displayName":["psp22_external","TransferFromInput4"],"type":2}}],"docs":[" Transfers `value` tokens on the behalf of `from` to the account `to`"," with additional `data` in unspecified format.",""," This can be used to allow a contract to transfer tokens on ones behalf and/or"," to charge fees in sub-currencies, for example.",""," On success a `Transfer` and `Approval` events are emitted.",""," # Errors",""," Returns `InsufficientAllowance` error if there are not enough tokens allowed"," for the caller to withdraw from `from`.",""," Returns `InsufficientBalance` error if there are not enough tokens on"," the the account Balance of `from`.",""," Returns `ZeroSenderAddress` error if sender\'s address is zero.",""," Returns `ZeroRecipientAddress` error if recipient\'s address is zero."],"label":"PSP22::transfer_from","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x54b3c76e"},{"args":[{"label":"to","type":{"displayName":["psp22_external","TransferInput1"],"type":7}},{"label":"value","type":{"displayName":["psp22_external","TransferInput2"],"type":0}},{"label":"data","type":{"displayName":["psp22_external","TransferInput3"],"type":2}}],"docs":[" Transfers `value` amount of tokens from the caller\'s account to account `to`"," with additional `data` in unspecified format.",""," On success a `Transfer` event is emitted.",""," # Errors",""," Returns `InsufficientBalance` error if there are not enough tokens on"," the caller\'s account Balance.",""," Returns `ZeroSenderAddress` error if sender\'s address is zero.",""," Returns `ZeroRecipientAddress` error if recipient\'s address is zero."],"label":"PSP22::transfer","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xdb20f9f5"},{"args":[{"label":"spender","type":{"displayName":["psp22_external","ApproveInput1"],"type":7}},{"label":"value","type":{"displayName":["psp22_external","ApproveInput2"],"type":0}}],"docs":[" Allows `spender` to withdraw from the caller\'s account multiple times, up to"," the `value` amount.",""," If this function is called again it overwrites the current allowance with `value`.",""," An `Approval` event is emitted.",""," # Errors",""," Returns `ZeroSenderAddress` error if sender\'s address is zero.",""," Returns `ZeroRecipientAddress` error if recipient\'s address is zero."],"label":"PSP22::approve","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xb20f1bbd"},{"args":[],"docs":[" Returns the total token supply."],"label":"PSP22::total_supply","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":9},"selector":"0x162df8c2"},{"args":[{"label":"spender","type":{"displayName":["psp22_external","IncreaseAllowanceInput1"],"type":7}},{"label":"delta_value","type":{"displayName":["psp22_external","IncreaseAllowanceInput2"],"type":0}}],"docs":[" Atomically increases the allowance granted to `spender` by the caller.",""," An `Approval` event is emitted.",""," # Errors",""," Returns `ZeroSenderAddress` error if sender\'s address is zero.",""," Returns `ZeroRecipientAddress` error if recipient\'s address is zero."],"label":"PSP22::increase_allowance","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0x96d6b57a"},{"args":[{"label":"spender","type":{"displayName":["psp22_external","DecreaseAllowanceInput1"],"type":7}},{"label":"delta_value","type":{"displayName":["psp22_external","DecreaseAllowanceInput2"],"type":0}}],"docs":[" Atomically decreases the allowance granted to `spender` by the caller.",""," An `Approval` event is emitted.",""," # Errors",""," Returns `InsufficientAllowance` error if there are not enough tokens allowed"," by owner for `spender`.",""," Returns `ZeroSenderAddress` error if sender\'s address is zero.",""," Returns `ZeroRecipientAddress` error if recipient\'s address is zero."],"label":"PSP22::decrease_allowance","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":10},"selector":"0xfecb57d5"},{"args":[{"label":"owner","type":{"displayName":["psp22_external","AllowanceInput1"],"type":7}},{"label":"spender","type":{"displayName":["psp22_external","AllowanceInput2"],"type":7}}],"docs":[" Returns the amount which `spender` is still allowed to withdraw from `owner`.",""," Returns `0` if no allowance has been set `0`."],"label":"PSP22::allowance","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":9},"selector":"0x4d47d921"},{"args":[],"docs":[" Returns the token decimals."],"label":"PSP22Metadata::token_decimals","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0x7271b782"},{"args":[],"docs":[" Returns the token name."],"label":"PSP22Metadata::token_name","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":14},"selector":"0x3d261bd4"},{"args":[],"docs":[" Returns the token symbol."],"label":"PSP22Metadata::token_symbol","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":14},"selector":"0x34205be5"}]},"storage":{"root":{"layout":{"struct":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":0}},"name":"supply"},{"layout":{"root":{"layout":{"leaf":{"key":"0x1d458d3b","ty":0}},"root_key":"0x1d458d3b"}},"name":"balances"},{"layout":{"root":{"layout":{"leaf":{"key":"0x0abd72fb","ty":0}},"root_key":"0x0abd72fb"}},"name":"allowances"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":1}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"psp22"},{"layout":{"struct":{"fields":[{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":2}},"name":"0"}],"name":"Some"}}}},"name":"name"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":2}},"name":"0"}],"name":"Some"}}}},"name":"symbol"},{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"decimals"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":1}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"metadata"}],"name":"Contract"}},"root_key":"0x00000000"}},"types":[{"id":0,"type":{"def":{"primitive":"u128"}}},{"id":1,"type":{"def":{"tuple":[]}}},{"id":2,"type":{"def":{"sequence":{"type":3}}}},{"id":3,"type":{"def":{"primitive":"u8"}}},{"id":4,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":2}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":2}],"path":["Option"]}},{"id":5,"type":{"def":{"variant":{"variants":[{"fields":[{"type":1}],"index":0,"name":"Ok"},{"fields":[{"type":6}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":1},{"name":"E","type":6}],"path":["Result"]}},{"id":6,"type":{"def":{"variant":{"variants":[{"index":1,"name":"CouldNotReadInput"}]}},"path":["ink_primitives","LangError"]}},{"id":7,"type":{"def":{"composite":{"fields":[{"type":8,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","AccountId"]}},{"id":8,"type":{"def":{"array":{"len":32,"type":3}}}},{"id":9,"type":{"def":{"variant":{"variants":[{"fields":[{"type":0}],"index":0,"name":"Ok"},{"fields":[{"type":6}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":0},{"name":"E","type":6}],"path":["Result"]}},{"id":10,"type":{"def":{"variant":{"variants":[{"fields":[{"type":11}],"index":0,"name":"Ok"},{"fields":[{"type":6}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":11},{"name":"E","type":6}],"path":["Result"]}},{"id":11,"type":{"def":{"variant":{"variants":[{"fields":[{"type":1}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":1},{"name":"E","type":12}],"path":["Result"]}},{"id":12,"type":{"def":{"variant":{"variants":[{"fields":[{"type":2,"typeName":"String"}],"index":0,"name":"Custom"},{"index":1,"name":"InsufficientBalance"},{"index":2,"name":"InsufficientAllowance"},{"index":3,"name":"ZeroRecipientAddress"},{"index":4,"name":"ZeroSenderAddress"},{"fields":[{"type":2,"typeName":"String"}],"index":5,"name":"SafeTransferCheckFailed"}]}},"path":["openbrush_contracts","traits","errors","psp22","PSP22Error"]}},{"id":13,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":6}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":6}],"path":["Result"]}},{"id":14,"type":{"def":{"variant":{"variants":[{"fields":[{"type":4}],"index":0,"name":"Ok"},{"fields":[{"type":6}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":4},{"name":"E","type":6}],"path":["Result"]}}],"version":"4"}');

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/psp34_abi.json":
/*!**************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/psp34_abi.json ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"source":{"hash":"0x7b5a055c557dbac5743e7c70a6cda0db33c9e92fd566d47fce63cad5244363d8","language":"ink! 4.0.1","compiler":"rustc 1.70.0-nightly","build_info":{"build_mode":"Debug","cargo_contract_version":"2.0.0-rc","rust_toolchain":"nightly-x86_64-unknown-linux-gnu","wasm_opt_settings":{"keep_debug_symbols":false,"optimization_passes":"Z"}}},"contract":{"name":"psp34_nft","version":"1.0.0","authors":["ArtZero <admin@artzero.io>"]},"spec":{"constructors":[{"args":[{"label":"contract_owner","type":{"displayName":["AccountId"],"type":0}},{"label":"name","type":{"displayName":["String"],"type":10}},{"label":"symbol","type":{"displayName":["String"],"type":10}}],"docs":[],"label":"new","payable":false,"returnType":{"displayName":["ink_primitives","ConstructorResult"],"type":11},"selector":"0x9bae9d5e"}],"docs":[],"events":[{"args":[{"docs":[],"indexed":true,"label":"from","type":{"displayName":["Option"],"type":31}},{"docs":[],"indexed":true,"label":"to","type":{"displayName":["Option"],"type":31}},{"docs":[],"indexed":false,"label":"id","type":{"displayName":["Id"],"type":26}}],"docs":[" - Specify transfer event."],"label":"Transfer"},{"args":[{"docs":[],"indexed":true,"label":"from","type":{"displayName":["Option"],"type":31}},{"docs":[],"indexed":true,"label":"to","type":{"displayName":["Option"],"type":31}},{"docs":[],"indexed":false,"label":"id","type":{"displayName":["Id"],"type":26}},{"docs":[],"indexed":false,"label":"approved","type":{"displayName":["bool"],"type":9}}],"docs":[" - Specify approval event."],"label":"Approval"}],"lang_error":{"displayName":["ink","LangError"],"type":12},"messages":[{"args":[],"docs":[" This function let NFT Contract Owner to mint a new NFT without providing NFT Traits/Attributes"],"label":"mint","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0xcfdd9aa2"},{"args":[{"label":"metadata","type":{"displayName":["Vec"],"type":20}}],"docs":[" This function let NFT Contract Owner to mint a new NFT with NFT Traits/Attributes"],"label":"mint_with_attributes","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0xf90b8f61"},{"args":[{"label":"new_owner","type":{"displayName":["ownable_external","TransferOwnershipInput1"],"type":0}}],"docs":[" Transfers ownership of the contract to a `new_owner`."," Can only be called by the current owner.",""," On success a `OwnershipTransferred` event is emitted.",""," # Errors",""," Panics with `CallerIsNotOwner` error if caller is not owner.",""," Panics with `NewOwnerIsZero` error if new owner\'s address is zero."],"label":"Ownable::transfer_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":22},"selector":"0x11f43efd"},{"args":[],"docs":[" Leaves the contract without owner. It will not be possible to call"," owner\'s functions anymore. Can only be called by the current owner.",""," NOTE: Renouncing ownership will leave the contract without an owner,"," thereby removing any functionality that is only available to the owner.",""," On success a `OwnershipTransferred` event is emitted.",""," # Errors",""," Panics with `CallerIsNotOwner` error if caller is not owner"],"label":"Ownable::renounce_ownership","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":22},"selector":"0x5e228753"},{"args":[],"docs":[" Returns the address of the current owner."],"label":"Ownable::owner","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":24},"selector":"0x4fa43c8c"},{"args":[],"docs":[" Returns the collection `Id` of the NFT token.",""," This can represents the relationship between tokens/contracts/pallets."],"label":"PSP34::collection_id","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":25},"selector":"0xffa27a5f"},{"args":[{"label":"to","type":{"displayName":["psp34_external","TransferInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","TransferInput2"],"type":26}},{"label":"data","type":{"displayName":["psp34_external","TransferInput3"],"type":8}}],"docs":[" Transfer approved or owned token from caller.",""," On success a `Transfer` event is emitted.",""," # Errors",""," Returns `TokenNotExists` error if `id` does not exist.",""," Returns `NotApproved` error if `from` doesn\'t have allowance for transferring.",""," Returns `SafeTransferCheckFailed` error if `to` doesn\'t accept transfer."],"label":"PSP34::transfer","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x3128d61b"},{"args":[{"label":"operator","type":{"displayName":["psp34_external","ApproveInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","ApproveInput2"],"type":29}},{"label":"approved","type":{"displayName":["psp34_external","ApproveInput3"],"type":9}}],"docs":[" Approves `operator` to withdraw the `id` token from the caller\'s account."," If `id` is `None` approves or disapproves the operator for all tokens of the caller.",""," On success a `Approval` event is emitted.",""," # Errors",""," Returns `SelfApprove` error if it is self approve.",""," Returns `NotApproved` error if caller is not owner of `id`."],"label":"PSP34::approve","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x1932a8b0"},{"args":[{"label":"id","type":{"displayName":["psp34_external","OwnerOfInput1"],"type":26}}],"docs":[" Returns the owner of the token if any."],"label":"PSP34::owner_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":30},"selector":"0x1168624d"},{"args":[{"label":"owner","type":{"displayName":["psp34_external","AllowanceInput1"],"type":0}},{"label":"operator","type":{"displayName":["psp34_external","AllowanceInput2"],"type":0}},{"label":"id","type":{"displayName":["psp34_external","AllowanceInput3"],"type":29}}],"docs":[" Returns `true` if the operator is approved by the owner to withdraw `id` token."," If `id` is `None`, returns `true` if the operator is approved to withdraw all owner\'s tokens."],"label":"PSP34::allowance","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":32},"selector":"0x4790f55a"},{"args":[],"docs":[" Returns current NFT total supply."],"label":"PSP34::total_supply","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":33},"selector":"0x628413fe"},{"args":[{"label":"owner","type":{"displayName":["psp34_external","BalanceOfInput1"],"type":0}}],"docs":[" Returns the balance of the owner.",""," This represents the amount of unique tokens the owner has."],"label":"PSP34::balance_of","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":34},"selector":"0xcde7e55f"},{"args":[{"label":"id","type":{"displayName":["psp34metadata_external","GetAttributeInput1"],"type":26}},{"label":"key","type":{"displayName":["psp34metadata_external","GetAttributeInput2"],"type":8}}],"docs":[" Returns the attribute of `id` for the given `key`.",""," If `id` is a collection id of the token, it returns attributes for collection."],"label":"PSP34Metadata::get_attribute","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":35},"selector":"0xf19d48d1"},{"args":[{"label":"owner","type":{"displayName":["psp34enumerable_external","OwnersTokenByIndexInput1"],"type":0}},{"label":"index","type":{"displayName":["psp34enumerable_external","OwnersTokenByIndexInput2"],"type":7}}],"docs":[" Returns a token `Id` owned by `owner` at a given `index` of its token list."," Use along with `balance_of` to enumerate all of ``owner``\'s tokens.",""," The start index is zero."],"label":"PSP34Enumerable::owners_token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":37},"selector":"0x3bcfb511"},{"args":[{"label":"index","type":{"displayName":["psp34enumerable_external","TokenByIndexInput1"],"type":7}}],"docs":[" Returns a token `Id` at a given `index` of all the tokens stored by the contract."," Use along with `total_supply` to enumerate all tokens.",""," The start index is zero."],"label":"PSP34Enumerable::token_by_index","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":37},"selector":"0xcd0340d0"},{"args":[{"label":"token_id","type":{"displayName":["psp34traits_external","LockInput1"],"type":26}}],"docs":[" This function lets NFT owner to lock their NFT. Once locked, the NFT traits (attributes) can not be changed"],"label":"Psp34Traits::lock","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0xa7245b9b"},{"args":[{"label":"uri","type":{"displayName":["psp34traits_external","SetBaseUriInput1"],"type":10}}],"docs":[" This function sets the baseURI for the NFT contract. Only Contract Owner can perform this function. baseURI is the location of the metadata files if the NFT collection use external source to keep their NFT artwork. ArtZero uses IPFS by default, the baseURI can have format like this: ipfs://<hash_ID>/"],"label":"Psp34Traits::set_base_uri","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0x4de6850b"},{"args":[],"docs":[" This function returns how many NFTs have been locked by its owners"],"label":"Psp34Traits::get_locked_token_count","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":39},"selector":"0x8fe2ce73"},{"args":[{"label":"token_id","type":{"displayName":["psp34traits_external","TokenUriInput1"],"type":6}}],"docs":[" This function return the metadata location of an NFT. The format is baseURI/<token_id>.json"],"label":"Psp34Traits::token_uri","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":40},"selector":"0x249dfd4f"},{"args":[{"label":"token_id","type":{"displayName":["psp34traits_external","SetMultipleAttributesInput1"],"type":26}},{"label":"metadata","type":{"displayName":["psp34traits_external","SetMultipleAttributesInput2"],"type":20}}],"docs":[" This function set the attributes to each NFT. Only Contract Owner can perform this function. The metadata input is an array of [(attribute, value)]. The attributes in ArtZero platform are the NFT traits."],"label":"Psp34Traits::set_multiple_attributes","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0x5bf8416b"},{"args":[{"label":"index","type":{"displayName":["psp34traits_external","GetAttributeNameInput1"],"type":5}}],"docs":[" This function return the attribute name using attribute index. Beacause attributes of an NFT can be set to anything by Contract Owner, AztZero uses this function to get all attributes of an NFT"],"label":"Psp34Traits::get_attribute_name","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":40},"selector":"0xfcfe34de"},{"args":[],"docs":[" This function return the owner of the NFT Contract"],"label":"Psp34Traits::get_owner","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":24},"selector":"0x8e1d8d71"},{"args":[{"label":"token_id","type":{"displayName":["psp34traits_external","GetAttributesInput1"],"type":26}},{"label":"attributes","type":{"displayName":["psp34traits_external","GetAttributesInput2"],"type":41}}],"docs":[" This function returns all available attributes of each NFT"],"label":"Psp34Traits::get_attributes","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":42},"selector":"0x18209102"},{"args":[{"label":"token_id","type":{"displayName":["psp34traits_external","IsLockedNftInput1"],"type":26}}],"docs":[" This function check if an NFT is locked or not"],"label":"Psp34Traits::is_locked_nft","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":32},"selector":"0x59271420"},{"args":[],"docs":[" This function return how many unique attributes in the contract"],"label":"Psp34Traits::get_attribute_count","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":34},"selector":"0x61c50d69"},{"args":[],"docs":[" This function return the latest token ID, everytime new NFT is mint, last_token_id is increased by 1 in mint function. Note: This is not the same as the total supply return by the psp34 function as NFT can be burnt."],"label":"Psp34Traits::get_last_token_id","mutates":false,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":39},"selector":"0x6f315836"},{"args":[{"label":"nft_contract_address","type":{"displayName":["admintrait_external","TranferNftInput1"],"type":0}},{"label":"token_id","type":{"displayName":["admintrait_external","TranferNftInput2"],"type":26}},{"label":"receiver","type":{"displayName":["admintrait_external","TranferNftInput3"],"type":0}}],"docs":[" This function allow contract owner withdraw NFT to an account in case there is any NFT sent to contract by mistake"],"label":"AdminTrait::tranfer_nft","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0xed1e1dfa"},{"args":[{"label":"value","type":{"displayName":["admintrait_external","WithdrawFeeInput1"],"type":7}},{"label":"receiver","type":{"displayName":["admintrait_external","WithdrawFeeInput2"],"type":0}}],"docs":[" This function allows contract owner to withdraw contract balance to his account."],"label":"AdminTrait::withdraw_fee","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0x07573e99"},{"args":[{"label":"psp22_contract_address","type":{"displayName":["admintrait_external","TranferPsp22Input1"],"type":0}},{"label":"amount","type":{"displayName":["admintrait_external","TranferPsp22Input2"],"type":7}},{"label":"receiver","type":{"displayName":["admintrait_external","TranferPsp22Input3"],"type":0}}],"docs":[" This function allow contract owner withdraw PSP22 to an account in case there is any token sent to contract by mistake"],"label":"AdminTrait::tranfer_psp22","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":13},"selector":"0xd9aad284"},{"args":[{"label":"account","type":{"displayName":["psp34burnable_external","BurnInput1"],"type":0}},{"label":"id","type":{"displayName":["psp34burnable_external","BurnInput2"],"type":26}}],"docs":[],"label":"PSP34Burnable::burn","mutates":true,"payable":false,"returnType":{"displayName":["ink","MessageResult"],"type":27},"selector":"0x63c9877a"}]},"storage":{"root":{"layout":{"struct":{"fields":[{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"leaf":{"key":"0x1cc80634","ty":0}},"root_key":"0x1cc80634"}},"name":"token_owner"},{"layout":{"root":{"layout":{"leaf":{"key":"0x7e3fae6b","ty":3}},"root_key":"0x7e3fae6b"}},"name":"operator_approvals"},{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"enum":{"dispatchKey":"0xca32a240","name":"Id","variants":{"0":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":2}},"name":"0"}],"name":"U8"},"1":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":4}},"name":"0"}],"name":"U16"},"2":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":5}},"name":"0"}],"name":"U32"},"3":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":6}},"name":"0"}],"name":"U64"},"4":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":7}},"name":"0"}],"name":"U128"},"5":{"fields":[{"layout":{"leaf":{"key":"0xca32a240","ty":8}},"name":"0"}],"name":"Bytes"}}}},"root_key":"0xca32a240"}},"name":"enumerable"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Balances"}},"name":"balances"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"psp34"},{"layout":{"struct":{"fields":[{"layout":{"root":{"layout":{"leaf":{"key":"0x9b2d2382","ty":8}},"root_key":"0x9b2d2382"}},"name":"attributes"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"metadata"},{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":0}},"name":"owner"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"ownable"},{"layout":{"struct":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":6}},"name":"last_token_id"},{"layout":{"leaf":{"key":"0x00000000","ty":5}},"name":"attribute_count"},{"layout":{"root":{"layout":{"leaf":{"key":"0x90fe8c00","ty":8}},"root_key":"0x90fe8c00"}},"name":"attribute_names"},{"layout":{"root":{"layout":{"leaf":{"key":"0x385e99c1","ty":9}},"root_key":"0x385e99c1"}},"name":"is_attribute"},{"layout":{"root":{"layout":{"leaf":{"key":"0x89dbb226","ty":9}},"root_key":"0x89dbb226"}},"name":"locked_tokens"},{"layout":{"leaf":{"key":"0x00000000","ty":6}},"name":"locked_token_count"},{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Manager"}},"name":"manager"},{"layout":{"struct":{"fields":[{"layout":{"enum":{"dispatchKey":"0x00000000","name":"Option","variants":{"0":{"fields":[],"name":"None"},"1":{"fields":[{"layout":{"leaf":{"key":"0x00000000","ty":3}},"name":"0"}],"name":"Some"}}}},"name":"_reserved"}],"name":"Data"}},"name":"admin_data"}],"name":"Psp34Nft"}},"root_key":"0x00000000"}},"types":[{"id":0,"type":{"def":{"composite":{"fields":[{"type":1,"typeName":"[u8; 32]"}]}},"path":["ink_primitives","types","AccountId"]}},{"id":1,"type":{"def":{"array":{"len":32,"type":2}}}},{"id":2,"type":{"def":{"primitive":"u8"}}},{"id":3,"type":{"def":{"tuple":[]}}},{"id":4,"type":{"def":{"primitive":"u16"}}},{"id":5,"type":{"def":{"primitive":"u32"}}},{"id":6,"type":{"def":{"primitive":"u64"}}},{"id":7,"type":{"def":{"primitive":"u128"}}},{"id":8,"type":{"def":{"sequence":{"type":2}}}},{"id":9,"type":{"def":{"primitive":"bool"}}},{"id":10,"type":{"def":{"primitive":"str"}}},{"id":11,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":12}],"path":["Result"]}},{"id":12,"type":{"def":{"variant":{"variants":[{"index":1,"name":"CouldNotReadInput"}]}},"path":["ink_primitives","LangError"]}},{"id":13,"type":{"def":{"variant":{"variants":[{"fields":[{"type":14}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":14},{"name":"E","type":12}],"path":["Result"]}},{"id":14,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":15}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":15}],"path":["Result"]}},{"id":15,"type":{"def":{"variant":{"variants":[{"fields":[{"type":10,"typeName":"String"}],"index":0,"name":"Custom"},{"index":1,"name":"OnlyOwner"},{"index":2,"name":"OnlyAdmin"},{"index":3,"name":"InvalidCaller"},{"index":4,"name":"InvalidFee"},{"index":5,"name":"TokenOwnerNotMatch"},{"index":6,"name":"NotApproved"},{"index":7,"name":"CannotTransfer"},{"index":8,"name":"CannotMint"},{"index":9,"name":"NotPublicMint"},{"index":10,"name":"NotEnoughBalance"},{"index":11,"name":"MaxSupply"},{"index":12,"name":"AlreadyInit"},{"index":13,"name":"NotOwner"},{"index":14,"name":"NotTokenOwner"},{"index":15,"name":"ProjectNotExist"},{"index":16,"name":"ProjectOwnerAndAdmin"},{"index":17,"name":"InvalidStartTimeAndEndTime"},{"index":18,"name":"InvalidPhaseCount"},{"index":19,"name":"CollectionOwnerAndAdmin"},{"index":20,"name":"CollectionNotActive"},{"index":21,"name":"CollectionNotExist"},{"index":22,"name":"InvalidInput"},{"index":23,"name":"InvalidType"},{"index":24,"name":"ClaimedAll"},{"index":25,"name":"TokenLimitReached"},{"index":26,"name":"UpdatePhase"},{"index":27,"name":"PhaseNotExist"},{"index":28,"name":"PhaseExpired"},{"index":29,"name":"PhaseDeactivate"},{"index":30,"name":"WhitelistNotExist"},{"index":31,"name":"WithdrawFeeError"},{"index":32,"name":"WithdrawNFTError"},{"index":33,"name":"WithdrawPSP22Error"},{"index":34,"name":"NotListed"},{"index":35,"name":"BidAlreadyExist"},{"index":36,"name":"BidNotExist"},{"index":37,"name":"NotInMarket"},{"index":38,"name":"NotForSale"},{"index":39,"name":"NotInSaleList"},{"index":40,"name":"InvalidBidLength"},{"index":41,"name":"InvalidCollectionOwner"},{"index":42,"name":"InvalidTime"},{"index":43,"name":"RewardStarted"},{"index":44,"name":"RewardNotStarted"},{"index":45,"name":"RewardNotAdded"},{"index":46,"name":"ClaimMustBeFalse"},{"index":47,"name":"HoldAmountBidderNotExist"},{"fields":[{"type":16,"typeName":"OwnableError"}],"index":48,"name":"OwnableError"},{"fields":[{"type":17,"typeName":"AccessControlError"}],"index":49,"name":"AccessControlError"},{"fields":[{"type":18,"typeName":"PSP22Error"}],"index":50,"name":"PSP22Error"},{"fields":[{"type":19,"typeName":"PSP34Error"}],"index":51,"name":"PSP34Error"},{"index":52,"name":"CheckedOperations"}]}},"path":["artzero_project","traits","error","Error"]}},{"id":16,"type":{"def":{"variant":{"variants":[{"index":0,"name":"CallerIsNotOwner"},{"index":1,"name":"NewOwnerIsZero"}]}},"path":["openbrush_contracts","traits","errors","ownable","OwnableError"]}},{"id":17,"type":{"def":{"variant":{"variants":[{"index":0,"name":"InvalidCaller"},{"index":1,"name":"MissingRole"},{"index":2,"name":"RoleRedundant"}]}},"path":["openbrush_contracts","traits","errors","access_control","AccessControlError"]}},{"id":18,"type":{"def":{"variant":{"variants":[{"fields":[{"type":8,"typeName":"String"}],"index":0,"name":"Custom"},{"index":1,"name":"InsufficientBalance"},{"index":2,"name":"InsufficientAllowance"},{"index":3,"name":"ZeroRecipientAddress"},{"index":4,"name":"ZeroSenderAddress"},{"fields":[{"type":8,"typeName":"String"}],"index":5,"name":"SafeTransferCheckFailed"}]}},"path":["openbrush_contracts","traits","errors","psp22","PSP22Error"]}},{"id":19,"type":{"def":{"variant":{"variants":[{"fields":[{"type":8,"typeName":"String"}],"index":0,"name":"Custom"},{"index":1,"name":"SelfApprove"},{"index":2,"name":"NotApproved"},{"index":3,"name":"TokenExists"},{"index":4,"name":"TokenNotExists"},{"fields":[{"type":8,"typeName":"String"}],"index":5,"name":"SafeTransferCheckFailed"}]}},"path":["openbrush_contracts","traits","errors","psp34","PSP34Error"]}},{"id":20,"type":{"def":{"sequence":{"type":21}}}},{"id":21,"type":{"def":{"tuple":[10,10]}}},{"id":22,"type":{"def":{"variant":{"variants":[{"fields":[{"type":23}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":23},{"name":"E","type":12}],"path":["Result"]}},{"id":23,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":16}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":16}],"path":["Result"]}},{"id":24,"type":{"def":{"variant":{"variants":[{"fields":[{"type":0}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":0},{"name":"E","type":12}],"path":["Result"]}},{"id":25,"type":{"def":{"variant":{"variants":[{"fields":[{"type":26}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":26},{"name":"E","type":12}],"path":["Result"]}},{"id":26,"type":{"def":{"variant":{"variants":[{"fields":[{"type":2,"typeName":"u8"}],"index":0,"name":"U8"},{"fields":[{"type":4,"typeName":"u16"}],"index":1,"name":"U16"},{"fields":[{"type":5,"typeName":"u32"}],"index":2,"name":"U32"},{"fields":[{"type":6,"typeName":"u64"}],"index":3,"name":"U64"},{"fields":[{"type":7,"typeName":"u128"}],"index":4,"name":"U128"},{"fields":[{"type":8,"typeName":"Vec<u8>"}],"index":5,"name":"Bytes"}]}},"path":["openbrush_contracts","traits","types","Id"]}},{"id":27,"type":{"def":{"variant":{"variants":[{"fields":[{"type":28}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":28},{"name":"E","type":12}],"path":["Result"]}},{"id":28,"type":{"def":{"variant":{"variants":[{"fields":[{"type":3}],"index":0,"name":"Ok"},{"fields":[{"type":19}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":3},{"name":"E","type":19}],"path":["Result"]}},{"id":29,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":26}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":26}],"path":["Option"]}},{"id":30,"type":{"def":{"variant":{"variants":[{"fields":[{"type":31}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":31},{"name":"E","type":12}],"path":["Result"]}},{"id":31,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":0}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":0}],"path":["Option"]}},{"id":32,"type":{"def":{"variant":{"variants":[{"fields":[{"type":9}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":9},{"name":"E","type":12}],"path":["Result"]}},{"id":33,"type":{"def":{"variant":{"variants":[{"fields":[{"type":7}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":7},{"name":"E","type":12}],"path":["Result"]}},{"id":34,"type":{"def":{"variant":{"variants":[{"fields":[{"type":5}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":5},{"name":"E","type":12}],"path":["Result"]}},{"id":35,"type":{"def":{"variant":{"variants":[{"fields":[{"type":36}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":36},{"name":"E","type":12}],"path":["Result"]}},{"id":36,"type":{"def":{"variant":{"variants":[{"index":0,"name":"None"},{"fields":[{"type":8}],"index":1,"name":"Some"}]}},"params":[{"name":"T","type":8}],"path":["Option"]}},{"id":37,"type":{"def":{"variant":{"variants":[{"fields":[{"type":38}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":38},{"name":"E","type":12}],"path":["Result"]}},{"id":38,"type":{"def":{"variant":{"variants":[{"fields":[{"type":26}],"index":0,"name":"Ok"},{"fields":[{"type":19}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":26},{"name":"E","type":19}],"path":["Result"]}},{"id":39,"type":{"def":{"variant":{"variants":[{"fields":[{"type":6}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":6},{"name":"E","type":12}],"path":["Result"]}},{"id":40,"type":{"def":{"variant":{"variants":[{"fields":[{"type":10}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":10},{"name":"E","type":12}],"path":["Result"]}},{"id":41,"type":{"def":{"sequence":{"type":10}}}},{"id":42,"type":{"def":{"variant":{"variants":[{"fields":[{"type":41}],"index":0,"name":"Ok"},{"fields":[{"type":12}],"index":1,"name":"Err"}]}},"params":[{"name":"T","type":41},{"name":"E","type":12}],"path":["Result"]}}],"version":"4"}');

/***/ }),

/***/ "../extension-base/src/services/chain-service/helper/test_erc721_abi.json":
/*!********************************************************************************!*\
  !*** ../extension-base/src/services/chain-service/helper/test_erc721_abi.json ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_owner","type":"address"},{"indexed":true,"internalType":"address","name":"_operator","type":"address"},{"indexed":false,"internalType":"bool","name":"_approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"_from","type":"address"},{"indexed":true,"internalType":"address","name":"_to","type":"address"},{"indexed":true,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"_approved","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"address","name":"_operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"_name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_operator","type":"address"},{"internalType":"bool","name":"_approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_owner","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"tokenOfOwnerByIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_from","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}]');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/async module */
/******/ 	(() => {
/******/ 		var webpackQueues = typeof Symbol === "function" ? Symbol("webpack queues") : "__webpack_queues__";
/******/ 		var webpackExports = typeof Symbol === "function" ? Symbol("webpack exports") : "__webpack_exports__";
/******/ 		var webpackError = typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
/******/ 		var resolveQueue = (queue) => {
/******/ 			if(queue && !queue.d) {
/******/ 				queue.d = 1;
/******/ 				queue.forEach((fn) => (fn.r--));
/******/ 				queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
/******/ 			}
/******/ 		}
/******/ 		var wrapDeps = (deps) => (deps.map((dep) => {
/******/ 			if(dep !== null && typeof dep === "object") {
/******/ 				if(dep[webpackQueues]) return dep;
/******/ 				if(dep.then) {
/******/ 					var queue = [];
/******/ 					queue.d = 0;
/******/ 					dep.then((r) => {
/******/ 						obj[webpackExports] = r;
/******/ 						resolveQueue(queue);
/******/ 					}, (e) => {
/******/ 						obj[webpackError] = e;
/******/ 						resolveQueue(queue);
/******/ 					});
/******/ 					var obj = {};
/******/ 					obj[webpackQueues] = (fn) => (fn(queue));
/******/ 					return obj;
/******/ 				}
/******/ 			}
/******/ 			var ret = {};
/******/ 			ret[webpackQueues] = x => {};
/******/ 			ret[webpackExports] = dep;
/******/ 			return ret;
/******/ 		}));
/******/ 		__webpack_require__.a = (module, body, hasAwait) => {
/******/ 			var queue;
/******/ 			hasAwait && ((queue = []).d = 1);
/******/ 			var depQueues = new Set();
/******/ 			var exports = module.exports;
/******/ 			var currentDeps;
/******/ 			var outerResolve;
/******/ 			var reject;
/******/ 			var promise = new Promise((resolve, rej) => {
/******/ 				reject = rej;
/******/ 				outerResolve = resolve;
/******/ 			});
/******/ 			promise[webpackExports] = exports;
/******/ 			promise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise["catch"](x => {}));
/******/ 			module.exports = promise;
/******/ 			body((deps) => {
/******/ 				currentDeps = wrapDeps(deps);
/******/ 				var fn;
/******/ 				var getResult = () => (currentDeps.map((d) => {
/******/ 					if(d[webpackError]) throw d[webpackError];
/******/ 					return d[webpackExports];
/******/ 				}))
/******/ 				var promise = new Promise((resolve) => {
/******/ 					fn = () => (resolve(getResult));
/******/ 					fn.r = 0;
/******/ 					var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
/******/ 					currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
/******/ 				});
/******/ 				return fn.r ? promise : getResult();
/******/ 			}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
/******/ 			queue && (queue.d = 0);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/wasm loading */
/******/ 	(() => {
/******/ 		__webpack_require__.v = (exports, wasmModuleId, wasmModuleHash, importsObj) => {
/******/ 			var req = fetch(__webpack_require__.p + "" + wasmModuleHash + ".module.wasm");
/******/ 			if (typeof WebAssembly.instantiateStreaming === 'function') {
/******/ 				return WebAssembly.instantiateStreaming(req, importsObj)
/******/ 					.then((res) => (Object.assign(exports, res.instance.exports)));
/******/ 			}
/******/ 			return req
/******/ 				.then((x) => (x.arrayBuffer()))
/******/ 				.then((bytes) => (WebAssembly.instantiate(bytes, importsObj)))
/******/ 				.then((res) => (Object.assign(exports, res.instance.exports)));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"background": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = (typeof self !== 'undefined' ? self : this)["webpackChunk_subwallet_extension_koni"] = (typeof self !== 'undefined' ? self : this)["webpackChunk_subwallet_extension_koni"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["vendors-node_modules_base64-js_index_js-node_modules_azns_resolver-core_dist_index_js-node_mo-96d1be","vendors-node_modules_bn_js_lib_bn_js-node_modules_buffer_index_js-node_modules_cross-fetch_di-144390","vendors-node_modules_ieee754_index_js-node_modules_js-sha3_src_sha3_js-node_modules_i18next_d-05ffb7","vendors-node_modules_lodash_isequal_index_js-node_modules_loglevel_lib_loglevel_js-node_modul-320412","vendors-node_modules_rxjs_dist_esm5_internal_BehaviorSubject_js-node_modules_rxjs_dist_esm5_i-aed42a","vendors-node_modules_walletconnect_utils_dist_index_es_js-node_modules_split-on-first_index_j-cebd78","vendors-node_modules_acala-network_api_index_js-node_modules_asn1_js_lib_asn1_js-node_modules-6f2e08","vendors-node_modules_crc-32_crc32_js-node_modules_create-ecdh_browser_js-node_modules_create--5f5b34","vendors-node_modules_crypto-browserify_index_js-node_modules_define-properties_index_js-node_-66cdbd","vendors-node_modules_diffie-hellman_browser_js-node_modules_elliptic_lib_elliptic_js","vendors-node_modules_ethereumjs_common_dist_browser_index_js-node_modules_es6-object-assign_i-a299a8","vendors-node_modules_evp_bytestokey_index_js-node_modules_for-each_index_js-node_modules_even-a24417","vendors-node_modules_gopd_index_js","vendors-node_modules_interlay_interbtc-types_build_index_js-node_modules_json-rpc-tools_utils-80db67","vendors-node_modules_keccak_js_js-node_modules_lodash_merge_index_js","vendors-node_modules_oak-foundation_types_index_js-node_modules_open-web3_orml-api-derive_ind-1a0e73","vendors-node_modules_protobufjs_index_js-node_modules_public-encrypt_browser_js-node_modules_-af6330","vendors-node_modules_polkadot_apps-config_api_typesBundle_js","vendors-node_modules_smoldot_dist_mjs_base64_js-node_modules_smoldot_dist_mjs_client_js","vendors-node_modules_smoldot_dist_mjs_index-browser_js","vendors-node_modules_smoldot_dist_mjs_instance_autogen_wasm0_js","vendors-node_modules_smoldot_dist_mjs_instance_autogen_wasm_js","vendors-node_modules_smoldot_dist_mjs_instance_bindings-smoldot-light_js-node_modules_smoldot-c899be","vendors-node_modules_smoldot_dist_mjs_instance_instance_js","vendors-node_modules_stablelib_ed25519_lib_ed25519_js-node_modules_stream-browserify_index_js-316b51","vendors-node_modules_tweetnacl-util_nacl-util_js-node_modules_utf8_utf8_js-node_modules_subst-84f193","vendors-node_modules_walletconnect_sign-client_dist_index_es_js-node_modules_wry_context_lib_-d74596","default-extension-base_src_koni_api_dotsama_domain_ts-extension-base_src_koni_api_staking_bon-7a7103"], () => (__webpack_require__("./src/installation.ts")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_base64-js_index_js-node_modules_azns_resolver-core_dist_index_js-node_mo-96d1be","vendors-node_modules_bn_js_lib_bn_js-node_modules_buffer_index_js-node_modules_cross-fetch_di-144390","vendors-node_modules_ieee754_index_js-node_modules_js-sha3_src_sha3_js-node_modules_i18next_d-05ffb7","vendors-node_modules_lodash_isequal_index_js-node_modules_loglevel_lib_loglevel_js-node_modul-320412","vendors-node_modules_rxjs_dist_esm5_internal_BehaviorSubject_js-node_modules_rxjs_dist_esm5_i-aed42a","vendors-node_modules_walletconnect_utils_dist_index_es_js-node_modules_split-on-first_index_j-cebd78","vendors-node_modules_acala-network_api_index_js-node_modules_asn1_js_lib_asn1_js-node_modules-6f2e08","vendors-node_modules_crc-32_crc32_js-node_modules_create-ecdh_browser_js-node_modules_create--5f5b34","vendors-node_modules_crypto-browserify_index_js-node_modules_define-properties_index_js-node_-66cdbd","vendors-node_modules_diffie-hellman_browser_js-node_modules_elliptic_lib_elliptic_js","vendors-node_modules_ethereumjs_common_dist_browser_index_js-node_modules_es6-object-assign_i-a299a8","vendors-node_modules_evp_bytestokey_index_js-node_modules_for-each_index_js-node_modules_even-a24417","vendors-node_modules_gopd_index_js","vendors-node_modules_interlay_interbtc-types_build_index_js-node_modules_json-rpc-tools_utils-80db67","vendors-node_modules_keccak_js_js-node_modules_lodash_merge_index_js","vendors-node_modules_oak-foundation_types_index_js-node_modules_open-web3_orml-api-derive_ind-1a0e73","vendors-node_modules_protobufjs_index_js-node_modules_public-encrypt_browser_js-node_modules_-af6330","vendors-node_modules_polkadot_apps-config_api_typesBundle_js","vendors-node_modules_smoldot_dist_mjs_base64_js-node_modules_smoldot_dist_mjs_client_js","vendors-node_modules_smoldot_dist_mjs_index-browser_js","vendors-node_modules_smoldot_dist_mjs_instance_autogen_wasm0_js","vendors-node_modules_smoldot_dist_mjs_instance_autogen_wasm_js","vendors-node_modules_smoldot_dist_mjs_instance_bindings-smoldot-light_js-node_modules_smoldot-c899be","vendors-node_modules_smoldot_dist_mjs_instance_instance_js","vendors-node_modules_stablelib_ed25519_lib_ed25519_js-node_modules_stream-browserify_index_js-316b51","vendors-node_modules_tweetnacl-util_nacl-util_js-node_modules_utf8_utf8_js-node_modules_subst-84f193","vendors-node_modules_walletconnect_sign-client_dist_index_es_js-node_modules_wry_context_lib_-d74596","default-extension-base_src_koni_api_dotsama_domain_ts-extension-base_src_koni_api_staking_bon-7a7103"], () => (__webpack_require__("./src/background.ts")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,