"use strict";
((typeof self !== 'undefined' ? self : this)["webpackChunk_subwallet_extension_koni"] = (typeof self !== 'undefined' ? self : this)["webpackChunk_subwallet_extension_koni"] || []).push([["vendors-node_modules_split-on-first_index_js-node_modules_smoldot_dist_mjs_instance_instance_js"],{

/***/ "../../node_modules/split-on-first/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/split-on-first/index.js ***!
  \**************************************************/
/***/ ((module) => {



module.exports = (string, separator) => {
	if (!(typeof string === 'string' && typeof separator === 'string')) {
		throw new TypeError('Expected the arguments to be of type `string`');
	}

	if (separator === '') {
		return [string];
	}

	const separatorIndex = string.indexOf(separator);

	if (separatorIndex === -1) {
		return [string];
	}

	return [
		string.slice(0, separatorIndex),
		string.slice(separatorIndex + separator.length)
	];
};


/***/ }),

/***/ "../../node_modules/smoldot/dist/mjs/instance/buffer.js":
/*!**************************************************************!*\
  !*** ../../node_modules/smoldot/dist/mjs/instance/buffer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "readUInt32LE": () => (/* binding */ readUInt32LE),
/* harmony export */   "utf8BytesToString": () => (/* binding */ utf8BytesToString),
/* harmony export */   "writeUInt32LE": () => (/* binding */ writeUInt32LE),
/* harmony export */   "writeUInt64LE": () => (/* binding */ writeUInt64LE),
/* harmony export */   "writeUInt8": () => (/* binding */ writeUInt8)
/* harmony export */ });
// Smoldot
// Copyright (C) 2019-2022  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
function utf8BytesToString(buffer, offset, length) {
    checkRange(buffer, offset, length);
    // The `TextDecoder` API is supported by all major browsers and by NodeJS.
    // <https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder>
    return new TextDecoder().decode(buffer.slice(offset, offset + length));
}
function readUInt32LE(buffer, offset) {
    checkRange(buffer, offset, 4);
    return (buffer[offset] | (buffer[offset + 1] << 8) | (buffer[offset + 2] << 16)) + (buffer[offset + 3] * 0x1000000);
}
/**
 * Sets the value of a given byte in the buffer.
 *
 * This function is equivalent to `buffer[offset] = value`, except that an exception is thrown
 * if `offset` is out of range.
 */
function writeUInt8(buffer, offset, value) {
    checkRange(buffer, offset, 1);
    buffer[offset] = value & 0xff;
}
function writeUInt32LE(buffer, offset, value) {
    checkRange(buffer, offset, 4);
    buffer[offset + 3] = (value >>> 24) & 0xff;
    buffer[offset + 2] = (value >>> 16) & 0xff;
    buffer[offset + 1] = (value >>> 8) & 0xff;
    buffer[offset] = value & 0xff;
}
function writeUInt64LE(buffer, offset, value) {
    checkRange(buffer, offset, 8);
    buffer[offset + 7] = Number((value >> BigInt(56)) & BigInt(0xff));
    buffer[offset + 6] = Number((value >> BigInt(48)) & BigInt(0xff));
    buffer[offset + 5] = Number((value >> BigInt(40)) & BigInt(0xff));
    buffer[offset + 4] = Number((value >> BigInt(32)) & BigInt(0xff));
    buffer[offset + 3] = Number((value >> BigInt(24)) & BigInt(0xff));
    buffer[offset + 2] = Number((value >> BigInt(16)) & BigInt(0xff));
    buffer[offset + 1] = Number((value >> BigInt(8)) & BigInt(0xff));
    buffer[offset] = Number(value & BigInt(0xff));
}
function checkRange(buffer, offset, length) {
    if (!Number.isInteger(offset) || offset < 0)
        throw new RangeError();
    if (offset + length > buffer.length)
        throw new RangeError();
}


/***/ }),

/***/ "../../node_modules/smoldot/dist/mjs/instance/instance.js":
/*!****************************************************************!*\
  !*** ../../node_modules/smoldot/dist/mjs/instance/instance.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionError": () => (/* reexport safe */ _raw_instance_js__WEBPACK_IMPORTED_MODULE_1__.ConnectionError),
/* harmony export */   "CrashError": () => (/* binding */ CrashError),
/* harmony export */   "MalformedJsonRpcError": () => (/* binding */ MalformedJsonRpcError),
/* harmony export */   "QueueFullError": () => (/* binding */ QueueFullError),
/* harmony export */   "start": () => (/* binding */ start)
/* harmony export */ });
/* harmony import */ var _buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer.js */ "../../node_modules/smoldot/dist/mjs/instance/buffer.js");
/* harmony import */ var _raw_instance_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./raw-instance.js */ "../../node_modules/smoldot/dist/mjs/instance/raw-instance.js");
/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../client.js */ "../../node_modules/smoldot/dist/mjs/client.js");
// Smoldot
// Copyright (C) 2019-2022  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.




/**
 * Thrown in case the underlying client encounters an unexpected crash.
 *
 * This is always an internal bug in smoldot and is never supposed to happen.
 */
class CrashError extends Error {
    constructor(message) {
        super(message);
    }
}
/**
 * Thrown in case a malformed JSON-RPC request is sent.
 */
class MalformedJsonRpcError extends Error {
    constructor() {
        super("JSON-RPC request is malformed");
    }
}
/**
 * Thrown in case the buffer of JSON-RPC requests is full and cannot accept any more request.
 */
class QueueFullError extends Error {
    constructor() {
        super("JSON-RPC requests queue is full");
    }
}
function start(configMessage, platformBindings) {
    // This variable represents the state of the instance, and serves two different purposes:
    //
    // - At initialization, it is a Promise containing the Wasm VM is still initializing.
    // - After the Wasm VM has finished initialization, contains the `WebAssembly.Instance` object.
    //
    let state;
    const crashError = {};
    const currentTask = { name: null };
    const printError = { printError: true };
    // Contains the information of each chain that is currently alive.
    let chains = new Map();
    const initPromise = (() => __awaiter(this, void 0, void 0, function* () {
        const module = yield configMessage.wasmModule;
        // Start initialization of the Wasm VM.
        const config = {
            onWasmPanic: (message) => {
                // TODO: consider obtaining a backtrace here
                crashError.error = new CrashError(message);
                if (!printError.printError)
                    return;
                console.error("Smoldot has panicked" +
                    (currentTask.name ? (" while executing task `" + currentTask.name + "`") : "") +
                    ". This is a bug in smoldot. Please open an issue at " +
                    "https://github.com/smol-dot/smoldot/issues with the following message:\n" +
                    message);
                for (const chain of Array.from(chains.values())) {
                    for (const promise of chain.jsonRpcResponsesPromises) {
                        promise.reject(crashError.error);
                    }
                    chain.jsonRpcResponsesPromises = [];
                }
            },
            logCallback: (level, target, message) => {
                configMessage.logCallback(level, target, message);
            },
            wasmModule: module,
            jsonRpcResponsesNonEmptyCallback: (chainId) => {
                // Notify every single promise found in `jsonRpcResponsesPromises`.
                const promises = chains.get(chainId).jsonRpcResponsesPromises;
                while (promises.length !== 0) {
                    promises.shift().resolve();
                }
            },
            currentTaskCallback: (taskName) => {
                currentTask.name = taskName;
            },
            cpuRateLimit: configMessage.cpuRateLimit,
            maxLogLevel: configMessage.maxLogLevel,
        };
        return yield _raw_instance_js__WEBPACK_IMPORTED_MODULE_1__.startInstance(config, platformBindings);
    }))();
    state = {
        initialized: false, promise: initPromise.then(([instance, bufferIndices]) => {
            state = { initialized: true, instance, bufferIndices };
            return [instance, bufferIndices];
        })
    };
    function queueOperation(operation) {
        return __awaiter(this, void 0, void 0, function* () {
            // What to do depends on the type of `state`.
            // See the documentation of the `state` variable for information.
            if (!state.initialized) {
                // A message has been received while the Wasm VM is still initializing. Queue it for when
                // initialization is over.
                return state.promise.then(([instance, bufferIndices]) => operation(instance, bufferIndices));
            }
            else {
                // Everything is already initialized. Process the message synchronously.
                return operation(state.instance, state.bufferIndices);
            }
        });
    }
    return {
        request: (request, chainId) => {
            // Because `request` is passed as parameter an identifier returned by `addChain`, it is
            // always the case that the Wasm instance is already initialized. The only possibility for
            // it to not be the case is if the user completely invented the `chainId`.
            if (!state.initialized)
                throw new Error("Internal error");
            if (crashError.error)
                throw crashError.error;
            let retVal;
            try {
                state.bufferIndices[0] = new TextEncoder().encode(request);
                retVal = state.instance.exports.json_rpc_send(0, chainId) >>> 0;
            }
            catch (_error) {
                console.assert(crashError.error);
                throw crashError.error;
            }
            switch (retVal) {
                case 0: break;
                case 1: throw new MalformedJsonRpcError();
                case 2: throw new QueueFullError();
                default: throw new Error("Internal error: unknown json_rpc_send error code: " + retVal);
            }
        },
        nextJsonRpcResponse: (chainId) => __awaiter(this, void 0, void 0, function* () {
            // Because `nextJsonRpcResponse` is passed as parameter an identifier returned by `addChain`,
            // it is always the case that the Wasm instance is already initialized. The only possibility
            // for it to not be the case is if the user completely invented the `chainId`.
            if (!state.initialized)
                throw new Error("Internal error");
            while (true) {
                if (crashError.error)
                    throw crashError.error;
                // Try to pop a message from the queue.
                try {
                    const mem = new Uint8Array(state.instance.exports.memory.buffer);
                    const responseInfo = state.instance.exports.json_rpc_responses_peek(chainId) >>> 0;
                    const ptr = _buffer_js__WEBPACK_IMPORTED_MODULE_0__.readUInt32LE(mem, responseInfo) >>> 0;
                    const len = _buffer_js__WEBPACK_IMPORTED_MODULE_0__.readUInt32LE(mem, responseInfo + 4) >>> 0;
                    // `len === 0` means "queue is empty" according to the API.
                    // In that situation, queue the resolve/reject.
                    if (len !== 0) {
                        const message = _buffer_js__WEBPACK_IMPORTED_MODULE_0__.utf8BytesToString(mem, ptr, len);
                        state.instance.exports.json_rpc_responses_pop(chainId);
                        return message;
                    }
                }
                catch (_error) {
                    console.assert(crashError.error);
                    throw crashError.error;
                }
                // If no message is available, wait for one to be.
                yield new Promise((resolve, reject) => {
                    chains.get(chainId).jsonRpcResponsesPromises.push({ resolve: () => resolve(undefined), reject });
                });
            }
        }),
        addChain: (chainSpec, databaseContent, potentialRelayChains, disableJsonRpc) => {
            return queueOperation((instance, bufferIndices) => {
                if (crashError.error)
                    throw crashError.error;
                try {
                    // `add_chain` unconditionally allocates a chain id. If an error occurs, however, this chain
                    // id will refer to an *erroneous* chain. `chain_is_ok` is used below to determine whether it
                    // has succeeeded or not.
                    // Note that `add_chain` properly de-allocates buffers even if it failed.
                    bufferIndices[0] = new TextEncoder().encode(chainSpec);
                    bufferIndices[1] = new TextEncoder().encode(databaseContent);
                    const potentialRelayChainsEncoded = new Uint8Array(potentialRelayChains.length * 4);
                    for (let idx = 0; idx < potentialRelayChains.length; ++idx) {
                        _buffer_js__WEBPACK_IMPORTED_MODULE_0__.writeUInt32LE(potentialRelayChainsEncoded, idx * 4, potentialRelayChains[idx]);
                    }
                    bufferIndices[2] = potentialRelayChainsEncoded;
                    const chainId = instance.exports.add_chain(0, 1, disableJsonRpc ? 0 : 1, 2);
                    delete bufferIndices[0];
                    delete bufferIndices[1];
                    delete bufferIndices[2];
                    if (instance.exports.chain_is_ok(chainId) != 0) {
                        console.assert(!chains.has(chainId));
                        chains.set(chainId, {
                            jsonRpcResponsesPromises: new Array()
                        });
                        return { success: true, chainId };
                    }
                    else {
                        const errorMsgLen = instance.exports.chain_error_len(chainId) >>> 0;
                        const errorMsgPtr = instance.exports.chain_error_ptr(chainId) >>> 0;
                        const errorMsg = _buffer_js__WEBPACK_IMPORTED_MODULE_0__.utf8BytesToString(new Uint8Array(instance.exports.memory.buffer), errorMsgPtr, errorMsgLen);
                        instance.exports.remove_chain(chainId);
                        return { success: false, error: errorMsg };
                    }
                }
                catch (_error) {
                    console.assert(crashError.error);
                    throw crashError.error;
                }
            });
        },
        removeChain: (chainId) => {
            // Because `removeChain` is passed as parameter an identifier returned by `addChain`, it is
            // always the case that the Wasm instance is already initialized. The only possibility for
            // it to not be the case is if the user completely invented the `chainId`.
            if (!state.initialized)
                throw new Error("Internal error");
            if (crashError.error)
                throw crashError.error;
            // Removing the chain synchronously avoids having to deal with race conditions such as a
            // JSON-RPC response corresponding to a chain that is going to be deleted but hasn't been yet.
            // These kind of race conditions are already delt with within smoldot.
            console.assert(chains.has(chainId));
            for (const { reject } of chains.get(chainId).jsonRpcResponsesPromises) {
                reject(new _client_js__WEBPACK_IMPORTED_MODULE_2__.AlreadyDestroyedError());
            }
            chains.delete(chainId);
            try {
                state.instance.exports.remove_chain(chainId);
            }
            catch (_error) {
                console.assert(crashError.error);
                throw crashError.error;
            }
        },
        startShutdown: () => {
            return queueOperation((instance) => {
                // `startShutdown` is a bit special in its handling of crashes.
                // Shutting down will lead to `onWasmPanic` being called at some point, possibly during
                // the call to `start_shutdown` itself. As such, we move into "don't print errors anymore"
                // mode even before calling `start_shutdown`.
                //
                // Furthermore, if a crash happened in the past, there is no point in throwing an
                // exception when the user wants the shutdown to happen.
                if (crashError.error)
                    return;
                try {
                    printError.printError = false;
                    instance.exports.start_shutdown();
                }
                catch (_error) {
                }
            });
        }
    };
}


/***/ }),

/***/ "../../node_modules/smoldot/dist/mjs/instance/raw-instance.js":
/*!********************************************************************!*\
  !*** ../../node_modules/smoldot/dist/mjs/instance/raw-instance.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ConnectionError": () => (/* reexport safe */ _bindings_smoldot_light_js__WEBPACK_IMPORTED_MODULE_0__.ConnectionError),
/* harmony export */   "startInstance": () => (/* binding */ startInstance)
/* harmony export */ });
/* harmony import */ var _bindings_smoldot_light_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bindings-smoldot-light.js */ "../../node_modules/smoldot/dist/mjs/instance/bindings-smoldot-light.js");
/* harmony import */ var _bindings_wasi_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bindings-wasi.js */ "../../node_modules/smoldot/dist/mjs/instance/bindings-wasi.js");
// Smoldot
// Copyright (C) 2019-2022  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.



function startInstance(config, platformBindings) {
    return __awaiter(this, void 0, void 0, function* () {
        let killAll;
        const bufferIndices = new Array;
        // Callback called when `advance_execution_ready` is called by the Rust code, if any.
        const advanceExecutionPromise = { value: null };
        // Used to bind with the smoldot-light bindings. See the `bindings-smoldot-light.js` file.
        const smoldotJsConfig = Object.assign({ bufferIndices, connect: platformBindings.connect, onPanic: (message) => {
                killAll();
                config.onWasmPanic(message);
                throw new Error();
            }, advanceExecutionReadyCallback: () => {
                if (advanceExecutionPromise.value)
                    advanceExecutionPromise.value();
                advanceExecutionPromise.value = null;
            } }, config);
        // Used to bind with the Wasi bindings. See the `bindings-wasi.js` file.
        const wasiConfig = {
            envVars: [],
            getRandomValues: platformBindings.getRandomValues,
            performanceNow: platformBindings.performanceNow,
            onProcExit: (retCode) => {
                killAll();
                config.onWasmPanic(`proc_exit called: ${retCode}`);
                throw new Error();
            }
        };
        const { imports: smoldotBindings, killAll: smoldotBindingsKillAll } = (0,_bindings_smoldot_light_js__WEBPACK_IMPORTED_MODULE_0__["default"])(smoldotJsConfig);
        killAll = smoldotBindingsKillAll;
        // Start the Wasm virtual machine.
        // The Rust code defines a list of imports that must be fulfilled by the environment. The second
        // parameter provides their implementations.
        const result = yield WebAssembly.instantiate(config.wasmModule, {
            // The functions with the "smoldot" prefix are specific to smoldot.
            "smoldot": smoldotBindings,
            // As the Rust code is compiled for wasi, some more wasi-specific imports exist.
            "wasi_snapshot_preview1": (0,_bindings_wasi_js__WEBPACK_IMPORTED_MODULE_1__["default"])(wasiConfig),
        });
        const instance = result;
        smoldotJsConfig.instance = instance;
        wasiConfig.instance = instance;
        // Smoldot requires an initial call to the `init` function in order to do its internal
        // configuration.
        instance.exports.init(config.maxLogLevel);
        (() => __awaiter(this, void 0, void 0, function* () {
            // In order to avoid calling `setTimeout` too often, we accumulate sleep up until
            // a certain threshold.
            let missingSleep = 0;
            // Extract (to make sure the value doesn't change) and sanitize `cpuRateLimit`.
            let cpuRateLimit = config.cpuRateLimit;
            if (isNaN(cpuRateLimit))
                cpuRateLimit = 1.0;
            if (cpuRateLimit > 1.0)
                cpuRateLimit = 1.0;
            if (cpuRateLimit < 0.0)
                cpuRateLimit = 0.0;
            const periodicallyYield = { value: false };
            const [periodicallyYieldInit, unregisterCallback] = platformBindings.registerShouldPeriodicallyYield((newValue) => {
                periodicallyYield.value = newValue;
            });
            periodicallyYield.value = periodicallyYieldInit;
            let now = platformBindings.performanceNow();
            while (true) {
                const whenReadyAgain = new Promise((resolve) => advanceExecutionPromise.value = resolve);
                const outcome = instance.exports.advance_execution();
                if (outcome === 0) {
                    unregisterCallback();
                    break;
                }
                const afterExec = platformBindings.performanceNow();
                const elapsed = afterExec - now;
                now = afterExec;
                // In order to enforce the rate limiting, we stop executing for a certain
                // amount of time.
                // The base equation here is: `(sleep + elapsed) * rateLimit == elapsed`,
                // from which the calculation below is derived.
                const sleep = elapsed * (1.0 / cpuRateLimit - 1.0);
                missingSleep += sleep;
                if (missingSleep > (periodicallyYield ? 5 : 1000)) {
                    // `setTimeout` has a maximum value, after which it will overflow. 🤦
                    // See <https://developer.mozilla.org/en-US/docs/Web/API/setTimeout#maximum_delay_value>
                    // While adding a cap technically skews the CPU rate limiting algorithm, we don't
                    // really care for such extreme values.
                    if (missingSleep > 2147483646) // Doc says `> 2147483647`, but I don't really trust their pedanticism so let's be safe
                        missingSleep = 2147483646;
                    yield new Promise((resolve) => setTimeout(resolve, missingSleep));
                    missingSleep = 0;
                }
                yield whenReadyAgain;
                const afterWait = platformBindings.performanceNow();
                missingSleep -= (afterWait - now);
                if (missingSleep < 0)
                    missingSleep = 0;
                now = afterWait;
            }
        }))();
        return [instance, bufferIndices];
    });
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,